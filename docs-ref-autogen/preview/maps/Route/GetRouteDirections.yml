### YamlMime:RESTOperation
uid: atlas.microsoft.com.maps.route.getroutedirections
name: Get Route Directions
service: Maps
groupName: Route
apiVersion: "1.0"
summary: >-
  Returns  a route between an origin and a destination, passing through waypoints if they are specified. The route will take into account factors such as current traffic and the typical road speeds on the requested day of the week and time of day.


  Information returned includes the distance, estimated travel time, and a representation of the route geometry. Additional routing information such as optimized waypoint order or turn by turn instructions is also available, depending on the options selected.


  Routing service provides a set of parameters for a detailed description of vehicle-specific Consumption Model. Please check [Consumption Model](https://docs.microsoft.com/en-us/rest/api/maps/consumption-model) for detailed explanation of the concepts and parameters involved.
consumes: []
produces:
- application/json
- application/xml
paths:
- content: GET https://atlas.microsoft.com/route/directions/{format}?subscription-key={subscription-key}&api-version=1.0&query={query}
- content: GET https://atlas.microsoft.com/route/directions/{format}?subscription-key={subscription-key}&api-version=1.0&query={query}&maxAlternatives={maxAlternatives}&alternativeType={alternativeType}&minDeviationDistance={minDeviationDistance}&arriveAt={arriveAt}&departAt={departAt}&minDeviationTime={minDeviationTime}&instructionsType={instructionsType}&language={language}&computeBestOrder={computeBestOrder}&routeRepresentation={routeRepresentation}&computeTravelTimeFor={computeTravelTimeFor}&vehicleHeading={vehicleHeading}&report={report}&sectionType={sectionType}&vehicleAxleWeight={vehicleAxleWeight}&vehicleWidth={vehicleWidth}&vehicleHeight={vehicleHeight}&vehicleLength={vehicleLength}&vehicleMaxSpeed={vehicleMaxSpeed}&vehicleWeight={vehicleWeight}&windingness={windingness}&hilliness={hilliness}&travelMode={travelMode}&avoid={avoid}&traffic={traffic}&routeType={routeType}&vehicleLoadType={vehicleLoadType}&vehicleEngineType={vehicleEngineType}&constantSpeedConsumptionInLitersPerHundredkm={constantSpeedConsumptionInLitersPerHundredkm}&currentFuelInLiters={currentFuelInLiters}&auxiliaryPowerInLitersPerHour={auxiliaryPowerInLitersPerHour}&fuelEnergyDensityInMJoulesPerLiter={fuelEnergyDensityInMJoulesPerLiter}&accelerationEfficiency={accelerationEfficiency}&decelerationEfficiency={decelerationEfficiency}&uphillEfficiency={uphillEfficiency}&downhillEfficiency={downhillEfficiency}&constantSpeedConsumptionInkWhPerHundredkm={constantSpeedConsumptionInkWhPerHundredkm}&currentChargeInkWh={currentChargeInkWh}&maxChargeInkWh={maxChargeInkWh}&auxiliaryPowerInkW={auxiliaryPowerInkW}
  isOptional: true
uriParameters:
- name: format
  in: path
  isRequired: true
  description: Desired format of the response. Value can be either _json_ or _xml_.
  types:
  - uid: string
- name: subscription-key
  in: query
  isRequired: true
  description: Azure Maps subscription key
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API. Current version is 1.0
  types:
  - uid: string
- name: query
  in: query
  isRequired: true
  description: The Coordinates through which the route is calculated, delimited by a colon.  A minimum of two coordinates is required.  The first one is the origin and the last is the destination of the route. Optional coordinates in-between act as WayPoints in the route.  You can pass up to 50 WayPoints unless computeBestOrder is set to true, in which case the limit is reduced to 20.
  types:
  - uid: string
- name: maxAlternatives
  in: query
  description: 'Number of desired alternative routes to be calculated. Default: 0, minimum: 0 and maximum: 5'
  types:
  - uid: integer
- name: alternativeType
  in: query
  description: Controls the optimality, with respect to the given planning criteria. Controls the optimality, with respect to the given planning criteria, of the calculated alternatives compared to the reference route.
  types:
  - uid: alternativeType
- name: minDeviationDistance
  in: query
  description: All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of meters. Can only be used when reconstructing a route. The minDeviationDistance parameter cannot be used in conjunction with arriveAt
  types:
  - uid: integer
- name: arriveAt
  in: query
  description: The date and time of arrival at the destination point. It must be specified as a dateTime. When a time zone offset is not specified it will be assumed to be that of the destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be used in conjunction with departAt, minDeviationDistance or minDeviationTime.
  types:
  - uid: string
  format: date-time
- name: departAt
  in: query
  description: The date and time of departure from the origin point. Departure times apart from now must be specified as a dateTime. When a time zone offset is not specified, it will be assumed to be that of the origin point. The departAt value must be in the future in the date-time format (1996-12-19T16:39:57-08:00).
  types:
  - uid: string
  format: date-time
- name: minDeviationTime
  in: query
  description: All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of seconds. Can only be used when reconstructing a route. The minDeviationTime parameter cannot be used in conjunction with arriveAt
  types:
  - uid: integer
- name: instructionsType
  in: query
  description: If specified, guidance instructions will be returned. Note that the instructionsType parameter cannot be used in conjunction with routeRepresentation=none
  types:
  - uid: instructionsType
- name: language
  in: query
  description: The language parameter determines the language of the guidance messages. It does not affect proper nouns (the names of streets, plazas, etc.) It has no effect when instructionsType=coded. Allowed values are (a subset of) the IETF language tags described
  types:
  - uid: string
- name: computeBestOrder
  in: query
  description: Re-order the route waypoints to reduce the route length. Yields best results when used in conjunction with routeType _shortest_. Possible values are true or false. True computes a better order if possible, but is not allowed to be used in conjunction with maxAlternatives value greater than 0 or in conjunction with circle waypoints. The response will include the optimized waypoint indices and can be used with a maximum of 20 route waypoints. False will use the locations in the given order and not allowed to be used in conjunction with routeRepresentation _none_.
  types:
  - uid: boolean
- name: routeRepresentation
  in: query
  description: Specifies the representation of the set of routes provided as response. This parameter value can only be used in conjunction with computeBestOrder=true.
  types:
  - uid: routeRepresentation
- name: computeTravelTimeFor
  in: query
  description: Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
  types:
  - uid: computeTravelTimeFor
- name: vehicleHeading
  in: query
  description: The directional heading of the vehicle in degrees starting at true North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Possible values 0-359
  types:
  - uid: integer
- name: report
  in: query
  description: Specifies which data should be reported for diagnosis purposes. The only possible value is _effectiveSettings_. Reports the effective parameters or data used when calling the API. In the case of defaulted parameters the default will be reflected where the parameter was not specified by the caller.
  types:
  - uid: string
- name: sectionType
  in: query
  description: >-
    Specifies which of the section types is reported in the route response.


    For example if sectionType = pedestrian the sections which are suited for pedestrians only are returned. Multiple types can be used. The default sectionType refers to the travelMode input. By default travelMode is set to car
  types:
  - uid: sectionType
- name: vehicleAxleWeight
  in: query
  description: Weight per axle of the vehicle in kg. A value of 0 means that weight restrictions per axle are not considered.
  types:
  - uid: integer
- name: vehicleWidth
  in: query
  description: Width of the vehicle in meters. A value of 0 means that width restrictions are not considered.
  types:
  - uid: number
  format: float
- name: vehicleHeight
  in: query
  description: Height of the vehicle in meters. A value of 0 means that height restrictions are not considered.
  types:
  - uid: number
  format: float
- name: vehicleLength
  in: query
  description: Length of the vehicle in meters. A value of 0 means that length restrictions are not considered.
  types:
  - uid: number
  format: float
- name: vehicleMaxSpeed
  in: query
  description: Maximum speed of the vehicle in km/hour. A value of 0 means that an appropriate value for the vehicle will be determined and applied during route planning. A non-zero value may be overridden during route planning.
  types:
  - uid: integer
- name: vehicleWeight
  in: query
  description: >-
    Weight of the vehicle in kilograms.


    * It is mandatory if any of the *Efficiency parameters are set.


    * It must be strictly positive when used in the context of the Consumption Model. Weight restrictions are considered.


    * If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is non-zero, then weight restrictions are considered.


    * In all other cases, this parameter is ignored.


    Sensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900
  types:
  - uid: integer
- name: windingness
  in: query
  description: Level of turns for thrilling route. This parameter can only be used in conjunction with routeType=thrilling.
  types:
  - uid: windingness
- name: hilliness
  in: query
  description: Degree of hilliness for thrilling route. This parameter can only be used in conjunction with routeType=thrilling.
  types:
  - uid: hilliness
- name: travelMode
  in: query
  description: The mode of travel for the requested route. Note that the requested travelMode may not be available for the entire route. Where the requested travelMode is not available for a particular section, the travelMode element of the response for that section will be other. Note that travel modes bus, motorcycle, taxi and van are BETA functionality. Full restriction data is not available in all areas. In calculateReachableRange requests, the values bicycle and pedestrian must not be used
  types:
  - uid: travelMode
- name: avoid
  in: query
  description: 'Specifies something that the route calculation should try to avoid when determining the route. Can be specified multiple times. Possible values: (tollRoads avoids toll roads), (motorways avoids motorways), (ferries avoids ferries), (unpavedRoads avoids unpaved roads), (carpools avoids routes that require use of carpool (HOV/ High Occupancy Vehicle) lanes), (alreadyUsedRoads avoids using the same road multiple times. Most useful in conjunction with routeType=thrilling). In calculateReachableRange requests, the value alreadyUsedRoads must not be used.'
  types:
  - uid: avoid
- name: traffic
  in: query
  description: 'Possible values: (true (do consider all available traffic information during routing)), (false (ignore current traffic data during routing). Note that although the current traffic data is ignored during routing, the effect of historic traffic on effective road speeds is still incorporated).'
  types:
  - uid: boolean
- name: routeType
  in: query
  description: The type of route requested.
  types:
  - uid: routeType
- name: vehicleLoadType
  in: query
  description: Types of cargo that may be classified as hazardous materials and restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for use in other countries. Values beginning with USHazmat are for US routing while otherHazmat should be used for all other countries. vehicleLoadType can be specified multiple times. This parameter is currently only considered for travelMode=truck.
  types:
  - uid: vehicleLoadType
- name: vehicleEngineType
  in: query
  description: Engine type of the vehicle. When a detailed Consumption Model is specified, it must be consistent with the value of **vehicleEngineType**.
  types:
  - uid: vehicleEngineType
- name: constantSpeedConsumptionInLitersPerHundredkm
  in: query
  description: "\n\nSpecifies the speed-dependent component of consumption.\n\nProvided as an unordered list of colon-delimited speed & consumption-rate pairs. The list defines points on a consumption curve. Consumption rates for speeds not in the list are found as follows:\n\n * by linear interpolation, if the given speed lies in between two speeds in the list\n\n * by linear extrapolation otherwise, assuming a constant (?Consumption/?Speed) determined by the nearest two points in the list\n\nThe list must contain between 1 and 25 points (inclusive), and may not contain duplicate points for the same speed. If it only contains a single point, then the consumption rate of that point is used without further processing.\n\nConsumption specified for the largest speed must be greater than or equal to that of the penultimate largest speed. This ensures that extrapolation does not lead to negative consumption rates.\n\nSimilarly, consumption values specified for the two smallest speeds in the list cannot lead to a negative consumption rate for any smaller speed.\n\nThe valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.\n\nSensible Values : 50,6.3:130,11.5\n\n**Note** : This parameter is required for **The Combustion Consumption Model**."
  types:
  - uid: number
  format: float
- name: currentFuelInLiters
  in: query
  description: >-
    Specifies the current supply of fuel in liters.


    Sensible Values : 55
  types:
  - uid: number
  format: float
- name: auxiliaryPowerInLitersPerHour
  in: query
  description: >-
    Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.


    It can be used to specify consumption due to devices and systems such as AC systems, radio, heating, etc.


    Sensible Values : 0.2
  types:
  - uid: number
  format: float
- name: fuelEnergyDensityInMJoulesPerLiter
  in: query
  description: >-
    Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.


    This parameter is required if any ***Efficiency** parameter is set.


    Sensible Values : 34.2
  types:
  - uid: number
  format: float
- name: accelerationEfficiency
  in: query
  description: >-
    Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates _(i.e. KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed_ is obtained by converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.


    Must be paired with **decelerationEfficiency**.


    The range of values allowed are 0.0 to 1/**decelerationEfficiency**.


    Sensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66
  types:
  - uid: number
  format: float
- name: decelerationEfficiency
  in: query
  description: >-
    Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates _(i.e. ChemicalEnergySaved/KineticEnergyLost). ChemicalEnergySaved_ is obtained by converting saved (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.


    Must be paired with **accelerationEfficiency**.


    The range of values allowed are 0.0 to 1/**accelerationEfficiency**.


    Sensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91
  types:
  - uid: number
  format: float
- name: uphillEfficiency
  in: query
  description: >-
    Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation _(i.e. PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed_ is obtained by converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.


    Must be paired with **downhillEfficiency**.


    The range of values allowed are 0.0 to 1/**downhillEfficiency**.


    Sensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74
  types:
  - uid: number
  format: float
- name: downhillEfficiency
  in: query
  description: >-
    Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation _(i.e. ChemicalEnergySaved/PotentialEnergyLost).ChemicalEnergySaved_ is obtained by converting saved (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.


    Must be paired with **uphillEfficiency**.


    The range of values allowed are 0.0 to 1/**uphillEfficiency**.


    Sensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73
  types:
  - uid: number
  format: float
- name: constantSpeedConsumptionInkWhPerHundredkm
  in: query
  description: >-
    Specifies the speed-dependent component of consumption.


    Provided as an unordered list of speed/consumption-rate pairs. The list defines points on a consumption curve. Consumption rates for speeds not in the list are found as follows:


    * by linear interpolation, if the given speed lies in between two speeds in the list


    * by linear extrapolation otherwise, assuming a constant (?Consumption/?Speed) determined by the nearest two points in the list


    The list must contain between 1 and 25 points (inclusive), and may not contain duplicate points for the same speed. If it only contains a single point, then the consumption rate of that point is used without further processing.


    Consumption specified for the largest speed must be greater than or equal to that of the penultimate largest speed. This ensures that extrapolation does not lead to negative consumption rates.


    Similarly, consumption values specified for the two smallest speeds in the list cannot lead to a negative consumption rate for any smaller  speed.


    The valid range for the consumption values(expressed in kWh/100km) is between 0.01 and 100000.0.


    Sensible Values : 50,8.2:130,21.3


    This parameter is required for **Electric consumption model**.
  types:
  - uid: number
  format: float
- name: currentChargeInkWh
  in: query
  description: >-
    Specifies the current electric energy supply in kilowatt hours (kWh).


    This parameter co-exists with **maxChargeInkWh** parameter.


    The range of values allowed are 0.0 to **maxChargeInkWh**.


    Sensible Values : 43
  types:
  - uid: string
- name: maxChargeInkWh
  in: query
  description: >-
    Specifies the maximum electric energy supply in kilowatt hours (kWh) that may be stored in the vehicle's battery.


    This parameter co-exists with **currentChargeInkWh** parameter.


    Minimum value has to be greater than or equal to **currentChargeInkWh**.


    Sensible Values : 85
  types:
  - uid: string
- name: auxiliaryPowerInkW
  in: query
  description: >-
    Specifies the amount of power consumed for sustaining auxiliary systems, in kilowatts (kW).


    It can be used to specify consumption due to devices and systems such as AC systems, radio, heating, etc.


    Sensible Values : 1.7
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK
  types:
  - uid: RouteDirectionsResult
- name: 400 Bad Request
  description: 'Bad request: one or more parameters were incorrectly specified or are mutually exclusive.'
  types:
  - uid: ErrorResponse
- name: 401 Unauthorized
  description: Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.
  types:
  - uid: ErrorResponse
- name: 403 Forbidden
  description: Permission, capacity, or authentication issues.
  types:
  - uid: ErrorResponse
- name: 404 Not Found
  description: 'Not Found: the requested resource could not be found, but it may be available again in the future.'
  types:
  - uid: ErrorResponse
- name: 500 Internal Server Error
  description: An error occurred while processing the request. Please try again later.
  types:
  - uid: ErrorResponse
requestHeader: []
definitions:
- name: alternativeType
  description: Controls the optimality, with respect to the given planning criteria. Controls the optimality, with respect to the given planning criteria, of the calculated alternatives compared to the reference route.
  kind: enum
  properties:
  - name: anyRoute
    description: Allow any alternative route to be returned irrespective of how it compares to the reference route in terms of optimality.
    types:
    - uid: string
  - name: betterRoute
    description: Return an alternative route only if it is better than the reference route according to the given planning criteria.
    types:
    - uid: string
- name: instructionsType
  description: If specified, guidance instructions will be returned. Note that the instructionsType parameter cannot be used in conjunction with routeRepresentation=none
  kind: enum
  properties:
  - name: coded
    description: Returns raw instruction data without human-readable messages.
    types:
    - uid: string
  - name: text
    description: Returns raw instructions data with human-readable messages in plain text.
    types:
    - uid: string
  - name: tagged
    description: Returns raw instruction data with tagged human-readable messages to permit formatting.
    types:
    - uid: string
- name: routeRepresentation
  description: Specifies the representation of the set of routes provided as response. This parameter value can only be used in conjunction with computeBestOrder=true.
  kind: enum
  properties:
  - name: polyline
    description: Includes route geometry in the response.
    types:
    - uid: string
  - name: none
    description: Includes only the optimized waypoint indices but does not include the route geometry in the response.
    types:
    - uid: string
- name: computeTravelTimeFor
  description: Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
  kind: enum
  properties:
  - name: none
    description: Does not compute additional travel times.
    types:
    - uid: string
  - name: all
    description: Computes travel times for all types of traffic information and specifies all results in the fields noTrafficTravelTimeInSeconds, historicTrafficTravelTimeInSeconds and liveTrafficIncidentsTravelTimeInSeconds being included in the summaries in the route response.
    types:
    - uid: string
- name: sectionType
  description: >-
    Specifies which of the section types is reported in the route response.


    For example if sectionType = pedestrian the sections which are suited for pedestrians only are returned. Multiple types can be used. The default sectionType refers to the travelMode input. By default travelMode is set to car
  kind: enum
  properties:
  - name: carTrain
    types:
    - uid: string
  - name: country
    types:
    - uid: string
  - name: ferry
    types:
    - uid: string
  - name: motorway
    types:
    - uid: string
  - name: pedestrian
    types:
    - uid: string
  - name: tollRoad
    types:
    - uid: string
  - name: tollVignette
    types:
    - uid: string
  - name: traffic
    types:
    - uid: string
  - name: travelMode
    types:
    - uid: string
  - name: tunnel
    types:
    - uid: string
- name: windingness
  description: Level of turns for thrilling route. This parameter can only be used in conjunction with routeType=thrilling.
  kind: enum
  properties:
  - name: low
    types:
    - uid: string
  - name: normal
    types:
    - uid: string
  - name: high
    types:
    - uid: string
- name: hilliness
  description: Degree of hilliness for thrilling route. This parameter can only be used in conjunction with routeType=thrilling.
  kind: enum
  properties:
  - name: low
    types:
    - uid: string
  - name: normal
    types:
    - uid: string
  - name: high
    types:
    - uid: string
- name: travelMode
  description: The mode of travel for the requested route. Note that the requested travelMode may not be available for the entire route. Where the requested travelMode is not available for a particular section, the travelMode element of the response for that section will be other. Note that travel modes bus, motorcycle, taxi and van are BETA functionality. Full restriction data is not available in all areas. In calculateReachableRange requests, the values bicycle and pedestrian must not be used
  kind: enum
  properties:
  - name: car
    types:
    - uid: string
  - name: truck
    types:
    - uid: string
  - name: taxi
    types:
    - uid: string
  - name: bus
    types:
    - uid: string
  - name: van
    types:
    - uid: string
  - name: motorcycle
    types:
    - uid: string
  - name: bicycle
    types:
    - uid: string
  - name: pedestrian
    types:
    - uid: string
- name: avoid
  description: 'Specifies something that the route calculation should try to avoid when determining the route. Can be specified multiple times. Possible values: (tollRoads avoids toll roads), (motorways avoids motorways), (ferries avoids ferries), (unpavedRoads avoids unpaved roads), (carpools avoids routes that require use of carpool (HOV/ High Occupancy Vehicle) lanes), (alreadyUsedRoads avoids using the same road multiple times. Most useful in conjunction with routeType=thrilling). In calculateReachableRange requests, the value alreadyUsedRoads must not be used.'
  kind: enum
  properties:
  - name: tollRoads
    types:
    - uid: string
  - name: motorways
    types:
    - uid: string
  - name: ferries
    types:
    - uid: string
  - name: unpavedRoads
    types:
    - uid: string
  - name: carpools
    types:
    - uid: string
  - name: alreadyUsedRoads
    types:
    - uid: string
- name: routeType
  description: The type of route requested.
  kind: enum
  properties:
  - name: fastest
    description: The fastest route.
    types:
    - uid: string
  - name: shortest
    description: The shortest route by distance.
    types:
    - uid: string
  - name: eco
    description: A route balanced by economy and speed.
    types:
    - uid: string
  - name: thrilling
    description: Includes interesting or challenging roads and uses as few motorways as possible. You can choose the level of turns included and also the degree of hilliness. See the hilliness and windingness parameters for how to set this. There is a limit of 900 km on routes planned with routeType=thrilling
    types:
    - uid: string
- name: vehicleLoadType
  description: Types of cargo that may be classified as hazardous materials and restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for use in other countries. Values beginning with USHazmat are for US routing while otherHazmat should be used for all other countries. vehicleLoadType can be specified multiple times. This parameter is currently only considered for travelMode=truck.
  kind: enum
  properties:
  - name: USHazmatClass1
    description: Explosives
    types:
    - uid: string
  - name: USHazmatClass2
    description: Compressed gas
    types:
    - uid: string
  - name: USHazmatClass3
    description: Flammable liquids
    types:
    - uid: string
  - name: USHazmatClass4
    description: Flammable solids
    types:
    - uid: string
  - name: USHazmatClass5
    description: Oxidizers
    types:
    - uid: string
  - name: USHazmatClass6
    description: Poisons
    types:
    - uid: string
  - name: USHazmatClass7
    description: Radioactive
    types:
    - uid: string
  - name: USHazmatClass8
    description: Corrosives
    types:
    - uid: string
  - name: USHazmatClass9
    description: Miscellaneous
    types:
    - uid: string
  - name: otherHazmatExplosive
    description: Explosives
    types:
    - uid: string
  - name: otherHazmatGeneral
    description: Miscellaneous
    types:
    - uid: string
  - name: otherHazmatHarmfulToWater
    description: Harmful to water
    types:
    - uid: string
- name: vehicleEngineType
  description: Engine type of the vehicle. When a detailed Consumption Model is specified, it must be consistent with the value of **vehicleEngineType**.
  kind: enum
  properties:
  - name: combustion
    types:
    - uid: string
  - name: electric
    types:
    - uid: string
- name: RouteDirectionsResult
  description: This object is returned from a successful Route Directions call
  kind: object
  properties:
  - name: formatVersion
    isReadyOnly: true
    description: Format Version property
    types:
    - uid: string
  - name: copyright
    isReadyOnly: true
    description: Copyright property
    types:
    - uid: string
  - name: privacy
    isReadyOnly: true
    description: Privacy property
    types:
    - uid: string
  - name: routes
    isReadyOnly: true
    description: Routes array
    types:
    - uid: RouteDef
      isArray: true
  - name: optimizedWaypoints
    isReadyOnly: true
    description: Optimized way points array
    types:
    - uid: OptimizedWaypoint
      isArray: true
  - name: report
    description: Reports the effective settings used in the current call.
    types:
    - uid: ReportInResponse
- name: ErrorResponse
  description: This response object is returned when an error occurs in the Maps API
  kind: object
  properties:
  - name: error
    description: This object is returned when an error occurs in the Maps API
    types:
    - uid: Error
- name: RouteDef
  kind: object
  properties:
  - name: summary
    isReadyOnly: true
    description: Summary object
    types:
    - uid: Summary
  - name: legs
    isReadyOnly: true
    description: Legs array
    types:
    - uid: Leg
      isArray: true
  - name: sections
    isReadyOnly: true
    description: Sections array
    types:
    - uid: Section
      isArray: true
  - name: guidance
    isReadyOnly: true
    description: Contains guidance related elements. This field is present only when guidance was requested and is available.
    types:
    - uid: Guidance
- name: OptimizedWaypoint
  description: Optimized way point object.
  kind: object
  properties:
  - name: providedIndex
    isReadyOnly: true
    description: Way point index provided by the user.
    types:
    - uid: integer
  - name: optimizedIndex
    isReadyOnly: true
    description: Optimized way point index from the system.
    types:
    - uid: integer
- name: ReportInResponse
  description: Reports the effective settings used in the current call.
  kind: object
  properties:
  - name: effectiveSettings
    isReadyOnly: true
    description: Effective parameters or data used when calling this Route API.
    types:
    - uid: EffectiveSetting
      isArray: true
- name: Error
  description: This object is returned when an error occurs in the Maps API
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The HTTP status code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: If available, a human readable description of the error.
    types:
    - uid: string
- name: Summary
  description: Summary object
  kind: object
  properties:
  - name: query
    isReadyOnly: true
    description: Query property
    types:
    - uid: string
  - name: queryType
    isReadyOnly: true
    description: QueryType property
    types:
    - uid: string
  - name: queryTime
    isReadyOnly: true
    description: QueryTime property
    types:
    - uid: integer
  - name: numResults
    isReadyOnly: true
    description: NumResults property
    types:
    - uid: integer
  - name: offset
    isReadyOnly: true
    description: Offset property
    types:
    - uid: integer
  - name: totalResults
    isReadyOnly: true
    description: TotalResults property
    types:
    - uid: integer
  - name: fuzzyLevel
    isReadyOnly: true
    description: FuzzyLevel property
    types:
    - uid: integer
- name: Leg
  kind: object
  properties:
  - name: summary
    isReadyOnly: true
    description: Summary object
    types:
    - uid: Summary
  - name: points
    isReadyOnly: true
    description: Points array
    types:
    - uid: Points
      isArray: true
- name: Section
  kind: object
  properties:
  - name: startPointIndex
    isReadyOnly: true
    description: Start Point Index property
    types:
    - uid: integer
  - name: endPointIndex
    isReadyOnly: true
    description: End Point Index property
    types:
    - uid: integer
  - name: sectionType
    isReadyOnly: true
    description: Section Type property
    types:
    - uid: string
  - name: travelMode
    isReadyOnly: true
    description: Travel Mode property
    types:
    - uid: string
  - name: simpleCategory
    isReadyOnly: true
    description: Type of the incident. Can currently be JAM, ROAD_WORK, ROAD_CLOSURE, or OTHER. See "tec" for detailed information.
    types:
    - uid: string
  - name: effectiveSpeedInKmh
    isReadyOnly: true
    description: Effective speed of the incident in km/h, averaged over its entire length.
    types:
    - uid: integer
  - name: delayInSeconds
    isReadyOnly: true
    description: Delay in seconds caused by the incident.
    types:
    - uid: integer
  - name: magnitudeOfDelay
    isReadyOnly: true
    description: 'The magnitude of delay caused by the incident. These values correspond to the values of the response field <ty> of the Get Traffic Incident Detail API. '
    types:
    - uid: magnitudeOfDelay
  - name: tec
    description: Details of the traffic event, using definitions in the TPEG2-TEC standard. Can contain <effectCode> and <causes> elements.
    types:
    - uid: Tec
- name: Guidance
  description: Contains guidance related elements. This field is present only when guidance was requested and is available.
  kind: object
  properties:
  - name: instructions
    isReadyOnly: true
    description: A list of instructions describing maneuvers.
    types:
    - uid: GuidanceInstruction
      isArray: true
  - name: instructionGroups
    isReadyOnly: true
    description: xxxxx.
    types:
    - uid: GuidanceInstructionGroup
      isArray: true
- name: EffectiveSetting
  description: Effective parameter or data used when calling this Route API.
  kind: object
  properties:
  - name: key
    isReadyOnly: true
    description: Name of the parameter used.
    types:
    - uid: string
  - name: value
    isReadyOnly: true
    description: Value of the parameter used.
    types:
    - uid: string
- name: Points
  description: Points array
  kind: object
  properties:
  - name: latitude
    isReadyOnly: true
    description: Latitude property
    types:
    - uid: number
  - name: longitude
    isReadyOnly: true
    description: Longitude property
    types:
    - uid: number
- name: magnitudeOfDelay
  description: 'The magnitude of delay caused by the incident. These values correspond to the values of the response field <ty> of the Get Traffic Incident Detail API. '
  kind: enum
  properties:
  - name: "0"
    description: Unknown.
    types:
    - uid: string
  - name: "1"
    description: Minor.
    types:
    - uid: string
  - name: "2"
    description: Moderate.
    types:
    - uid: string
  - name: "3"
    description: Major.
    types:
    - uid: string
  - name: "4"
    description: Undefined, used for road closures and other indefinite delays.
    types:
    - uid: string
- name: Tec
  description: Details of the traffic event, using definitions in the TPEG2-TEC standard. Can contain <effectCode> and <causes> elements.
  kind: object
  properties:
  - name: effectCode
    isReadyOnly: true
    description: The effect on the traffic flow. Contains a value in the tec001:EffectCode table, as defined in the TPEG2-TEC standard. Can be used to color-code traffic events according to severity.
    types:
    - uid: integer
  - name: causes
    description: List of <cause> elements.
    types:
    - uid: TecCause
      isArray: true
- name: GuidanceInstruction
  description: A set of attributes describing a maneuver, e.g. 'Turn right', 'Keep left', 'Take the ferry', 'Take the motorway', 'Arrive'.
  kind: object
  properties:
  - name: routeOffsetInMeters
    isReadyOnly: true
    description: Distance from the start of the route to the point of the instruction..
    types:
    - uid: integer
  - name: travelTimeInSeconds
    isReadyOnly: true
    description: Estimated travel time up to the point corresponding to routeOffsetInMeters.
    types:
    - uid: integer
  - name: point
    isReadyOnly: true
    description: A location of the maneuver defined as a latitude longitude pair. .
    types:
    - uid: Point
  - name: instructionType
    description: Type of the instruction, e.g., turn or change of road form.
    types:
    - uid: instructionType
  - name: street
    isReadyOnly: true
    description: Street name of the next significant road segment after the maneuver, or of the street that should be followed.
    types:
    - uid: string
  - name: countryCode
    isReadyOnly: true
    description: 3-character ISO 3166-1 alpha-3 country code.
    types:
    - uid: string
  - name: possibleCombineWithNext
    isReadyOnly: true
    description: It is possible to optionally combine the instruction with the next one. This can be used to build messages like "Turn left and then turn right".
    types:
    - uid: boolean
  - name: drivingSide
    isReadyOnly: true
    description: Indicates left-hand vs. right-hand side driving at the point of the maneuver.
    types:
    - uid: drivingSide
  - name: maneuver
    isReadyOnly: true
    description: A code identifying the maneuver.
    types:
    - uid: maneuver
  - name: message
    isReadyOnly: true
    description: A human-readable message for the maneuver.
    types:
    - uid: string
- name: GuidanceInstructionGroup
  description: Groups a sequence of instruction elements which are related to each other. The sequence range is constrained with firstInstructionIndex and lastInstructionIndex. When human-readable text messages are requested for guidance (instructionType=text or tagged), then the instructionGroup has a summary message returned when available.
  kind: object
  properties:
  - name: firstInstructionIndex
    isReadyOnly: true
    description: Index of the first instruction.
    types:
    - uid: integer
  - name: lastInstructionIndex
    isReadyOnly: true
    description: Index of the last instruction.
    types:
    - uid: integer
  - name: groupLengthInMeters
    isReadyOnly: true
    description: Length of the group.
    types:
    - uid: integer
  - name: groupMessage
    isReadyOnly: true
    description: Summary message when human-readable text messages are requested for guidance (instructionType=text or tagged).
    types:
    - uid: string
- name: TecCause
  description: The cause of the traffic event. Can contain <mainCauseCode> and <subCauseCode> elements. Can be used to define iconography and descriptions.
  kind: object
  properties:
  - name: mainCauseCode
    isReadyOnly: true
    description: The main cause of the traffic event. Contains a value in the tec002:CauseCode table, as defined in the TPEG2-TEC standard.
    types:
    - uid: integer
  - name: subCauseCode
    isReadyOnly: true
    description: The subcause of the traffic event. Contains a value in the sub cause table defined by the mainCauseCode, as defined in the TPEG2-TEC standard.
    types:
    - uid: integer
- name: Point
  description: A location of the maneuver defined as a latitude longitude pair. .
  kind: object
  properties:
  - name: latitude
    isReadyOnly: true
    description: Latitude.
    types:
    - uid: number
  - name: longitude
    isReadyOnly: true
    description: Longitude.
    types:
    - uid: number
- name: instructionType
  description: Type of the instruction, e.g., turn or change of road form.
  kind: enum
  properties:
  - name: TURN
    types:
    - uid: string
  - name: ROAD_CHANGE
    types:
    - uid: string
  - name: LOCATION_DEPARTURE
    types:
    - uid: string
  - name: LOCATION_ARRIVAL
    types:
    - uid: string
  - name: DIRECTION_INFO
    types:
    - uid: string
  - name: LOCATION_WAYPOINT
    types:
    - uid: string
- name: drivingSide
  description: Indicates left-hand vs. right-hand side driving at the point of the maneuver.
  kind: enum
  properties:
  - name: LEFT
    types:
    - uid: string
  - name: RIGHT
    types:
    - uid: string
- name: maneuver
  description: A code identifying the maneuver.
  kind: enum
  properties:
  - name: ARRIVE
    description: You have arrived.
    types:
    - uid: string
  - name: ARRIVE_LEFT
    description: You have arrived. Your destination is on the left.
    types:
    - uid: string
  - name: ARRIVE_RIGHT
    description: You have arrived. Your destination is on the right.
    types:
    - uid: string
  - name: DEPART
    description: Leave.
    types:
    - uid: string
  - name: STRAIGHT
    description: Keep straight on.
    types:
    - uid: string
  - name: KEEP_RIGHT
    description: Keep right.
    types:
    - uid: string
  - name: BEAR_RIGHT
    description: Bear right.
    types:
    - uid: string
  - name: TURN_RIGHT
    description: Turn right.
    types:
    - uid: string
  - name: SHARP_RIGHT
    description: Turn sharp right.
    types:
    - uid: string
  - name: KEEP_LEFT
    description: Keep left.
    types:
    - uid: string
  - name: BEAR_LEFT
    description: Bear left.
    types:
    - uid: string
  - name: TURN_LEFT
    description: Turn left.
    types:
    - uid: string
  - name: SHARP_LEFT
    description: Turn sharp left.
    types:
    - uid: string
  - name: MAKE_UTURN
    description: Make a U-turn.
    types:
    - uid: string
  - name: ENTER_MOTORWAY
    description: Take the motorway.
    types:
    - uid: string
  - name: ENTER_FREEWAY
    description: Take the freeway.
    types:
    - uid: string
  - name: ENTER_HIGHWAY
    description: Take the highway.
    types:
    - uid: string
  - name: TAKE_EXIT
    description: Take the exit.
    types:
    - uid: string
  - name: MOTORWAY_EXIT_LEFT
    description: Take the left exit.
    types:
    - uid: string
  - name: MOTORWAY_EXIT_RIGHT
    description: Take the right exit.
    types:
    - uid: string
  - name: TAKE_FERRY
    description: Take the ferry.
    types:
    - uid: string
  - name: ROUNDABOUT_CROSS
    description: Cross the roundabout.
    types:
    - uid: string
  - name: ROUNDABOUT_RIGHT
    description: At the roundabout take the exit on the right.
    types:
    - uid: string
  - name: ROUNDABOUT_LEFT
    description: At the roundabout take the exit on the left.
    types:
    - uid: string
  - name: ROUNDABOUT_BACK
    description: Go around the roundabout.
    types:
    - uid: string
  - name: TRY_MAKE_UTURN
    description: Try to make a U-turn.
    types:
    - uid: string
  - name: FOLLOW
    description: Follow.
    types:
    - uid: string
  - name: SWITCH_PARALLEL_ROAD
    description: Switch to the parallel road.
    types:
    - uid: string
  - name: SWITCH_MAIN_ROAD
    description: Switch to the main road.
    types:
    - uid: string
  - name: ENTRANCE_RAMP
    description: Take the ramp.
    types:
    - uid: string
  - name: WAYPOINT_LEFT
    description: You have reached the waypoint. It is on the left.
    types:
    - uid: string
  - name: WAYPOINT_RIGHT
    description: You have reached the waypoint. It is on the right.
    types:
    - uid: string
  - name: WAYPOINT_REACHED
    description: You have reached the waypoint.
    types:
    - uid: string
examples:
- name: GetRouteDirections
  request:
    uri: GET https://atlas.microsoft.com/route/directions/json?api-version=1.0&query=52.50931,13.42936:52.50274,13.43872
  responses:
  - statusCode: "200"
    body: >-
      {
        "formatVersion": "0.0.12",
        "copyright": "Copyright 2017 TomTom International BV. All rights reserved. This navigation data is the proprietary copyright of TomTom International BV and may be used only in accordance with the terms of a fully executed license agreement entered into between TomTom International BV, or an authorised reseller and yourself. If you have not entered into such a license agreement you are not authorised to use this data in any manner and should immediately return it to TomTom International BV.",
        "privacy": "TomTom keeps information that tells us how and when you use our services. This includes information about the device you are using and the information we receive while you use the service, such as locations, routes, destinations and search queries. TomTom is unable to identify you based on the information it collects, and will not try to. TomTom uses the information for technical diagnostics, to detect fraud and abuse, to create usage reports, and to improve its services. The information is kept only for these purposes and for a limited period of time, after which it is destroyed. TomTom applies security methods based on industry standards to protect the information against unauthorised access. TomTom will not give anyone else access to the information or use it for any other purpose, unless explicitly and lawfully ordered to do so following due legal process. You can find out more at http://tomtom.com/privacy. You can contact TomTom by going to http://tomtom.com/support.",
        "routes": [
          {
            "summary": {
              "lengthInMeters": 1147,
              "travelTimeInSeconds": 162,
              "trafficDelayInSeconds": 0,
              "departureTime": "2017-09-07T16:56:58+00:00",
              "arrivalTime": "2017-09-07T16:59:40+00:00"
            },
            "legs": [
              {
                "summary": {
                  "lengthInMeters": 1147,
                  "travelTimeInSeconds": 162,
                  "trafficDelayInSeconds": 0,
                  "departureTime": "2017-09-07T16:56:58+00:00",
                  "arrivalTime": "2017-09-07T16:59:40+00:00"
                },
                "points": [
                  {
                    "latitude": 52.50931,
                    "longitude": 13.42937
                  },
                  {
                    "latitude": 52.50904,
                    "longitude": 13.42912
                  },
                  {
                    "latitude": 52.50894,
                    "longitude": 13.42904
                  },
                  {
                    "latitude": 52.50867,
                    "longitude": 13.42879
                  },
                  {
                    "latitude": 52.5084,
                    "longitude": 13.42857
                  },
                  {
                    "latitude": 52.50791,
                    "longitude": 13.42824
                  },
                  {
                    "latitude": 52.50757,
                    "longitude": 13.42772
                  },
                  {
                    "latitude": 52.50735,
                    "longitude": 13.42823
                  },
                  {
                    "latitude": 52.5073,
                    "longitude": 13.42836
                  },
                  {
                    "latitude": 52.50573,
                    "longitude": 13.43194
                  },
                  {
                    "latitude": 52.50512,
                    "longitude": 13.43336
                  },
                  {
                    "latitude": 52.50464,
                    "longitude": 13.43451
                  },
                  {
                    "latitude": 52.5045,
                    "longitude": 13.43481
                  },
                  {
                    "latitude": 52.50443,
                    "longitude": 13.43498
                  },
                  {
                    "latitude": 52.50343,
                    "longitude": 13.43737
                  },
                  {
                    "latitude": 52.50274,
                    "longitude": 13.43872
                  }
                ]
              }
            ],
            "sections": [
              {
                "startPointIndex": 0,
                "endPointIndex": 15,
                "sectionType": "TRAVEL_MODE",
                "travelMode": "car"
              }
            ]
          }
        ]
      }
  - statusCode: "400"
    body: >-
      {
        "error": {
          "code": "400 BadRequest",
          "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
        }
      }
  - statusCode: "401"
    body: >-
      {
        "error": {
          "code": "401 Unauthorized",
          "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
        }
      }
  - statusCode: "403"
    body: >-
      {
        "error": {
          "code": "403 Forbidden",
          "message": "Permission, capacity, or authentication issues."
        }
      }
  - statusCode: "404"
    body: >-
      {
        "error": {
          "code": "404 NotFound",
          "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
        }
      }
  - statusCode: "500"
    body: >-
      {
        "error": {
          "code": "500 InternalServerError",
          "message": "An error occurred while processing the request. Please try again later."
        }
      }
security:
- name: Ocp-Apim-Subscription-Key
  type: apiKey
  in: header
- name: subscription-key
  type: apiKey
  in: query
