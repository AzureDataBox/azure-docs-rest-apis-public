{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Azure Location Based Services",
    "description": "Azure LBS REST APIs"
  },
  "host": "atlas.microsoft.com",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "parameters": {
    "SubscriptionKey": {
      "name": "subscription-key",
      "description": "Azure LBS subscription key",
      "type": "string",
      "in": "query",
      "required": true,
      "x-ms-parameter-location": "client"
    },
    "ApiVersion": {
      "name": "api-version",
      "description": "Version number of Azure LBS API.  Current version is 1.0",
      "type": "string",
      "in": "query",
      "required": true,
      "default": "1.0",
      "x-ms-parameter-location": "client"
    },
    "AcceptLanguage": {
      "name": "Accept-Language",
      "in": "header",
      "description": "Specifies the list of acceptable ISO 639-1 language codes in which the timezone names should be returned.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "TimezoneOptions": {
      "name": "options",
      "in": "query",
      "description": "Alternatively, use alias \"o\". Options available for types of information returned in the result.",
      "required": false,
      "type": "string",
      "enum": [
        "none",
        "zoneInfo",
        "transitions",
        "all"
      ],
      "x-ms-enum": {
        "name": "options",
        "modelAsString": false,
        "values": [
          {
            "value": "none",
            "description": "Do not include zoneinfo or transitions in the result."
          },
          {
            "value": "zoneInfo",
            "description": "Include additional time zone info in the result."
          },
          {
            "value": "transitions",
            "description": "Include transition information in the result (The number of transitions is currently capped at 250)."
          },
          {
            "value": "all",
            "description": "Include both zoneinfo and transitions in the result."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "TimezoneTimeStamp": {
      "name": "timeStamp",
      "in": "query",
      "description": "Alternatively, use alias \"stamp\", or \"s\". Reference time, if omitted, the API will use the machine time serving the request.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "format": "date-time"
    },
    "TimezoneTransitionsFrom": {
      "name": "transitionsFrom",
      "in": "query",
      "description": "Alternatively, use alias \"tf\". The start date from which daylight savings time (DST) transitions are requested, only applies when \"options\" = all or \"options\" = transitions.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "format": "date-time"
    },
    "TimezoneTransitionsYears": {
      "name": "transitionsYears",
      "in": "query",
      "description": "Alternatively, use alias \"ty\". The number of years from \"transitionsFrom\" for which DST transitions are requested, only applies when \"options\" = all or \"options\" = transitions.",
      "required": false,
      "type": "integer",
      "x-ms-parameter-location": "method"
    },
    "TextFormat": {
      "name": "format",
      "description": "Desired format of the response. Possible values are json & xml.",
      "type": "string",
      "in": "path",
      "required": true,
      "enum": [
        "json",
        "xml"
      ],
      "x-ms-parameter-location": "method"
    },
    "RasterTileFormat": {
      "name": "format",
      "description": "Desired format of the response. Possible value: png.",
      "type": "string",
      "in": "path",
      "required": true,
      "enum": [
        "png"
      ],
      "x-ms-enum": {
        "name": "format",
        "modelAsString": false,
        "values": [
          {
            "value": "png",
            "description": "An image in the png format. Supports zoom levels 0 through 18."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "TileFormat": {
      "name": "format",
      "description": "Desired format of the response. Possible values are png & pbf.",
      "type": "string",
      "in": "path",
      "required": true,
      "enum": [
        "png",
        "pbf"
      ],
      "x-ms-enum": {
        "name": "format",
        "modelAsString": false,
        "values": [
          {
            "value": "png",
            "description": "An image in the png format. Supports zoom levels 0 through 18."
          },
          {
            "value": "pbf",
            "description": "Vector graphic in the pbf format. Supports zoom levels 0 through 20."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "xTileIndex": {
      "name": "x",
      "x-ms-client-name": "xTileIndex",
      "in": "query",
      "description": "X index for the desired tile, based on Spherical Mercator projection coordinate system (EPSG:3857) ",
      "required": true,
      "type": "integer",
      "x-ms-parameter-location": "method"
    },
    "yTileIndex": {
      "name": "y",
      "x-ms-client-name": "yTileIndex",
      "in": "query",
      "description": "Y index for the desired tile, based on Spherical Mercator projection coordinate system (EPSG:3857)",
      "required": true,
      "type": "integer",
      "x-ms-parameter-location": "method"
    },
    "Zoom": {
      "name": "zoom",
      "in": "query",
      "description": "Zoom level for desired tile.",
      "required": true,
      "type": "integer",
      "x-ms-parameter-location": "method"
    },
    "Text": {
      "name": "text",
      "in": "query",
      "description": "Yes/no value to exclude textual data from response. Only images and country names will be in response.",
      "required": false,
      "type": "string",
      "enum": [
        "yes",
        "no"
      ],
      "default": "yes",
      "x-ms-parameter-location": "method"
    },
    "Language": {
      "name": "language",
      "in": "query",
      "description": "Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "OptionalBiasLat": {
      "name": "lat",
      "in": "query",
      "description": "Latitude where results should be biased.  E.g. 37.337",
      "required": false,
      "type": "number",
      "x-ms-parameter-location": "method"
    },
    "OptionalBiasLon": {
      "name": "lon",
      "in": "query",
      "description": "Longitude where results should be biased.  E.g. -121.89",
      "required": false,
      "type": "number",
      "x-ms-parameter-location": "method"
    },
    "RequiredBiasLat": {
      "name": "lat",
      "in": "query",
      "description": "Latitude where results should be biased.  E.g. 37.337",
      "required": true,
      "type": "number",
      "x-ms-parameter-location": "method"
    },
    "RequiredBiasLon": {
      "name": "lon",
      "in": "query",
      "description": "Longitude where results should be biased.  E.g. -121.89",
      "required": true,
      "type": "number",
      "x-ms-parameter-location": "method"
    },
    "Typeahead": {
      "name": "typeahead",
      "in": "query",
      "description": "Boolean.  If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode",
      "required": false,
      "type": "boolean",
      "default": false,
      "x-ms-parameter-location": "method"
    },
    "Limit": {
      "name": "limit",
      "in": "query",
      "description": "Maximum number of responses that will be returned.",
      "required": false,
      "type": "integer",
      "default": 10,
      "minimum": 1,
      "maximum": 100,
      "x-ms-parameter-location": "method"
    },
    "CountrySet": {
      "name": "countrySet",
      "in": "query",
      "description": "Comma separated string of country codes, e.g. FR, ES. This will limit the search to the specified countries",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method"
    },
    "Radius": {
      "name": "radius",
      "in": "query",
      "description": "The radius in meters to for the results to be constrained to the defined area",
      "required": false,
      "type": "number",
      "x-ms-parameter-location": "method"
    },
    "Query": {
      "name": "query",
      "in": "query",
      "description": "The applicable query string and/or coordinates",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "SearchResultIndexSet": {
      "name": "idxSet",
      "in": "query",
      "description": "A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are: Addr = Address range interpolation, Geo = Geographies, PAD = Point Addresses, POI = Points of interest, Str = Streets, Xstr = Cross Streets (intersections)",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "Addr",
          "Geo",
          "PAD",
          "POI",
          "Str",
          "Xstr"
        ],
        "x-ms-enum": {
          "name": "idxSet",
          "modelAsString": false,
          "values": [
            {
              "value": "Addr",
              "description": "Address range interpolation"
            },
            {
              "value": "Geo",
              "description": "Geographies"
            },
            {
              "value": "PAD",
              "description": "Point Addresses"
            },
            {
              "value": "POI",
              "description": "Points of interest"
            },
            {
              "value": "Str",
              "description": "Streets"
            },
            {
              "value": "Xstr",
              "description": "Cross Streets (Intersections)"
            }
          ]
        }
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method"
    },
    "BoundingBoxTopLeft": {
      "x-client-name": "BoundingBoxTopLeft",
      "name": "topLeft",
      "in": "query",
      "description": "Top left position of the bounding box.  E.g. 37.553,-122.453",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "BoundingBoxBottomRight": {
      "x-client-name": "BoundingBoxBottomRight",
      "name": "btmRight",
      "in": "query",
      "description": "Bottom right position of the bounding box. E.g. 37.553,-122.453",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  },
  "responses": {
    "400": {
      "description": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "401": {
      "description": "Unauthorized: Access is denied due to invalid credentials.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "403": {
      "description": "Permission, capacity, or authentication issues.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "404": {
      "description": "Not Found: the requested resource could not be found, but it may be available again in the future.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "500": {
      "description": "An error occurred while processing the request. Please try again later.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "paths": {
    "/route/directions/{format}": {
      "get": {
        "description": "Returns routing directions between 2 coordinates",
        "operationId": "Route_GetRouteDirections",
        "x-ms-examples": {
          "GetRouteDirections": {
            "parameters": {
              "format": "json",
              "api-version": "1.0",
              "query": "52.50931,13.42936:52.50274,13.43872",
              "subscription-key": "{subscription-key}"
            },
            "responses": {
              "200": {
                "body": {
                  "formatVersion": "0.0.12",
                  "copyright": "Copyright 2017 TomTom International BV. All rights reserved. This navigation data is the proprietary copyright of TomTom International BV and may be used only in accordance with the terms of a fully executed license agreement entered into between TomTom International BV, or an authorised reseller and yourself. If you have not entered into such a license agreement you are not authorised to use this data in any manner and should immediately return it to TomTom International BV.",
                  "privacy": "TomTom keeps information that tells us how and when you use our services. This includes information about the device you are using and the information we receive while you use the service, such as locations, routes, destinations and search queries. TomTom is unable to identify you based on the information it collects, and will not try to. TomTom uses the information for technical diagnostics, to detect fraud and abuse, to create usage reports, and to improve its services. The information is kept only for these purposes and for a limited period of time, after which it is destroyed. TomTom applies security methods based on industry standards to protect the information against unauthorised access. TomTom will not give anyone else access to the information or use it for any other purpose, unless explicitly and lawfully ordered to do so following due legal process. You can find out more at http://tomtom.com/privacy. You can contact TomTom by going to http://tomtom.com/support.",
                  "routes": [
                    {
                      "summary": {
                        "lengthInMeters": 1147,
                        "travelTimeInSeconds": 162,
                        "trafficDelayInSeconds": 0,
                        "departureTime": "2017-09-07T16:56:58+00:00",
                        "arrivalTime": "2017-09-07T16:59:40+00:00"
                      },
                      "legs": [
                        {
                          "summary": {
                            "lengthInMeters": 1147,
                            "travelTimeInSeconds": 162,
                            "trafficDelayInSeconds": 0,
                            "departureTime": "2017-09-07T16:56:58+00:00",
                            "arrivalTime": "2017-09-07T16:59:40+00:00"
                          },
                          "points": [
                            {
                              "latitude": 52.50931,
                              "longitude": 13.42937
                            },
                            {
                              "latitude": 52.50904,
                              "longitude": 13.42912
                            },
                            {
                              "latitude": 52.50894,
                              "longitude": 13.42904
                            },
                            {
                              "latitude": 52.50867,
                              "longitude": 13.42879
                            },
                            {
                              "latitude": 52.5084,
                              "longitude": 13.42857
                            },
                            {
                              "latitude": 52.50791,
                              "longitude": 13.42824
                            },
                            {
                              "latitude": 52.50757,
                              "longitude": 13.42772
                            },
                            {
                              "latitude": 52.50735,
                              "longitude": 13.42823
                            },
                            {
                              "latitude": 52.5073,
                              "longitude": 13.42836
                            },
                            {
                              "latitude": 52.50573,
                              "longitude": 13.43194
                            },
                            {
                              "latitude": 52.50512,
                              "longitude": 13.43336
                            },
                            {
                              "latitude": 52.50464,
                              "longitude": 13.43451
                            },
                            {
                              "latitude": 52.5045,
                              "longitude": 13.43481
                            },
                            {
                              "latitude": 52.50443,
                              "longitude": 13.43498
                            },
                            {
                              "latitude": 52.50343,
                              "longitude": 13.43737
                            },
                            {
                              "latitude": 52.50274,
                              "longitude": 13.43872
                            }
                          ]
                        }
                      ],
                      "sections": [
                        {
                          "startPointIndex": 0,
                          "endPointIndex": 15,
                          "sectionType": "TRAVEL_MODE",
                          "travelMode": "car"
                        }
                      ]
                    }
                  ]
                }
              },
              "400": {
                "headers": {},
                "body": {
                  "statuscode": "400",
                  "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
                }
              },
              "401": {
                "headers": {},
                "body": {
                  "statuscode": "401",
                  "message": "Unauthorized: Access is denied due to invalid credentials."
                }
              },
              "403": {
                "headers": {},
                "body": {
                  "statuscode": "403",
                  "message": "Permission, capacity, or authentication issues."
                }
              },
              "404": {
                "headers": {},
                "body": {
                  "statuscode": "404",
                  "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
                }
              },
              "500": {
                "headers": {},
                "body": {
                  "statuscode": "500",
                  "message": "An error occurred while processing the request. Please try again later."
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionKey"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/TextFormat"
          },
          {
            "name": "query",
            "in": "query",
            "description": "The Coordinates through which the route is calculated. Needs two coordinates at least. Delimited by colon. First one is the origin and the last is the destination of the route. Optional coordinates in between act as WayPoints in the route.",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxAlternatives",
            "in": "query",
            "description": "Number of desired alternative routes to be calculated.",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "maximum": 5,
            "default": 0
          },
          {
            "name": "alternativeType",
            "in": "query",
            "description": "Controls the optimality, with respect to the given planning criteria.  Controls the optimality, with respect to the given planning criteria, of the calculated alternatives compared to the reference route.",
            "required": false,
            "type": "string",
            "default": "anyRoute",
            "enum": [
              "anyRoute",
              "betterRoute"
            ],
            "x-ms-enum": {
              "name": "alternativeType",
              "modelAsString": false,
              "values": [
                {
                  "value": "anyRoute",
                  "description": "Allow any alternative route to be returned irrespective of how it compares to the reference route in terms of optimality."
                },
                {
                  "value": "betterRoute",
                  "description": "Return an alternative route only if it is better than the reference route according to the given planning criteria."
                }
              ]
            }
          },
          {
            "name": "minDeviationDistance",
            "in": "query",
            "description": "All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of meters. Can only be used when reconstructing a route. The minDeviationDistance parameter cannot be used in conjunction with arriveAt",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "arriveAt",
            "in": "query",
            "description": "The date and time of arrival at the destination point. It must be specified as a dateTime. When a time zone offset is not specified it will be assumed to be that of the destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be used in conjunction with departAt, minDeviationDistance or minDeviationTime.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "name": "departAt",
            "in": "query",
            "description": "The date and time of departure from the origin point. Departure times apart from now must be specified as a dateTime. When a time zone offset is not specified, it will be assumed to be that of the origin point. The departAt value must be in the future in the date-time format (1996-12-19T16:39:57-08:00).",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "name": "minDeviationTime",
            "in": "query",
            "description": "All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of seconds. Can only be used when reconstructing a route. The minDeviationTime parameter cannot be used in conjunction with arriveAt",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "instructionsType",
            "in": "query",
            "description": "If specified, guidance instructions will be returned.  Note that the instructionsType parameter cannot be used in conjunction with routeRepresentation=none",
            "required": false,
            "type": "string",
            "enum": [
              "coded",
              "text",
              "tagged"
            ],
            "x-ms-enum": {
              "name": "instructionsType",
              "modelAsString": false,
              "values": [
                {
                  "value": "coded",
                  "description": "Returns raw instruction data without human-readable messages."
                },
                {
                  "value": "text",
                  "description": "Returns raw instructions data with human-readable messages in plain text."
                },
                {
                  "value": "tagged",
                  "description": "Returns raw instruction data with tagged human-readable messages to permit formatting."
                }
              ]
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language parameter determines the language of the guidance messages. It does not affect proper nouns (the names of streets, plazas, etc.) It has no effect when instructionsType=coded.  Allowed values are (a subset of) the IETF language tags described",
            "required": false,
            "type": "string"
          },
          {
            "name": "computeBestOrder",
            "in": "query",
            "description": "Re-order the route waypoints to reduce the route length. Yields best results when used in conjunction with routeType shortest. Possible values are true or false.  True computes a better order, if possible but is not allowed to be used in conjunction with maxAlternatives value greater than 0 or in conjunction with circle waypoints. The response will include the optimized waypoint indices and can be used with a maximum of 20 route waypoints.  False will use the locations in the given order and not allowed to be used in conjunction with routeRepresentation none",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "routeRepresentation",
            "in": "query",
            "description": "Specifies the representation of the set of routes provided as response. This parameter value can only be used in conjunction with computeBestOrder=true.",
            "required": false,
            "type": "string",
            "default": "polyline",
            "enum": [
              "polyline",
              "none"
            ],
            "x-ms-enum": {
              "name": "routeRepresentation",
              "modelAsString": false,
              "values": [
                {
                  "value": "polyline",
                  "description": "Includes route geometry in the response."
                },
                {
                  "value": "none",
                  "description": "Includes only the optimized waypoint indices but does not include the route geometry in the response."
                }
              ]
            }
          },
          {
            "name": "computeTravelTimeFor",
            "in": "query",
            "description": "Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time. Possible values are none which , or all which ",
            "required": false,
            "type": "string",
            "default": "none",
            "enum": [
              "none",
              "all"
            ],
            "x-ms-enum": {
              "name": "computeTravelTimeFor",
              "modelAsString": false,
              "values": [
                {
                  "value": "none",
                  "description": "Does not compute additional travel times."
                },
                {
                  "value": "all",
                  "description": "Computes travel times for all types of traffic information and specifies all results in the fields noTrafficTravelTimeInSeconds, historicTrafficTravelTimeInSeconds and liveTrafficIncidentsTravelTimeInSeconds being included in the summaries in the route response."
                }
              ]
            }
          },
          {
            "name": "vehicleHeading",
            "in": "query",
            "description": "The directional heading of the vehicle in degrees starting at true North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Possible values 0-359",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "maximum": 359
          },
          {
            "name": "report",
            "in": "query",
            "description": "Specifies which data should be reported for diagnosis purposes",
            "required": false,
            "type": "string"
          },
          {
            "name": "sectionType",
            "in": "query",
            "description": "Specifies which of the section types are reported in the route response. For example if sectionType = pedestrian the sections which are suited for pedestrians only are returned. Multiple types can be used. The default sectionType refers to the travelMode input. By default travelMode is set to car",
            "required": false,
            "type": "string",
            "default": "travelMode",
            "enum": [
              "carTrain",
              "country",
              "ferry",
              "motorway",
              "pedestrian",
              "tollRoad",
              "tollVignette",
              "traffic",
              "travelMode",
              "tunnel"
            ],
            "x-ms-enum": {
              "name": "sectionType",
              "modelAsString": false
            }
          },
          {
            "name": "vehicleAxleWeight",
            "in": "query",
            "description": "Weight per axle of the vehicle in kg. A value of 0 means that weight restrictions per axle are not considered.",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "vehicleLength",
            "in": "query",
            "description": "Width of the vehicle in meters. A value of 0 means that width restrictions are not considered.",
            "required": false,
            "type": "number",
            "format": "float",
            "default": 0
          },
          {
            "name": "vehicleHeight",
            "in": "query",
            "description": "Height of the vehicle in meters. A value of 0 means that height restrictions are not considered.",
            "required": false,
            "type": "number",
            "format": "float",
            "default": 0
          },
          {
            "name": "vehicleWidth",
            "in": "query",
            "description": "Length of the vehicle in meters. A value of 0 means that length restrictions are not considered.",
            "required": false,
            "type": "number",
            "format": "float",
            "default": 0
          },
          {
            "name": "vehicleMaxSpeed",
            "in": "query",
            "description": "Maximum speed of the vehicle in km/hour. A value of 0 means that an appropriate value for the vehicle will be determined and applied during route planning. A non-zero value may be overridden during route planning.",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "vehicleWeight",
            "in": "query",
            "description": "Weight of the vehicle in kilograms.",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "windingness",
            "in": "query",
            "description": "Level of turns for thrilling route. This parameter can only be used in conjunction with routeType=thrilling.",
            "required": false,
            "type": "string",
            "default": "normal",
            "enum": [
              "low",
              "normal",
              "high"
            ],
            "x-ms-enum": {
              "name": "windingness",
              "modelAsString": false
            }
          },
          {
            "name": "hilliness",
            "in": "query",
            "description": "Degree of hilliness for thrilling route. This parameter can only be used in conjunction with routeType=thrilling.",
            "required": false,
            "type": "string",
            "default": "normal",
            "enum": [
              "low",
              "normal",
              "high"
            ],
            "x-ms-enum": {
              "name": "hilliness",
              "modelAsString": false
            }
          },
          {
            "name": "travelMode",
            "in": "query",
            "description": "The mode of travel for the requested route. Note that the requested travelMode may not be available for the entire route. Where the requested travelMode is not available for a particular section, the travelMode element of the response for that section will be other. Note that travel modes bus, motorcycle, taxi and van are BETA functionality. Full restriction data is not available in all areas. In calculateReachableRange requests, the values bicycle and pedestrian must not be used",
            "required": false,
            "type": "string",
            "default": "car",
            "enum": [
              "car",
              "truck",
              "taxi",
              "bus",
              "van",
              "motorcycle",
              "bicycle",
              "pedestrian"
            ],
            "x-ms-enum": {
              "name": "travelMode",
              "modelAsString": false
            }
          },
          {
            "name": "avoid",
            "in": "query",
            "description": "Specifies something that the route calculation should try to avoid when determining the route. Can be specified multiple times. Possible values: (tollRoads avoids toll roads), (motorways avoids motorways), (ferries avoids ferries), (unpavedRoads avoids unpaved roads), (carpools avoids routes that require use of carpool (HOV/ High Occupancy Vehicle) lanes), (alreadyUsedRoads avoids using the same road multiple times. Most useful in conjunction with routeType=thrilling). In calculateReachableRange requests, the value alreadyUsedRoads must not be used.",
            "required": false,
            "type": "string",
            "enum": [
              "tollRoads",
              "motorways",
              "ferries",
              "unpavedRoads",
              "carpools",
              "alreadyUsedRoads"
            ],
            "x-ms-enum": {
              "name": "avoid",
              "modelAsString": false
            }
          },
          {
            "name": "traffic",
            "in": "query",
            "description": "Possible values: (true (do consider all available traffic information during routing)), (false (ignore current traffic data during routing). Note that although the current traffic data is ignored during routing, the effect of historic traffic on effective road speeds is still incorporated).",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "routeType",
            "in": "query",
            "description": "The type of route requested. Notes on specific values: (fastest returns the fastest route), (shortest returns the shortest route by distance), (eco routes balance economy and speed), (thrilling routes include interesting or challenging roads and use as few motorways as possible. You can choose the level of turns included and also the degree of hilliness. See the hilliness and windingness parameters for how to set this. There is a limit of 900 km on routes planned with routeType=thrilling)",
            "required": false,
            "type": "string",
            "default": "fastest",
            "enum": [
              "fastest",
              "shortest",
              "eco",
              "thrilling"
            ],
            "x-ms-enum": {
              "name": "routeType",
              "modelAsString": false
            }
          },
          {
            "name": "vehicleLoadType",
            "in": "query",
            "description": "Types of cargo that may be classified as hazardous materials and restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for use in other countries. Values beginning with USHazmat are for US routing while otherHazmat should be used for all other countries. vehicleLoadType can be specified multiple times. This parameter is currently only considered for travelMode=truck.",
            "required": false,
            "type": "string",
            "enum": [
              "USHazmatClass1",
              "USHazmatClass2",
              "USHazmatClass3",
              "USHazmatClass4",
              "USHazmatClass5",
              "USHazmatClass6",
              "USHazmatClass7",
              "USHazmatClass8",
              "USHazmatClass9",
              "otherHazmatExplosive",
              "otherHazmatGeneral",
              "otherHazmatHarmfulToWater"
            ],
            "x-ms-enum": {
              "name": "vehicleLoadType",
              "modelAsString": false,
              "values": [
                {
                  "value": "USHazmatClass1",
                  "description": "Explosives"
                },
                {
                  "value": "USHazmatClass2",
                  "description": "Compressed gas"
                },
                {
                  "value": "USHazmatClass3",
                  "description": "Flammable liquids"
                },
                {
                  "value": "USHazmatClass4",
                  "description": "Flammable solids"
                },
                {
                  "value": "USHazmatClass5",
                  "description": "Oxidizers"
                },
                {
                  "value": "USHazmatClass6",
                  "description": "Poisons"
                },
                {
                  "value": "USHazmatClass7",
                  "description": "Radioactive"
                },
                {
                  "value": "USHazmatClass8",
                  "description": "Corrosives"
                },
                {
                  "value": "USHazmatClass9",
                  "description": "Miscellaneous"
                },
                {
                  "value": "otherHazmatExplosive",
                  "description": "Explosives"
                },
                {
                  "value": "otherHazmatGeneral",
                  "description": "Miscellaneous"
                },
                {
                  "value": "otherHazmatHarmfulToWater",
                  "description": "Harmful to water"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RouteDirectionsResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "produces": [
          "application/json",
          "application/xml"
        ],
        "consumes": [],
        "x-internal-toc-name": "Get Route Directions"
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "description": "This object is returned when an error occurs in the Location Based Service API",
      "properties": {
        "statuscode": {
          "type": "string",
          "readOnly": true,
          "description": "Error code."
        },
        "message": {
          "type": "string",
          "readOnly": true,
          "description": "If available, a human readable description of the error."
        }
      }
    },
    "Poi": {
      "description": "POI property",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name property",
          "type": "string",
          "readOnly": true
        },
        "phone": {
          "description": "Phone property",
          "type": "string",
          "readOnly": true
        },
        "url": {
          "description": "URL property",
          "type": "string",
          "readOnly": true
        },
        "categories": {
          "description": "Categories array",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string",
            "readOnly": true
          }
        },
        "classifications": {
          "description": "Classification array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Classification"
          }
        }
      }
    },
    "Classification": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Code property",
          "type": "string",
          "readOnly": true
        },
        "names": {
          "description": "Names array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ClassificationName"
          }
        }
      }
    },
    "ClassificationName": {
      "type": "object",
      "properties": {
        "nameLocale": {
          "description": "Name Locale property",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name property",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Address": {
      "description": "The address of the result",
      "type": "object",
      "properties": {
        "buildingNumber": {
          "description": "Building Number property",
          "type": "string",
          "readOnly": true
        },
        "street": {
          "description": "Street property",
          "type": "string",
          "readOnly": true
        },
        "crossStreet": {
          "description": "Cross Street property",
          "type": "string",
          "readOnly": true
        },
        "streetNumber": {
          "description": "Street Number property",
          "type": "string",
          "readOnly": true
        },
        "routeNumbers": {
          "description": "number of routes",
          "type": "array",
          "items": {
            "type": "integer",
            "readOnly": true
          },
          "readOnly": true
        },
        "streetName": {
          "description": "Street Name property",
          "type": "string",
          "readOnly": true
        },
        "streetNameAndNumber": {
          "description": "Street Name and Number property",
          "type": "string",
          "readOnly": true
        },
        "municipality": {
          "description": "Municipality property",
          "type": "string",
          "readOnly": true
        },
        "municipalitySubdivision": {
          "description": "Municipality Subdivision property",
          "type": "string",
          "readOnly": true
        },
        "countryTertiarySubdivision": {
          "description": "Country Tertiary Subdivision property",
          "type": "string",
          "readOnly": true
        },
        "countrySecondarySubdivision": {
          "description": "Country Secondary Subdivision property",
          "type": "string",
          "readOnly": true
        },
        "countrySubdivision": {
          "description": "Country Subdivision property",
          "type": "string",
          "readOnly": true
        },
        "postalCode": {
          "description": "Postal Code property",
          "type": "string",
          "readOnly": true
        },
        "extendedPostalCode": {
          "description": "Extended Postal Code property",
          "type": "string",
          "readOnly": true
        },
        "countryCode": {
          "description": "Country Code property",
          "type": "string",
          "readOnly": true
        },
        "country": {
          "description": "Country property",
          "type": "string",
          "readOnly": true
        },
        "countryCodeISO3": {
          "description": "Country Code ISO3 property",
          "type": "string",
          "readOnly": true
        },
        "freeformAddress": {
          "description": "Free form Address property",
          "type": "string",
          "readOnly": true
        },
        "countrySubdivisionName": {
          "description": "Country Subdividion Name property",
          "type": "string",
          "readOnly": true
        },
        "boundingBox": {
          "description": "Bounding Box for the address",
          "type": "object",
          "properties": {
            "northEast": {
              "type": "string",
              "readOnly": true,
              "description": "The North East coordinates for the Bounding Box"
            },
            "southWest": {
              "type": "string",
              "readOnly": true,
              "description": "The South West coordinates for the Bounding Box"
            }
          }
        }
      }
    },
    "Position": {
      "description": "Coordinates of the result",
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "readOnly": true,
          "description": "Latitude property"
        },
        "lon": {
          "type": "number",
          "readOnly": true,
          "description": "Longitude property"
        }
      }
    },
    "Viewport": {
      "description": "The viewport that covers the result",
      "type": "object",
      "properties": {
        "topLeftPoint": {
          "description": "Top left of the viewport",
          "type": "object",
          "properties": {
            "lat": {
              "type": "number",
              "readOnly": true,
              "description": "Latitude"
            },
            "lon": {
              "type": "number",
              "readOnly": true,
              "description": "Longitude"
            }
          }
        },
        "btmRightPoint": {
          "description": "Bottom right of the viewport",
          "type": "object",
          "properties": {
            "lat": {
              "type": "number",
              "readOnly": true,
              "description": "Latitude"
            },
            "lon": {
              "type": "number",
              "readOnly": true,
              "description": "Longitude"
            }
          }
        }
      }
    },
    "EntryPoints": {
      "description": "Entry Points array",
      "type": "array",
      "items": {
        "$ref": "#/definitions/EntityPoint"
      }
    },
    "EntityPoint": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Name Locale property",
          "type": "string",
          "readOnly": true
        },
        "position": {
          "description": "Name property",
          "type": "object",
          "readOnly": true,
          "properties": {
            "lat": {
              "description": "Latitude property",
              "type": "number",
              "readOnly": true
            },
            "lon": {
              "description": "Longitude property",
              "type": "number",
              "readOnly": true
            }
          }
        }
      }
    },
    "Route": {
      "description": "Route object",
      "type": "object",
      "properties": {
        "routeGeometry": {
          "description": "Route geometry point(lat,lon) array",
          "type": "array",
          "items": {
            "type": "string",
            "readOnly": true
          }
        },
        "routeInstructions": {
          "description": "RouteInstructions property",
          "type": "object",
          "readOnly": true,
          "properties": {
            "list": {
              "description": "List of instructions",
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/definitions/Instruction"
              }
            },
            "language": {
              "description": "Language property",
              "type": "string",
              "readOnly": true
            }
          }
        },
        "routeSummary": {
          "description": "RouteSummary property",
          "type": "object",
          "readOnly": true,
          "properties": {
            "boundingBox": {
              "description": "BoundingBox property",
              "type": "object",
              "readOnly": true,
              "properties": {
                "topLeftPoint": {
                  "description": "TopLeftPoint property. Format : lat,lon",
                  "type": "string",
                  "readOnly": true
                },
                "btmRightPoint": {
                  "description": "BottomRightPoint property. Format : lat,lon",
                  "type": "string",
                  "readOnly": true
                }
              }
            },
            "totalDistance": {
              "description": "TotalDistance property",
              "type": "object",
              "readOnly": true,
              "properties": {
                "value": {
                  "description": "Distance value property",
                  "type": "number",
                  "readOnly": true
                },
                "uom": {
                  "description": "Unit of Measurement property",
                  "type": "string",
                  "readOnly": true
                }
              }
            },
            "totalTime": {
              "description": "TotalTime property",
              "type": "string",
              "readOnly": true
            },
            "totalTravelTime": {
              "description": "TotalTravelTime property",
              "type": "string",
              "readOnly": true
            },
            "totalWaitTime": {
              "description": "TotalWaitTime property",
              "type": "string",
              "readOnly": true
            }
          }
        }
      }
    },
    "Instruction": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "Instruction": {
          "description": "Instruction property",
          "type": "string",
          "readOnly": true
        },
        "Point": {
          "description": "Point property. Format: Lat,Lon",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "description": "Description  property",
          "type": "string",
          "readOnly": true
        },
        "distance": {
          "description": "Distance property",
          "type": "object",
          "readOnly": true,
          "properties": {
            "value": {
              "description": "Value  property",
              "type": "number",
              "readOnly": true
            },
            "uom": {
              "description": "Unit of Measure  property",
              "type": "string",
              "readOnly": true
            }
          }
        },
        "duration": {
          "description": "Duration property",
          "type": "string",
          "readOnly": true
        },
        "waitTime": {
          "description": "WaitTime property",
          "type": "string",
          "readOnly": true
        },
        "turnAngle": {
          "description": "TurnAngle property",
          "type": "number",
          "readOnly": true
        },
        "turn": {
          "description": "Turn property",
          "type": "string",
          "readOnly": true
        },
        "tour": {
          "description": "Tour property",
          "type": "integer",
          "readOnly": true
        },
        "sideOfStreet": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CopyrightBoundingResult": {
      "description": "This object is returned from a successful Copyright Bounding call",
      "type": "object",
      "properties": {
        "formatVersion": {
          "description": "Format Version property",
          "type": "string",
          "readOnly": true
        },
        "generalCopyrights": {
          "description": "General Copyrights array",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string",
            "readOnly": true
          }
        },
        "regions": {
          "description": "Regions array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Region"
          }
        }
      }
    },
    "Region": {
      "type": "object",
      "properties": {
        "copyrights": {
          "description": "Copyrights array",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string",
            "readOnly": true
          }
        },
        "country": {
          "description": "Country property",
          "type": "object",
          "readOnly": true,
          "properties": {
            "ISO3": {
              "description": "ISO3 property",
              "type": "string",
              "readOnly": true
            },
            "label": {
              "description": "Label property",
              "type": "string",
              "readOnly": true
            }
          }
        }
      }
    },
    "CopyrightCaptionResult": {
      "description": "This object is returned from a successful Copyright Caption call",
      "type": "object",
      "properties": {
        "formatVersion": {
          "description": "Format Version property",
          "type": "string",
          "readOnly": true
        },
        "copyrightsCaption": {
          "description": "Copyrights Caption property",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CopyrightWorldResult": {
      "description": "This object is returned from a successful Copyright World call",
      "type": "object",
      "properties": {
        "formatVersion": {
          "description": "Format Version property",
          "type": "string",
          "readOnly": true
        },
        "generalCopyrights": {
          "description": "General Copyrights array",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string",
            "readOnly": true
          }
        },
        "regions": {
          "description": "Regions array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Region"
          }
        }
      }
    },
    "CopyrightTileResult": {
      "description": "This object is returned from a successful Copyright Tile call",
      "type": "object",
      "properties": {
        "formatVersion": {
          "description": "Format Version property",
          "type": "string",
          "readOnly": true
        },
        "generalCopyrights": {
          "description": "General Copyrights array",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string",
            "readOnly": true
          }
        },
        "regions": {
          "description": "Regions array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Region"
          }
        }
      }
    },
    "MapStaticResult": {
      "description": "This image is returned from a successful Map Static call",
      "type": "string",
      "format": "binary",
      "readOnly": true
    },
    "MapTileResult": {
      "description": "This image is returned from a successful Map Tile call",
      "type": "string",
      "format": "binary",
      "readOnly": true
    },
    "SearchFuzzyResult": {
      "description": "This object is returned from a successful Search Fuzzy call",
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "query": {
              "description": "Query property",
              "type": "string",
              "readOnly": true
            },
            "queryType": {
              "description": "QueryType property",
              "type": "string",
              "readOnly": true
            },
            "queryTime": {
              "description": "QueryTime property",
              "type": "integer",
              "readOnly": true
            },
            "numResults": {
              "description": "NumResults property",
              "type": "integer",
              "readOnly": true
            },
            "offset": {
              "description": "Offset property",
              "type": "integer",
              "readOnly": true
            },
            "totalResults": {
              "description": "TotalResults property",
              "type": "integer",
              "readOnly": true
            },
            "fuzzyLevel": {
              "description": "FuzzyLevel property",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchFuzzyResultArray"
          }
        }
      }
    },
    "SearchFuzzyResultArray": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "description": "Score property",
          "type": "number",
          "readOnly": true
        },
        "info": {
          "description": "Info property",
          "type": "string",
          "readOnly": true
        },
        "entityType": {
          "description": "Entity Type property",
          "type": "string",
          "readOnly": true
        },
        "poi": {
          "$ref": "#/definitions/Poi"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "viewport": {
          "$ref": "#/definitions/Viewport"
        },
        "boundingBox": {
          "description": "Bounding box of the result",
          "type": "object",
          "properties": {
            "topLeftPoint": {
              "description": "Top left of the viewport",
              "type": "object",
              "properties": {
                "lat": {
                  "type": "number",
                  "readOnly": true,
                  "description": "Latitude"
                },
                "lon": {
                  "type": "number",
                  "readOnly": true,
                  "description": "Longitude"
                }
              }
            },
            "btmRightPoint": {
              "description": "Bottom right of the viewport",
              "type": "object",
              "properties": {
                "lat": {
                  "type": "number",
                  "readOnly": true,
                  "description": "Latitude"
                },
                "lon": {
                  "type": "number",
                  "readOnly": true,
                  "description": "Longitude"
                }
              }
            }
          }
        },
        "entryPoints": {
          "$ref": "#/definitions/EntryPoints"
        }
      }
    },
    "SearchPoiResult": {
      "description": "This object is returned from a successful Search POI call",
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "query": {
              "description": "Query property",
              "type": "string",
              "readOnly": true
            },
            "queryType": {
              "description": "QueryType property",
              "type": "string",
              "readOnly": true
            },
            "queryTime": {
              "description": "QueryTime property",
              "type": "integer",
              "readOnly": true
            },
            "numResults": {
              "description": "NumResults property",
              "type": "integer",
              "readOnly": true
            },
            "offset": {
              "description": "Offset property",
              "type": "integer",
              "readOnly": true
            },
            "totalResults": {
              "description": "TotalResults property",
              "type": "integer",
              "readOnly": true
            },
            "fuzzyLevel": {
              "description": "FuzzyLevel property",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "description": "Type property",
                "type": "string",
                "readOnly": true
              },
              "id": {
                "description": "Id property",
                "type": "string",
                "readOnly": true
              },
              "score": {
                "description": "Score property",
                "type": "number",
                "readOnly": true
              },
              "info": {
                "description": "Info property",
                "type": "string",
                "readOnly": true
              },
              "entityType": {
                "description": "Entity Type property",
                "type": "string",
                "readOnly": true
              },
              "poi": {
                "$ref": "#/definitions/Poi"
              },
              "address": {
                "$ref": "#/definitions/Address"
              },
              "position": {
                "$ref": "#/definitions/Position"
              },
              "viewport": {
                "$ref": "#/definitions/Viewport"
              },
              "entryPoints": {
                "$ref": "#/definitions/EntryPoints"
              }
            }
          }
        }
      }
    },
    "SearchRoutedResult": {
      "description": "This object is returned from a successful Routed Search call",
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "query": {
              "description": "Query property",
              "type": "string",
              "readOnly": true
            },
            "queryType": {
              "description": "QueryType property",
              "type": "string",
              "readOnly": true
            },
            "queryTime": {
              "description": "QueryTime property",
              "type": "integer",
              "readOnly": true
            },
            "numResults": {
              "description": "NumResults property",
              "type": "integer",
              "readOnly": true
            },
            "offset": {
              "description": "Offset property",
              "type": "integer",
              "readOnly": true
            },
            "totalResults": {
              "description": "TotalResults property",
              "type": "integer",
              "readOnly": true
            },
            "geoBias": {
              "description": "GeoBias property",
              "type": "object",
              "readOnly": true,
              "properties": {
                "lat": {
                  "description": "Latitude property",
                  "type": "number",
                  "readOnly": true
                },
                "lon": {
                  "description": "Longitude property",
                  "type": "number",
                  "readOnly": true
                }
              }
            },
            "fuzzyLevel": {
              "description": "FuzzyLevel property",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchRoutedResultArray"
          }
        }
      }
    },
    "SearchRoutedResultArray": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "description": "Score property",
          "type": "number",
          "readOnly": true
        },
        "dist": {
          "description": "Distance property",
          "type": "number",
          "readOnly": true
        },
        "info": {
          "description": "Info property",
          "type": "string",
          "readOnly": true
        },
        "poi": {
          "$ref": "#/definitions/Poi"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "viewport": {
          "$ref": "#/definitions/Viewport"
        },
        "entryPoints": {
          "$ref": "#/definitions/EntryPoints"
        },
        "route": {
          "$ref": "#/definitions/Route"
        }
      }
    },
    "SearchPoiCategoryResult": {
      "description": "This object is returned from a successful Search POI Category call",
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "query": {
              "description": "Query property",
              "type": "string",
              "readOnly": true
            },
            "queryType": {
              "description": "QueryType property",
              "type": "string",
              "readOnly": true
            },
            "queryTime": {
              "description": "QueryTime property",
              "type": "integer",
              "readOnly": true
            },
            "numResults": {
              "description": "NumResults property",
              "type": "integer",
              "readOnly": true
            },
            "offset": {
              "description": "Offset property",
              "type": "integer",
              "readOnly": true
            },
            "totalResults": {
              "description": "TotalResults property",
              "type": "integer",
              "readOnly": true
            },
            "fuzzyLevel": {
              "description": "FuzzyLevel property",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchPoiCategoryResultArray"
          }
        }
      }
    },
    "SearchPoiCategoryResultArray": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "description": "Score property",
          "type": "number",
          "readOnly": true
        },
        "info": {
          "description": "Info property",
          "type": "string",
          "readOnly": true
        },
        "entityType": {
          "description": "Entity Type property",
          "type": "string",
          "readOnly": true
        },
        "poi": {
          "$ref": "#/definitions/Poi"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "viewport": {
          "$ref": "#/definitions/Viewport"
        },
        "entryPoints": {
          "$ref": "#/definitions/EntryPoints"
        }
      }
    },
    "SearchAddressResult": {
      "description": "This object is returned from a successful Search Address call",
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "query": {
              "description": "Query property",
              "type": "string",
              "readOnly": true
            },
            "queryType": {
              "description": "QueryType property",
              "type": "string",
              "readOnly": true
            },
            "queryTime": {
              "description": "QueryTime property",
              "type": "integer",
              "readOnly": true
            },
            "numResults": {
              "description": "NumResults property",
              "type": "integer",
              "readOnly": true
            },
            "offset": {
              "description": "Offset property",
              "type": "integer",
              "readOnly": true
            },
            "totalResults": {
              "description": "TotalResults property",
              "type": "integer",
              "readOnly": true
            },
            "fuzzyLevel": {
              "description": "FuzzyLevel property",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchAddressResultArray"
          }
        }
      }
    },
    "SearchAddressResultArray": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "description": "Score property",
          "type": "number",
          "readOnly": true
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "viewport": {
          "$ref": "#/definitions/Viewport"
        },
        "entryPoints": {
          "$ref": "#/definitions/EntryPoints"
        }
      }
    },
    "SearchAddressReverseResult": {
      "description": "This object is returned from a successful Search Address Reverse call",
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "queryTime": {
              "description": "QueryTime property",
              "type": "integer",
              "readOnly": true
            },
            "numResults": {
              "description": "NumResults property",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "addresses": {
          "description": "Addresses array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AddressResult"
          }
        }
      }
    },
    "SearchAddressReverseCrossStreetResult": {
      "description": "This object is returned from a successful Search Address Reverse CrossStreet call",
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "queryTime": {
              "description": "QueryTime property",
              "type": "integer",
              "readOnly": true
            },
            "numResults": {
              "description": "NumResults property",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "addresses": {
          "description": "Addresses array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AddressResult"
          }
        }
      }
    },
    "AddressResult": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "position": {
          "type": "string",
          "readOnly": true,
          "description": "Position property"
        }
      }
    },
    "SearchAddressStructuredResult": {
      "description": "This object is returned from a successful Search Address Structured call",
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "query": {
              "description": "Query property",
              "type": "string",
              "readOnly": true
            },
            "queryType": {
              "description": "QueryType property",
              "type": "string",
              "readOnly": true
            },
            "queryTime": {
              "description": "QueryTime property",
              "type": "integer",
              "readOnly": true
            },
            "numResults": {
              "description": "NumResults property",
              "type": "integer",
              "readOnly": true
            },
            "limit": {
              "description": "Maximum number of responses that will be returned",
              "readOnly": true,
              "type": "integer"
            },
            "offset": {
              "description": "Offset property",
              "type": "integer",
              "readOnly": true
            },
            "totalResults": {
              "description": "TotalResults property",
              "type": "integer",
              "readOnly": true
            },
            "fuzzyLevel": {
              "description": "FuzzyLevel property",
              "type": "integer",
              "readOnly": true
            },
            "geoBias": {
              "description": "Geo Bias of the result",
              "type": "object",
              "properties": {
                "lat": {
                  "type": "number",
                  "readOnly": true,
                  "description": "Latitude property"
                },
                "lon": {
                  "type": "number",
                  "readOnly": true,
                  "description": "Longitude property"
                }
              }
            }
          }
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchAddressStructuredResultArray"
          }
        }
      }
    },
    "SearchAddressStructuredResultArray": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "description": "Score property",
          "type": "number",
          "readOnly": true
        },
        "dist": {
          "description": "Dist property",
          "type": "number",
          "readOnly": true
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "viewport": {
          "$ref": "#/definitions/Viewport"
        },
        "entryPoints": {
          "$ref": "#/definitions/EntryPoints"
        },
        "addressRanges": {
          "type": "object",
          "properties": {
            "rangeLeft": {
              "type": "string"
            },
            "rangeRight": {
              "type": "string"
            },
            "from": {
              "description": "A postion of start point",
              "type": "object",
              "properties": {
                "lon": {
                  "description": "longitude of start point",
                  "type": "number",
                  "format": "double"
                },
                "lat": {
                  "description": "latitude of start point",
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "to": {
              "description": "A postion of destination",
              "type": "object",
              "properties": {
                "lon": {
                  "description": "longitude of destination",
                  "type": "number",
                  "format": "double"
                },
                "lat": {
                  "description": "latitude of destination",
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        }
      }
    },
    "SearchGeometryResult": {
      "description": "This object is returned from a successful Search By Geometry call",
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "query": {
              "description": "Query property",
              "type": "string",
              "readOnly": true
            },
            "queryType": {
              "description": "QueryType property",
              "type": "string",
              "readOnly": true
            },
            "queryTime": {
              "description": "QueryTime property",
              "type": "integer",
              "readOnly": true
            },
            "numResults": {
              "description": "NumResults property",
              "type": "integer",
              "readOnly": true
            },
            "offset": {
              "description": "Offset property",
              "type": "integer",
              "readOnly": true
            },
            "totalResults": {
              "description": "TotalResults property",
              "type": "integer",
              "readOnly": true
            },
            "fuzzyLevel": {
              "description": "FuzzyLevel property",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchGeometryResultArray"
          }
        }
      }
    },
    "SearchGeometryResultArray": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "description": "Score property",
          "type": "number",
          "readOnly": true
        },
        "info": {
          "description": "Info property",
          "type": "string",
          "readOnly": true
        },
        "entityType": {
          "description": "Entity Type property",
          "type": "string",
          "readOnly": true
        },
        "poi": {
          "$ref": "#/definitions/Poi"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "viewport": {
          "$ref": "#/definitions/Viewport"
        },
        "entryPoints": {
          "$ref": "#/definitions/EntryPoints"
        }
      }
    },
    "SearchAlongRouteResult": {
      "description": "This object is returned from a successful Search Along Route call",
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "query": {
              "description": "Query property",
              "type": "string",
              "readOnly": true
            },
            "queryType": {
              "description": "QueryType property",
              "type": "string",
              "readOnly": true
            },
            "queryTime": {
              "description": "QueryTime property",
              "type": "integer",
              "readOnly": true
            },
            "numResults": {
              "description": "NumResults property",
              "type": "integer",
              "readOnly": true
            },
            "offset": {
              "description": "Offset property",
              "type": "integer",
              "readOnly": true
            },
            "totalResults": {
              "description": "TotalResults property",
              "type": "integer",
              "readOnly": true
            },
            "fuzzyLevel": {
              "description": "FuzzyLevel property",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchAlongRouteResultArray"
          }
        }
      }
    },
    "SearchAlongRouteResultArray": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "description": "Score property",
          "type": "number",
          "readOnly": true
        },
        "info": {
          "description": "Info property",
          "type": "string",
          "readOnly": true
        },
        "entityType": {
          "description": "Entity Type property",
          "type": "string",
          "readOnly": true
        },
        "poi": {
          "$ref": "#/definitions/Poi"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "viewport": {
          "$ref": "#/definitions/Viewport"
        },
        "entryPoints": {
          "$ref": "#/definitions/EntryPoints"
        },
        "dist": {
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "detourTime": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "RouteDirectionsResult": {
      "description": "This object is returned from a successful Route Directions call",
      "type": "object",
      "properties": {
        "formatVersion": {
          "description": "Format Version property",
          "type": "string",
          "readOnly": true
        },
        "copyright": {
          "description": "Copyright property",
          "type": "string",
          "readOnly": true
        },
        "privacy": {
          "description": "Privacy property",
          "type": "string",
          "readOnly": true
        },
        "routes": {
          "description": "Routes array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteDef"
          }
        }
      }
    },
    "RouteDef": {
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "lengthInMeters": {
              "description": "Length In Meters property",
              "type": "integer",
              "readOnly": true
            },
            "travelTimeInSeconds": {
              "description": "Travel Time In Seconds property",
              "type": "integer",
              "readOnly": true
            },
            "trafficDelayInSeconds": {
              "description": "Traffic Delay In Seconds property",
              "type": "integer",
              "readOnly": true
            },
            "departureTime": {
              "description": "Departure Time property",
              "type": "string",
              "readOnly": true
            },
            "arrivalTime": {
              "description": "Arrival Time property",
              "type": "string",
              "readOnly": true
            }
          }
        },
        "legs": {
          "description": "Legs array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Leg"
          }
        },
        "sections": {
          "description": "Sections object",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Section"
          }
        }
      }
    },
    "Leg": {
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "lengthInMeters": {
              "description": "Length In Meters property",
              "type": "integer",
              "readOnly": true
            },
            "travelTimeInSeconds": {
              "description": "Travel Time In Seconds property",
              "type": "integer",
              "readOnly": true
            },
            "trafficDelayInSeconds": {
              "description": "Traffic Delay In Seconds property",
              "type": "integer",
              "readOnly": true
            },
            "departureTime": {
              "description": "Departure Time property",
              "type": "string",
              "readOnly": true
            },
            "arrivalTime": {
              "description": "Arrival Time property",
              "type": "string",
              "readOnly": true
            }
          }
        },
        "points": {
          "description": "Points array",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "object",
            "properties": {
              "latitude": {
                "description": "Latitude property",
                "type": "number",
                "readOnly": true
              },
              "longitude": {
                "description": "Longitude property",
                "type": "number",
                "readOnly": true
              }
            }
          }
        }
      }
    },
    "Section": {
      "type": "object",
      "properties": {
        "startPointIndex": {
          "description": "Start Point Index property",
          "type": "integer",
          "readOnly": true
        },
        "endPointIndex": {
          "description": "End Point Index property",
          "type": "integer",
          "readOnly": true
        },
        "sectionType": {
          "description": "Section Type property",
          "type": "string",
          "readOnly": true
        },
        "travelMode": {
          "description": "Travel Mode property",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TimezoneByIdResult": {
      "description": "This object is returned from a successful Timezone By ID call",
      "type": "object",
      "properties": {
        "version": {
          "description": "Version property",
          "type": "string",
          "readOnly": true
        },
        "referenceUtcTimestamp": {
          "description": "Reference Utc Timestamp property",
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "timeZones": {
          "$ref": "#/definitions/TimeZones"
        },
        "count": {
          "description": "Count property",
          "type": "number",
          "readOnly": true
        }
      }
    },
    "TimezoneByCoordinatesResult": {
      "description": "This object is returned from a successful Timezone By Coordinates call",
      "type": "object",
      "properties": {
        "version": {
          "description": "Version property",
          "type": "string",
          "readOnly": true
        },
        "referenceUtcTimestamp": {
          "description": "Reference Utc Timestamp property",
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "timeZones": {
          "$ref": "#/definitions/TimeZones"
        },
        "count": {
          "description": "Count property",
          "type": "number",
          "readOnly": true
        }
      }
    },
    "TimezoneEnumWindowsResult": {
      "description": "This object is returned from a successful Timezone Enum Windows call",
      "type": "array",
      "items": {
        "$ref": "#/definitions/TimezoneEnumWindow"
      }
    },
    "TimezoneEnumWindow": {
      "type": "object",
      "properties": {
        "WindowsId": {
          "description": "Windows Id property",
          "type": "string",
          "readOnly": true
        },
        "Territory": {
          "description": "Territory property",
          "type": "string",
          "readOnly": true
        },
        "IanaIds": {
          "description": "IanaIds array",
          "type": "array",
          "items": {
            "type": "string",
            "readOnly": true
          }
        }
      }
    },
    "TimezoneEnumIanaResult": {
      "description": "This object is returned from a successful Timezone Enum IANA call",
      "type": "array",
      "items": {
        "$ref": "#/definitions/IanaId"
      }
    },
    "TimezoneIanaVersionResult": {
      "description": "This object is returned from a successful Timezone IANA Version call",
      "type": "object",
      "properties": {
        "version": {
          "description": "Version property",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TimezoneWindowToIanaResult": {
      "description": "This object is returned from a successful Timezone Windows To IANA call",
      "type": "array",
      "items": {
        "$ref": "#/definitions/IanaId"
      }
    },
    "IanaId": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "isAlias": {
          "description": "IsAlias property",
          "type": "boolean",
          "readOnly": true
        },
        "aliasOf": {
          "description": "AliasOf property",
          "type": "string",
          "readOnly": true
        },
        "hasZone1970Location": {
          "description": "HasZone1970Location property",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "TimeZones": {
      "description": "TimeZones array",
      "type": "array",
      "readOnly": true,
      "items": {
        "$ref": "#/definitions/Timezone"
      }
    },
    "Timezone": {
      "type": "object",
      "properties": {
        "Id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "Aliases": {
          "description": "Aliases array",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string",
            "readOnly": true
          }
        },
        "Countries": {
          "description": "Countries array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Country"
          }
        },
        "Names": {
          "type": "object",
          "properties": {
            "ISO6391LanguageCode": {
              "description": "The ISO 639-1 language code of the Names",
              "type": "string",
              "readOnly": true
            },
            "Generic": {
              "description": "Generic Name",
              "type": "string",
              "readOnly": true
            },
            "Standard": {
              "description": "Standard Name",
              "type": "string",
              "readOnly": true
            },
            "Daylight": {
              "description": "Daylight Name",
              "type": "string",
              "readOnly": true
            }
          }
        },
        "ReferenceTime": {
          "description": "Reference Time object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "Tag": {
              "description": "Tag property",
              "type": "string",
              "readOnly": true
            },
            "StandardOffset": {
              "description": "Standard Offset property",
              "type": "string",
              "readOnly": true
            },
            "DaylightSavings": {
              "description": "Daylight Savings property",
              "type": "string",
              "readOnly": true
            },
            "WallTime": {
              "description": "Wall Time property",
              "type": "string",
              "readOnly": true
            },
            "PosixTimezoneValidYear": {
              "description": "Posix Timezone Valid Year property",
              "type": "integer",
              "readOnly": true
            },
            "PosixTimezone": {
              "description": "Posix timezone property",
              "type": "string",
              "readOnly": true
            }
          }
        },
        "RepresentativePoint": {
          "description": "Representative point property",
          "type": "object",
          "readOnly": true,
          "properties": {
            "Latitude": {
              "description": "Latitude property",
              "type": "number",
              "readOnly": true
            },
            "Longitude": {
              "description": "Longitude property",
              "type": "number",
              "readOnly": true
            }
          }
        },
        "TimeTransitions": {
          "description": "TimeTransitions array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/TimeTransition"
          }
        }
      }
    },
    "Country": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Country Name",
          "type": "string",
          "readOnly": true
        },
        "Code": {
          "description": "Country Code",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TimeTransition": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "Tag": {
          "description": "Tag property",
          "type": "string",
          "readOnly": true
        },
        "StandardOffset": {
          "description": "StandardOffset property",
          "type": "string",
          "readOnly": true
        },
        "DaylightSavings": {
          "description": "DaylightSavings property",
          "type": "string",
          "readOnly": true
        },
        "UtcStart": {
          "description": "UtcStart property",
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "UtcEnd": {
          "description": "UtcEnd property",
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        }
      }
    },
    "TrafficFlowTileResult": {
      "description": "This image is returned from a successful Traffic Flow Tile call",
      "type": "string",
      "format": "binary",
      "readOnly": true
    },
    "TrafficFlowSegmentResult": {
      "description": "This object is returned from a successful Traffic Flow Segment call",
      "type": "object",
      "properties": {
        "flowSegmentData": {
          "description": "Flow Segment Data property",
          "type": "object",
          "readOnly": true,
          "properties": {
            "frc": {
              "description": "FRC property",
              "type": "string",
              "readOnly": true
            },
            "currentSpeed": {
              "description": "Current Speed property",
              "type": "integer",
              "readOnly": true
            },
            "freeFlowSpeed": {
              "description": "Free Flow Speed property",
              "type": "integer",
              "readOnly": true
            },
            "currentTravelTime": {
              "description": "Current Travel Time property",
              "type": "integer",
              "readOnly": true
            },
            "freeFlowTravelTime": {
              "description": "Free Flow Travel Time property",
              "type": "integer",
              "readOnly": true
            },
            "confidence": {
              "description": "Confidence property",
              "type": "number",
              "readOnly": true
            },
            "coordinates": {
              "description": "Coordinates of the result",
              "type": "object",
              "properties": {
                "coordinate": {
                  "description": "Coordinate array",
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "$ref": "#/definitions/Coordinate"
                  }
                }
              }
            },
            "@version": {
              "description": "@Version property",
              "type": "string",
              "readOnly": true
            }
          }
        }
      }
    },
    "Coordinate": {
      "type": "object",
      "properties": {
        "latitude": {
          "description": "Latitude property",
          "type": "number",
          "readOnly": true
        },
        "longitude": {
          "description": "Longitude property",
          "type": "number",
          "readOnly": true
        }
      }
    },
    "TrafficIncidentTileResult": {
      "description": "This object is returned from a successful Traffic Incident Tile call",
      "type": "object",
      "properties": {
        "image": {
          "description": "Image property",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TrafficIncidentDetailResult": {
      "description": "This object is returned from a successful Traffic incident Detail call",
      "type": "object",
      "properties": {
        "tm": {
          "description": "Main response element",
          "type": "object",
          "readOnly": true,
          "properties": {
            "@id": {
              "description": "ID of the traffic incident",
              "type": "string",
              "readOnly": true
            },
            "poi": {
              "description": "A single traffic incident, or a cluster of traffic incidents",
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/definitions/TrafficIncidentPoi"
              }
            }
          }
        }
      }
    },
    "TrafficIncidentPoi": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "id": {
          "description": "ID of the traffic incident",
          "type": "string",
          "readOnly": true
        },
        "p": {
          "description": "The point where an icon of the cluster or raw incident should be drawn, expressed in the requested projection. This is affected by traffic style, zoom level and road type",
          "type": "object",
          "readOnly": true,
          "properties": {
            "x": {
              "description": "x coordinate",
              "type": "number",
              "readOnly": true
            },
            "y": {
              "description": "y coordinate",
              "type": "number",
              "readOnly": true
            }
          }
        },
        "ic": {
          "description": "The icon category associated with this incident. Values are numbers in the range 0-13, with the following meanings",
          "type": "integer",
          "readOnly": true
        },
        "ty": {
          "description": "The magnitude of delay associated with incident. These values correspond to incident colors in the traffic tiles",
          "type": "integer",
          "readOnly": true
        },
        "cbl": {
          "description": "Bottom left coordinate of the cluster in the projection of the request",
          "type": "object",
          "readOnly": true,
          "properties": {
            "x": {
              "description": "x coordinate",
              "type": "number",
              "readOnly": true
            },
            "y": {
              "description": "y coordinate",
              "type": "number",
              "readOnly": true
            }
          }
        },
        "ctr": {
          "description": "Top right coordinate of the cluster in the projection of the request",
          "type": "object",
          "readOnly": true,
          "properties": {
            "x": {
              "description": "x coordinate",
              "type": "number",
              "readOnly": true
            },
            "y": {
              "description": "y coordinate",
              "type": "number",
              "readOnly": true
            }
          }
        },
        "cs": {
          "description": "Cluster size: the number of incidents in the cluster",
          "type": "integer",
          "readOnly": true
        },
        "l": {
          "description": "Length of the incident in meters",
          "type": "integer",
          "readOnly": true
        },
        "r": {
          "description": "The road number(s) affected by the incident. Multiple road numbers will delimited by slashes",
          "type": "string",
          "readOnly": true
        },
        "dl": {
          "description": "Delay caused by the incident in seconds (except in road closures)",
          "type": "integer",
          "readOnly": true
        },
        "t": {
          "description": "To: the name of the intersection or location where the traffic due to the incident ends",
          "type": "string",
          "readOnly": true
        },
        "f": {
          "description": "From: the name of the intersection or location where the traffic due to the incident starts",
          "type": "string",
          "readOnly": true
        },
        "d": {
          "description": "Description of the incident in the language requested",
          "type": "string",
          "readOnly": true
        },
        "c": {
          "description": "Cause of the incident, where available, in the language requested",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TrafficIncidentViewportResult": {
      "description": "This object is returned from a successful Traffic Incident Viewport call",
      "type": "object",
      "properties": {
        "viewpResp": {
          "description": "Viewport Response object",
          "type": "object",
          "readOnly": true,
          "properties": {
            "trafficState": {
              "description": "Traffic State array",
              "type": "object",
              "readOnly": true,
              "properties": {
                "@trafficAge": {
                  "description": "@Traffic Age property",
                  "type": "integer",
                  "readOnly": true
                },
                "@trafficModelId": {
                  "description": "@Traffic Model Id property",
                  "type": "string",
                  "readOnly": true
                }
              }
            },
            "copyrightIds": {
              "description": "Copyright Ids property",
              "type": "string",
              "readOnly": true
            },
            "@version": {
              "description": "@Version property",
              "type": "string",
              "readOnly": true
            },
            "@maps": {
              "description": "@maps property",
              "type": "string",
              "readOnly": true
            }
          }
        }
      }
    },
    "LineStringGeoJson": {
      "description": "A GeoJSON compliant LineString Geometry object",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property. This value must be equal to LineString.",
          "type": "string"
        },
        "coordinates": {
          "description": "Coordinates for the LineString object. Each Position object in Coordinates should be GeoJSON compliant i.e. longitude precedes latitute. Refer to RFC7946 for details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LineStringGeoJson"
          }
        }
      }
    }
  },
  "x-internal-service-name": "Location Based Services Functional API",
  "x-internal-toc-name": "Route",
  "x-internal-split-type": "Operation",
  "x-internal-operation-name": "Get Route Directions"
}