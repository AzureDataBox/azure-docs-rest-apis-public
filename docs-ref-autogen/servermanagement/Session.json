{
  "swagger": "2.0",
  "info": {
    "version": "2016-07-01-preview",
    "title": "ServerManagement",
    "description": "REST API for Azure Server Management Service."
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow.",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}": {
      "put": {
        "tags": [
          "Sessions"
        ],
        "operationId": "Session_Create",
        "description": "Creates a session for a node.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The resource group name uniquely identifies the resource group within the user subscriptionId.",
            "minLength": 3,
            "pattern": "[a-zA-Z0-9]+"
          },
          {
            "name": "nodeName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The node name (256 characters maximum).",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"
          },
          {
            "name": "session",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The sessionId from the user."
          },
          {
            "name": "SessionParameters",
            "in": "body",
            "x-ms-client-flatten": true,
            "description": "Parameters supplied to the CreateOrUpdate operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SessionParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/SessionResource"
            }
          },
          "201": {
            "description": "Created: the session was created.",
            "schema": {
              "$ref": "#/definitions/SessionResource"
            }
          },
          "202": {
            "description": "Accepted: Location header contains the URL where the status of the long running operation can be checked."
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the error definition specified in the schema, and an exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "produces": [
          "application/json",
          "text/json"
        ],
        "consumes": [
          "application/json",
          "text/json"
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "operationId": "Session_Delete",
        "description": "Deletes a session for a node.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The resource group name uniquely identifies the resource group within the user subscriptionId.",
            "minLength": 3,
            "pattern": "[a-zA-Z0-9]+"
          },
          {
            "name": "nodeName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The node name (256 characters maximum).",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"
          },
          {
            "name": "session",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The sessionId from the user."
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully."
          },
          "204": {
            "description": "The request is well formed but the resource does not exist."
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the error definition specified in the schema, and an exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json"
        ],
        "consumes": [
          "application/json",
          "text/json"
        ]
      },
      "get": {
        "tags": [
          "Sessions"
        ],
        "operationId": "Session_Get",
        "description": "Gets a session for a node.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The resource group name uniquely identifies the resource group within the user subscriptionId.",
            "minLength": 3,
            "pattern": "[a-zA-Z0-9]+"
          },
          {
            "name": "nodeName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The node name (256 characters maximum).",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"
          },
          {
            "name": "session",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The sessionId from the user."
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/SessionResource"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the error definition specified in the schema, and an exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json"
        ],
        "consumes": [
          "application/json",
          "text/json"
        ]
      }
    }
  },
  "definitions": null,
  "parameters": {
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Client API Version."
    }
  },
  "x-internal-toc-name": "Session",
  "x-internal-split-type": "OperationGroup",
  "x-internal-split-members": [
    {
      "displayName": "Create",
      "relativePath": "Node/Create"
    },
    {
      "displayName": "Delete",
      "relativePath": "Node/Delete"
    },
    {
      "displayName": "Get",
      "relativePath": "Node/Get"
    },
    {
      "displayName": "List",
      "relativePath": "Node/List"
    },
    {
      "displayName": "List For Resource Group",
      "relativePath": "Node/ListForResourceGroup"
    },
    {
      "displayName": "Update",
      "relativePath": "Node/Update"
    }
  ]
}