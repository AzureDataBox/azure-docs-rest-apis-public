{
  "swagger": "2.0",
  "info": {
    "title": "NetworkManagementClient",
    "description": "The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.",
    "version": "2017-03-01"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}": {
      "delete": {
        "tags": [
          "RouteFilters"
        ],
        "operationId": "RouteFilters_Delete",
        "x-ms-examples": {
          "RouteFilterDelete": {
            "parameters": {
              "routeFilterName": "filterName",
              "resourceGroupName": "rg1",
              "api-version": "2017-03-01",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {},
              "202": {},
              "204": {}
            }
          }
        },
        "description": "Deletes the specified route filter.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "name": "routeFilterName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the route filter."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "200": {
            "description": "Delete successful."
          },
          "204": {
            "description": "Delete successful."
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "tags": [
          "RouteFilters"
        ],
        "operationId": "RouteFilters_Get",
        "x-ms-examples": {
          "RouteFilterGet": {
            "parameters": {
              "routeFilterName": "filterName",
              "resourceGroupName": "rg1",
              "api-version": "2017-03-01",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
                  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                  "location": "West US",
                  "name": "filterName",
                  "type": "Microsofot.Network/routeFilters",
                  "tags": {
                    "key1": "value1"
                  },
                  "properties": {
                    "provisioningState": "Succeeded",
                    "rules": [
                      {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                        "name": "ruleName",
                        "properties": {
                          "provisioningState": "Succeeded",
                          "access": "Allow",
                          "routeFilterRuleType": "Community",
                          "communities": [
                            "12076:5030",
                            "12076:5040"
                          ]
                        }
                      }
                    ],
                    "peerings": []
                  }
                }
              }
            }
          }
        },
        "description": "Gets the specified route filter.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "name": "routeFilterName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the route filter."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "$expand",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Expands referenced express route bgp peering resources."
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting Route Filter resource.",
            "schema": {
              "$ref": "#/definitions/RouteFilter"
            }
          }
        }
      },
      "put": {
        "tags": [
          "RouteFilters"
        ],
        "operationId": "RouteFilters_CreateOrUpdate",
        "x-ms-examples": {
          "RouteFilterCreate": {
            "parameters": {
              "routeFilterName": "filterName",
              "resourceGroupName": "rg1",
              "api-version": "2017-03-01",
              "subscriptionId": "subid",
              "routeFilterParameters": {
                "location": "West US",
                "tags": {
                  "key1": "value1"
                },
                "properties": {
                  "rules": [
                    {
                      "name": "ruleName",
                      "properties": {
                        "access": "Allow",
                        "routeFilterRuleType": "Community",
                        "communities": [
                          "12076:5030",
                          "12076:5040"
                        ]
                      }
                    }
                  ],
                  "peerings": []
                }
              }
            },
            "responses": {
              "201": {
                "body": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
                  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                  "location": "West US",
                  "name": "filterName",
                  "type": "Microsofot.Network/routeFilters",
                  "tags": {
                    "key1": "value1"
                  },
                  "properties": {
                    "provisioningState": "Succeeded",
                    "rules": [
                      {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                        "name": "ruleName",
                        "properties": {
                          "provisioningState": "Succeeded",
                          "access": "Allow",
                          "routeFilterRuleType": "Community",
                          "communities": [
                            "12076:5030",
                            "12076:5040"
                          ]
                        }
                      }
                    ],
                    "peerings": []
                  }
                }
              },
              "200": {
                "body": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
                  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                  "location": "West US",
                  "name": "filterName",
                  "type": "Microsofot.Network/routeFilters",
                  "tags": {
                    "key1": "value1"
                  },
                  "properties": {
                    "provisioningState": "Succeeded",
                    "rules": [
                      {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                        "name": "ruleName",
                        "properties": {
                          "provisioningState": "Succeeded",
                          "access": "Allow",
                          "routeFilterRuleType": "Community",
                          "communities": [
                            "12076:5030",
                            "12076:5040"
                          ]
                        }
                      }
                    ],
                    "peerings": []
                  }
                }
              }
            }
          }
        },
        "description": "Creates or updates a route filter in a specified resource group.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "name": "routeFilterName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the route filter."
          },
          {
            "name": "routeFilterParameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteFilter"
            },
            "description": "Parameters supplied to the create or update route filter operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting Route Filter resource.",
            "schema": {
              "$ref": "#/definitions/RouteFilter"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting Route Filter resource.",
            "schema": {
              "$ref": "#/definitions/RouteFilter"
            }
          }
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "RouteFilters"
        ],
        "operationId": "RouteFilters_Update",
        "x-ms-examples": {
          "RouteFilterUpdate": {
            "parameters": {
              "routeFilterName": "filterName",
              "resourceGroupName": "rg1",
              "api-version": "2017-03-01",
              "subscriptionId": "subid",
              "routeFilterParameters": {
                "tags": {
                  "key1": "value1"
                },
                "properties": {
                  "rules": [
                    {
                      "name": "ruleName",
                      "properties": {
                        "access": "Allow",
                        "routeFilterRuleType": "Community",
                        "communities": [
                          "12076:5030"
                        ]
                      }
                    }
                  ]
                }
              }
            },
            "responses": {
              "200": {
                "body": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
                  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                  "location": "West US",
                  "name": "filterName",
                  "type": "Microsofot.Network/routeFilters",
                  "tags": {
                    "key1": "value1"
                  },
                  "properties": {
                    "provisioningState": "Succeeded",
                    "rules": [
                      {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                        "name": "ruleName",
                        "properties": {
                          "provisioningState": "Succeeded",
                          "access": "Allow",
                          "routeFilterRuleType": "Community",
                          "communities": [
                            "12076:5030"
                          ]
                        }
                      }
                    ],
                    "peerings": []
                  }
                }
              }
            }
          }
        },
        "description": "Updates a route filter in a specified resource group.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "name": "routeFilterName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the route filter."
          },
          {
            "name": "routeFilterParameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchRouteFilter"
            },
            "description": "Parameters supplied to the update route filter operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting Route Filter resource.",
            "schema": {
              "$ref": "#/definitions/RouteFilter"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters": {
      "get": {
        "tags": [
          "RouteFilters"
        ],
        "operationId": "RouteFilters_ListByResourceGroup",
        "x-ms-examples": {
          "RouteFilterListByResourceGroup": {
            "parameters": {
              "api-version": "2017-03-01",
              "resourceGroupName": "rg1",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "value": [
                    {
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
                      "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                      "location": "West US",
                      "name": "filterName",
                      "type": "Microsofot.Network/routeFilters",
                      "tags": {
                        "key1": "value1"
                      },
                      "properties": {
                        "provisioningState": "Succeeded",
                        "rules": [
                          {
                            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                            "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                            "name": "ruleName",
                            "properties": {
                              "provisioningState": "Succeeded",
                              "access": "Allow",
                              "routeFilterRuleType": "Community",
                              "communities": [
                                "12076:5030",
                                "12076:5040"
                              ]
                            }
                          }
                        ],
                        "peerings": []
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "Gets all route filters in a resource group.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of Route Filter resources.",
            "schema": {
              "$ref": "#/definitions/RouteFilterListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/routeFilters": {
      "get": {
        "tags": [
          "RouteFilters"
        ],
        "operationId": "RouteFilters_List",
        "x-ms-examples": {
          "RouteFilterList": {
            "parameters": {
              "api-version": "2017-03-01",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "value": [
                    {
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
                      "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                      "location": "West US",
                      "name": "filterName",
                      "type": "Microsofot.Network/routeFilters",
                      "tags": {
                        "key1": "value1"
                      },
                      "properties": {
                        "provisioningState": "Succeeded",
                        "rules": [
                          {
                            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                            "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                            "name": "ruleName",
                            "properties": {
                              "provisioningState": "Succeeded",
                              "access": "Allow",
                              "routeFilterRuleType": "Community",
                              "communities": [
                                "12076:5030",
                                "12076:5040"
                              ]
                            }
                          }
                        ],
                        "peerings": []
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "Gets all route filters in a subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of Route Filter resources.",
            "schema": {
              "$ref": "#/definitions/RouteFilterListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "RouteFilterRulePropertiesFormat": {
      "required": [
        "access",
        "routeFilterRuleType",
        "communities"
      ],
      "properties": {
        "access": {
          "type": "string",
          "description": "The access type of the rule. Valid values are: 'Allow', 'Deny'",
          "enum": [
            "Allow",
            "Deny"
          ],
          "x-ms-enum": {
            "name": "Access",
            "modelAsString": true
          }
        },
        "routeFilterRuleType": {
          "type": "string",
          "description": "The rule type of the rule. Valid value is: 'Community'",
          "enum": [
            "Community"
          ],
          "x-ms-enum": {
            "name": "RouteFilterRuleType",
            "modelAsString": true
          }
        },
        "communities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020']"
        },
        "provisioningState": {
          "type": "string",
          "readOnly": true,
          "description": "The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and 'Failed'."
        }
      },
      "description": "Route Filter Rule Resource"
    },
    "RouteFilterRule": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/RouteFilterRulePropertiesFormat"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource."
        },
        "location": {
          "type": "string",
          "description": "Resource location."
        },
        "etag": {
          "type": "string",
          "readOnly": true,
          "description": "A unique read-only string that changes whenever the resource is updated."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Route Filter Rule Resource"
    },
    "PatchRouteFilterRule": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/RouteFilterRulePropertiesFormat"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource."
        },
        "etag": {
          "type": "string",
          "readOnly": true,
          "description": "A unique read-only string that changes whenever the resource is updated."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Route Filter Rule Resource"
    },
    "RouteFilterPropertiesFormat": {
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouteFilterRule"
          },
          "description": "Collection of RouteFilterRules contained within a route filter."
        },
        "peerings": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExpressRouteCircuitPeering"
          },
          "description": "A collection of references to express route circuit peerings."
        },
        "provisioningState": {
          "type": "string",
          "readOnly": true,
          "description": "The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and 'Failed'."
        }
      },
      "description": "Route Filter Resource"
    },
    "RouteFilter": {
      "required": [
        "location"
      ],
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/RouteFilterPropertiesFormat"
        },
        "etag": {
          "type": "string",
          "readOnly": true,
          "description": "Gets a unique read-only string that changes whenever the resource is updated."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Route Filter Resource."
    },
    "PatchRouteFilter": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/RouteFilterPropertiesFormat"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource."
        },
        "etag": {
          "type": "string",
          "readOnly": true,
          "description": "A unique read-only string that changes whenever the resource is updated."
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "Resource type."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Route Filter Resource."
    },
    "RouteFilterListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouteFilter"
          },
          "description": "Gets a list of route filters in a resource group."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to get the next set of results."
        }
      },
      "description": "Response for the ListRouteFilters API service call."
    },
    "RouteFilterRuleListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouteFilterRule"
          },
          "description": "Gets a list of RouteFilterRules in a resource group."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to get the next set of results."
        }
      },
      "description": "Response for the ListRouteFilterRules API service call"
    },
    "SubResource": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Resource ID."
        }
      },
      "x-ms-azure-resource": true
    },
    "Resource": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Resource ID."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Resource name."
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "Resource type."
        },
        "location": {
          "type": "string",
          "description": "Resource location."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags."
        }
      },
      "x-ms-azure-resource": true
    },
    "ExpressRouteCircuitStats": {
      "properties": {
        "primarybytesIn": {
          "type": "integer",
          "format": "int64",
          "description": "Gets BytesIn of the peering."
        },
        "primarybytesOut": {
          "type": "integer",
          "format": "int64",
          "description": "Gets BytesOut of the peering."
        },
        "secondarybytesIn": {
          "type": "integer",
          "format": "int64",
          "description": "Gets BytesIn of the peering."
        },
        "secondarybytesOut": {
          "type": "integer",
          "format": "int64",
          "description": "Gets BytesOut of the peering."
        }
      },
      "description": "Contains stats associated with the peering."
    },
    "ExpressRouteCircuitPeeringConfig": {
      "properties": {
        "advertisedPublicPrefixes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The reference of AdvertisedPublicPrefixes."
        },
        "advertisedPublicPrefixesState": {
          "type": "string",
          "description": "AdvertisedPublicPrefixState of the Peering resource. Possible values are 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.",
          "enum": [
            "NotConfigured",
            "Configuring",
            "Configured",
            "ValidationNeeded"
          ],
          "x-ms-enum": {
            "name": "ExpressRouteCircuitPeeringAdvertisedPublicPrefixState",
            "modelAsString": true
          }
        },
        "customerASN": {
          "type": "integer",
          "format": "int32",
          "description": "The CustomerASN of the peering."
        },
        "routingRegistryName": {
          "type": "string",
          "description": "The RoutingRegistryName of the configuration."
        }
      },
      "description": "Specifies the peering configuration."
    },
    "ExpressRouteCircuitPeeringPropertiesFormat": {
      "properties": {
        "peeringType": {
          "type": "string",
          "description": "The PeeringType. Possible values are: 'AzurePublicPeering', 'AzurePrivatePeering', and 'MicrosoftPeering'.",
          "enum": [
            "AzurePublicPeering",
            "AzurePrivatePeering",
            "MicrosoftPeering"
          ],
          "x-ms-enum": {
            "name": "ExpressRouteCircuitPeeringType",
            "modelAsString": true
          }
        },
        "state": {
          "type": "string",
          "description": "The state of peering. Possible values are: 'Disabled' and 'Enabled'",
          "enum": [
            "Disabled",
            "Enabled"
          ],
          "x-ms-enum": {
            "name": "ExpressRouteCircuitPeeringState",
            "modelAsString": true
          }
        },
        "azureASN": {
          "type": "integer",
          "format": "int32",
          "description": "The Azure ASN."
        },
        "peerASN": {
          "type": "integer",
          "format": "int32",
          "description": "The peer ASN."
        },
        "primaryPeerAddressPrefix": {
          "type": "string",
          "description": "The primary address prefix."
        },
        "secondaryPeerAddressPrefix": {
          "type": "string",
          "description": "The secondary address prefix."
        },
        "primaryAzurePort": {
          "type": "string",
          "description": "The primary port."
        },
        "secondaryAzurePort": {
          "type": "string",
          "description": "The secondary port."
        },
        "sharedKey": {
          "type": "string",
          "description": "The shared key."
        },
        "vlanId": {
          "type": "integer",
          "format": "int32",
          "description": "The VLAN ID."
        },
        "microsoftPeeringConfig": {
          "$ref": "#/definitions/ExpressRouteCircuitPeeringConfig",
          "description": "The Microsoft peering configuration."
        },
        "stats": {
          "$ref": "#/definitions/ExpressRouteCircuitStats",
          "description": "Gets peering stats."
        },
        "provisioningState": {
          "type": "string",
          "description": "Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'."
        },
        "gatewayManagerEtag": {
          "type": "string",
          "description": "The GatewayManager Etag."
        },
        "lastModifiedBy": {
          "type": "string",
          "description": "Gets whether the provider or the customer last modified the peering."
        },
        "routeFilter": {
          "$ref": "#/definitions/RouteFilter",
          "description": "The reference of the RouteFilter resource."
        }
      }
    },
    "ExpressRouteCircuitPeering": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ExpressRouteCircuitPeeringPropertiesFormat"
        },
        "name": {
          "type": "string",
          "description": "Gets name of the resource that is unique within a resource group. This name can be used to access the resource."
        },
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "A unique read-only string that changes whenever the resource is updated."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Peering in an ExpressRouteCircuit resource."
    }
  },
  "parameters": {
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Client API version."
    }
  }
}