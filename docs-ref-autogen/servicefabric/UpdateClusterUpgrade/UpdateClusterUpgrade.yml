### YamlMime:RESTOperation
summary: Update the upgrade parameters of a Service Fabric cluster upgrade.
service: Service Fabric
apiVersion: 6.0.0.1
groupName: Update Cluster Upgrade
produces:
- application/json
paths:
- content: POST http://localhost:19080/$/UpdateUpgrade?api-version=6.0.0.1
- content: POST http://localhost:19080/$/UpdateUpgrade?api-version=6.0.0.1&timeout={timeout}
  isOptional: true
uriParameters:
- in: query
  isRequired: true
  description: The version of the API. This is a required parameter and it's value must be "6.0".
  types:
  - uid: string
  name: api-version
- in: query
  description: The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  types:
  - uid: integer
  format: int64
  name: timeout
responses:
- description: A successful operation returns 200 status code.
  name: 200 OK
- description: The detailed error response.
  types:
  - uid: FabricError
  name: Other Status Codes
requestBody:
- parameters:
  - in: body
    description: >
      The type of upgrade out of the following possible values.

          - Invalid - Indicates the upgrade kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
          - Rolling - The upgrade progresses one upgrade domain at a time. The value is 1.
          - Rolling_ForceRestart - The upgrade gets restarted by force. The value is 2.
    types:
    - uid: UpgradeType
    name: UpgradeKind
  - in: body
    description: Describes the parameters for updating a rolling upgrade of application or cluster.
    types:
    - uid: RollingUpgradeUpdateDescription
    name: UpdateDescription
  - in: body
    description: >
      Defines a health policy used to evaluate the health of the cluster or of a cluster node.
    types:
    - uid: ClusterHealthPolicy
    name: ClusterHealthPolicy
  - in: body
    description: When true, enables delta health evaluation rather than absolute health evaluation after completion of each upgrade domain.
    types:
    - uid: boolean
    name: EnableDeltaHealthEvaluation
  - in: body
    description: Defines a health policy used to evaluate the health of the cluster during a cluster upgrade.
    types:
    - uid: ClusterUpgradeHealthPolicyObject
    name: ClusterUpgradeHealthPolicy
  - in: body
    description: >
      Defines the application health policy map used to evaluate the health of an application or one of its children entities.
    types:
    - uid: ApplicationHealthPolicies
    name: ApplicationHealthPolicyMap
requestHeader: []
definitions:
- name: RollingUpgradeUpdateDescription
  description: Describes the parameters for updating a rolling upgrade of application or cluster.
  kind: object
  properties:
  - description: >
      The mode used to monitor health during a rolling upgrade.

          - Invalid - Indicates the upgrade mode is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
          - UnmonitoredAuto - The upgrade will proceed automatically without performing any health monitoring. The value is 1
          - UnmonitoredManual - The upgrade will stop after completing each upgrade domain, giving the opportunity to manually monitor health before proceeding. The value is 2
          - Monitored - The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The value is 3
    types:
    - uid: UpgradeMode
    name: RollingUpgradeMode
  - description: If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
    types:
    - uid: boolean
    name: ForceRestart
  - description: The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
    types:
    - uid: integer
    name: ReplicaSetCheckTimeoutInMilliseconds
  - description: >
      The compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations.

          - Invalid - Indicates the failure action is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
          - Rollback - The upgrade will start rolling back automatically. The value is 1
          - Manual - The upgrade will switch to UnmonitoredManual upgrade mode. The value is 2
    types:
    - uid: FailureAction
    name: FailureAction
  - description: The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
    types:
    - uid: string
    name: HealthCheckWaitDurationInMilliseconds
  - description: The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
    types:
    - uid: string
    name: HealthCheckStableDurationInMilliseconds
  - description: The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
    types:
    - uid: string
    name: HealthCheckRetryTimeoutInMilliseconds
  - description: The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
    types:
    - uid: string
    name: UpgradeTimeoutInMilliseconds
  - description: The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
    types:
    - uid: string
    name: UpgradeDomainTimeoutInMilliseconds
- name: ClusterHealthPolicy
  description: >
    Defines a health policy used to evaluate the health of the cluster or of a cluster node.
  kind: object
  properties:
  - description: Indicates whether warnings are treated with the same severity as errors.
    types:
    - uid: boolean
    name: ConsiderWarningAsError
  - description: >
      The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.


      The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.

      If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.

      The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.

      The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.


      In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
    types:
    - uid: integer
    name: MaxPercentUnhealthyNodes
  - description: >
      The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.


      The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.

      If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.

      This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.

      The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
    types:
    - uid: integer
    name: MaxPercentUnhealthyApplications
  - description: >
      Defines a map with max percentage unhealthy applications for specific application types.

      Each entry specifies as key the application type name and as value an integer that represents the MaxPercentUnhealthyApplications percentage used to evaluate the applications of the specified application type.


      The application type health policy map can be used during cluster health evaluation to describe special application types.

      The application types included in the map are evaluated against the percentage specified in the map, and not with the global MaxPercentUnhealthyApplications defined in the cluster health policy.

      The applications of application types specified in the map are not counted against the global pool of applications.

      For example, if some applications of a type are critical, the cluster administrator can add an entry to the map for that application type

      and assign it a value of 0% (that is, do not tolerate any failures).

      All other applications can be evaluated with MaxPercentUnhealthyApplications set to 20% to tolerate some failures out of the thousands of application instances.

      The application type health policy map is used only if the cluster manifest enables application type health evaluation using the configuration entry for HealthManager/EnableApplicationTypeHealthEvaluation.
    types:
    - uid: ApplicationTypeHealthPolicyMapItem
    name: ApplicationTypeHealthPolicyMap
- name: ClusterUpgradeHealthPolicyObject
  description: Defines a health policy used to evaluate the health of the cluster during a cluster upgrade.
  kind: object
  properties:
  - description: The maximum allowed percentage of nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. The default value is 10%.
    types:
    - uid: integer
    name: MaxPercentDeltaUnhealthyNodes
  - description: The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits. The default value is 15%.
    types:
    - uid: integer
    name: MaxPercentUpgradeDomainDeltaUnhealthyNodes
- name: ApplicationHealthPolicies
  description: >
    Defines the application health policy map used to evaluate the health of an application or one of its children entities.
  kind: object
  properties:
  - description: >
      Defines a map that contains specific application health policies for different applications.

      Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.

      If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy found in its application manifest or the default application health policy (if no health policy is defined in the manifest).

      The map is empty by default.
    types:
    - uid: ApplicationHealthPolicyMapItem
    name: ApplicationHealthPolicyMap
- name: FabricError
  description: >
    The REST API operations for Service Fabric return standard HTTP status codes. This type defines the additional information returned from the Service Fabric API operations that are not successful.
  kind: object
  properties:
  - description: Error object containing error code and error message.
    types:
    - uid: FabricError_Error
    name: Error
- name: UpdateClusterUpgradeDescription
  description: Parameters for updating a cluster upgrade.
  kind: object
  properties:
  - description: >
      The type of upgrade out of the following possible values.

          - Invalid - Indicates the upgrade kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
          - Rolling - The upgrade progresses one upgrade domain at a time. The value is 1.
          - Rolling_ForceRestart - The upgrade gets restarted by force. The value is 2.
    types:
    - uid: UpgradeType
    name: UpgradeKind
  - description: Describes the parameters for updating a rolling upgrade of application or cluster.
    types:
    - uid: RollingUpgradeUpdateDescription
    name: UpdateDescription
  - description: >
      Defines a health policy used to evaluate the health of the cluster or of a cluster node.
    types:
    - uid: ClusterHealthPolicy
    name: ClusterHealthPolicy
  - description: When true, enables delta health evaluation rather than absolute health evaluation after completion of each upgrade domain.
    types:
    - uid: boolean
    name: EnableDeltaHealthEvaluation
  - description: Defines a health policy used to evaluate the health of the cluster during a cluster upgrade.
    types:
    - uid: ClusterUpgradeHealthPolicyObject
    name: ClusterUpgradeHealthPolicy
  - description: >
      Defines the application health policy map used to evaluate the health of an application or one of its children entities.
    types:
    - uid: ApplicationHealthPolicies
    name: ApplicationHealthPolicyMap
- name: UpgradeMode
  description: >
    The mode used to monitor health during a rolling upgrade.

        - Invalid - Indicates the upgrade mode is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
        - UnmonitoredAuto - The upgrade will proceed automatically without performing any health monitoring. The value is 1
        - UnmonitoredManual - The upgrade will stop after completing each upgrade domain, giving the opportunity to manually monitor health before proceeding. The value is 2
        - Monitored - The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The value is 3
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: UnmonitoredAuto
  - types:
    - uid: string
    name: UnmonitoredManual
  - types:
    - uid: string
    name: Monitored
- name: FailureAction
  description: >
    The compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations.

        - Invalid - Indicates the failure action is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
        - Rollback - The upgrade will start rolling back automatically. The value is 1
        - Manual - The upgrade will switch to UnmonitoredManual upgrade mode. The value is 2
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: Rollback
  - types:
    - uid: string
    name: Manual
- name: ApplicationTypeHealthPolicyMapItem
  description: >
    Defines an item in ApplicationTypeHealthPolicyMap.
  kind: object
  properties:
  - description: The key of the application type health policy map item. This is the name of the application type.
    types:
    - uid: string
    name: Key
  - description: >
      The value of the application type health policy map item.

      The max percent unhealthy applications allowed for the application type. Must be between zero and 100.
    types:
    - uid: integer
    name: Value
- name: ApplicationHealthPolicyMapItem
  description: >
    Defines a map that contains specific application health policies for different applications.

    Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.

    If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy found in its application manifest or the default application health policy (if no health policy is defined in the manifest).

    The map is empty by default.
  kind: object
  properties:
  - description: The name of the application, including the 'fabric:' URI scheme.
    types:
    - uid: string
    name: Key
  - description: >
      Defines a health policy used to evaluate the health of an application or one of its children entities.
    types:
    - uid: ApplicationHealthPolicy
    name: Value
- name: FabricError_Error
  description: Error object containing error code and error message.
  kind: object
  properties:
  - description: >
      Defines the fabric error codes that be returned as part of the error object in response to Service Fabric API operations that are not successful. Following are the error code values that can be returned for a specific HTTP status code.

        - Possible values of the error code for HTTP status code 400 (Bad Request)
          - "FABRIC_E_INVALID_PARTITION_KEY"
          - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
          - "FABRIC_E_INVALID_ADDRESS"
          - "FABRIC_E_APPLICATION_NOT_UPGRADING"
          - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
          - "FABRIC_E_FABRIC_NOT_UPGRADING"
          - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
          - "FABRIC_E_INVALID_CONFIGURATION"
          - "FABRIC_E_INVALID_NAME_URI"
          - "FABRIC_E_PATH_TOO_LONG"
          - "FABRIC_E_KEY_TOO_LARGE"
          - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
          - "FABRIC_E_INVALID_ATOMIC_GROUP"
          - "FABRIC_E_VALUE_EMPTY"

        - Possible values of the error code for HTTP status code 404 (Not Found)
          - "FABRIC_E_NODE_NOT_FOUND"
          - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
          - "FABRIC_E_APPLICATION_NOT_FOUND"
          - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
          - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
          - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
          - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
          - "FABRIC_E_PARTITION_NOT_FOUND"
          - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
          - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
          - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
          - "FABRIC_E_DIRECTORY_NOT_FOUND"
          - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
          - "FABRIC_E_FILE_NOT_FOUND"
          - "FABRIC_E_NAME_DOES_NOT_EXIST"
          - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
          - "FABRIC_E_ENUMERATION_COMPLETED"
          - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
          - "FABRIC_E_KEY_NOT_FOUND"
          - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"

        - Possible values of the error code for HTTP status code 409 (Conflict)
          - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
          - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
          - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
          - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
          - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
          - "FABRIC_E_SERVICE_ALREADY_EXISTS"
          - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
          - "FABRIC_E_APPLICATION_TYPE_IN_USE"
          - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
          - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
          - "FABRIC_E_FABRIC_VERSION_IN_USE"
          - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
          - "FABRIC_E_NAME_ALREADY_EXISTS"
          - "FABRIC_E_NAME_NOT_EMPTY"
          - "FABRIC_E_PROPERTY_CHECK_FAILED"
          - "FABRIC_E_SERVICE_METADATA_MISMATCH"
          - "FABRIC_E_SERVICE_TYPE_MISMATCH"
          - "FABRIC_E_HEALTH_STALE_REPORT"
          - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
          - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
          - "FABRIC_E_INSTANCE_ID_MISMATCH"

        - Possible values of the error code for HTTP status code 413 (Request Entity Too Large)
          - "FABRIC_E_VALUE_TOO_LARGE"

        - Possible values of the error code for HTTP status code 500 (Internal Server Error)
          - "FABRIC_E_NODE_IS_UP"

        - Possible values of the error code for HTTP status code 503 (Service Unavailable)
          - "FABRIC_E_NO_WRITE_QUORUM"
          - "FABRIC_E_NOT_PRIMARY"
          - "FABRIC_E_NOT_READY"
          - "FABRIC_E_RECONFIGURATION_PENDING"
          - "FABRIC_E_SERVICE_OFFLINE"
          - "E_ABORT"
          - "FABRIC_E_VALUE_TOO_LARGE"

        - Possible values of the error code for HTTP status code 504 (Gateway Timeout)
          - "FABRIC_E_COMMUNICATION_ERROR"
          - "FABRIC_E_OPERATION_NOT_COMPLETE"
          - "FABRIC_E_TIMEOUT"
    types:
    - uid: FabricErrorCodes
    name: Code
  - description: Error message.
    types:
    - uid: string
    name: Message
- name: UpgradeType
  description: >
    The type of upgrade out of the following possible values.

        - Invalid - Indicates the upgrade kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
        - Rolling - The upgrade progresses one upgrade domain at a time. The value is 1.
        - Rolling_ForceRestart - The upgrade gets restarted by force. The value is 2.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: Rolling
  - types:
    - uid: string
    name: Rolling_ForceRestart
- name: ApplicationHealthPolicy
  description: >
    Defines a health policy used to evaluate the health of an application or one of its children entities.
  kind: object
  properties:
  - description: Indicates whether warnings are treated with the same severity as errors.
    types:
    - uid: boolean
    name: ConsiderWarningAsError
  - description: >
      The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.

      The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.

      This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.

      The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
    types:
    - uid: integer
    name: MaxPercentUnhealthyDeployedApplications
  - description: >
      Represents the health policy used to evaluate the health of services belonging to a service type.
    types:
    - uid: ServiceTypeHealthPolicy
    name: DefaultServiceTypeHealthPolicy
  - description: >
      Defines a ServiceTypeHealthPolicy per service type name.


      The entries in the map replace the default service type health policy for each specified service type. For example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently. With policy per service type, there's more granular control of the health of the service.


      If no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation.
    types:
    - uid: ServiceTypeHealthPolicyMapItem
    name: ServiceTypeHealthPolicyMap
- name: FabricErrorCodes
  description: >
    Defines the fabric error codes that be returned as part of the error object in response to Service Fabric API operations that are not successful. Following are the error code values that can be returned for a specific HTTP status code.

      - Possible values of the error code for HTTP status code 400 (Bad Request)
        - "FABRIC_E_INVALID_PARTITION_KEY"
        - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
        - "FABRIC_E_INVALID_ADDRESS"
        - "FABRIC_E_APPLICATION_NOT_UPGRADING"
        - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
        - "FABRIC_E_FABRIC_NOT_UPGRADING"
        - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
        - "FABRIC_E_INVALID_CONFIGURATION"
        - "FABRIC_E_INVALID_NAME_URI"
        - "FABRIC_E_PATH_TOO_LONG"
        - "FABRIC_E_KEY_TOO_LARGE"
        - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
        - "FABRIC_E_INVALID_ATOMIC_GROUP"
        - "FABRIC_E_VALUE_EMPTY"

      - Possible values of the error code for HTTP status code 404 (Not Found)
        - "FABRIC_E_NODE_NOT_FOUND"
        - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
        - "FABRIC_E_APPLICATION_NOT_FOUND"
        - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
        - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
        - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
        - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
        - "FABRIC_E_PARTITION_NOT_FOUND"
        - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
        - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
        - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
        - "FABRIC_E_DIRECTORY_NOT_FOUND"
        - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
        - "FABRIC_E_FILE_NOT_FOUND"
        - "FABRIC_E_NAME_DOES_NOT_EXIST"
        - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
        - "FABRIC_E_ENUMERATION_COMPLETED"
        - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
        - "FABRIC_E_KEY_NOT_FOUND"
        - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"

      - Possible values of the error code for HTTP status code 409 (Conflict)
        - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
        - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
        - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
        - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
        - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
        - "FABRIC_E_SERVICE_ALREADY_EXISTS"
        - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
        - "FABRIC_E_APPLICATION_TYPE_IN_USE"
        - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
        - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
        - "FABRIC_E_FABRIC_VERSION_IN_USE"
        - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
        - "FABRIC_E_NAME_ALREADY_EXISTS"
        - "FABRIC_E_NAME_NOT_EMPTY"
        - "FABRIC_E_PROPERTY_CHECK_FAILED"
        - "FABRIC_E_SERVICE_METADATA_MISMATCH"
        - "FABRIC_E_SERVICE_TYPE_MISMATCH"
        - "FABRIC_E_HEALTH_STALE_REPORT"
        - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
        - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
        - "FABRIC_E_INSTANCE_ID_MISMATCH"

      - Possible values of the error code for HTTP status code 413 (Request Entity Too Large)
        - "FABRIC_E_VALUE_TOO_LARGE"

      - Possible values of the error code for HTTP status code 500 (Internal Server Error)
        - "FABRIC_E_NODE_IS_UP"

      - Possible values of the error code for HTTP status code 503 (Service Unavailable)
        - "FABRIC_E_NO_WRITE_QUORUM"
        - "FABRIC_E_NOT_PRIMARY"
        - "FABRIC_E_NOT_READY"
        - "FABRIC_E_RECONFIGURATION_PENDING"
        - "FABRIC_E_SERVICE_OFFLINE"
        - "E_ABORT"
        - "FABRIC_E_VALUE_TOO_LARGE"

      - Possible values of the error code for HTTP status code 504 (Gateway Timeout)
        - "FABRIC_E_COMMUNICATION_ERROR"
        - "FABRIC_E_OPERATION_NOT_COMPLETE"
        - "FABRIC_E_TIMEOUT"
  kind: enum
  properties:
  - types:
    - uid: string
    name: FABRIC_E_INVALID_PARTITION_KEY
  - types:
    - uid: string
    name: FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR
  - types:
    - uid: string
    name: FABRIC_E_INVALID_ADDRESS
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_NOT_UPGRADING
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_NOT_UPGRADING
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR
  - types:
    - uid: string
    name: FABRIC_E_INVALID_CONFIGURATION
  - types:
    - uid: string
    name: FABRIC_E_INVALID_NAME_URI
  - types:
    - uid: string
    name: FABRIC_E_PATH_TOO_LONG
  - types:
    - uid: string
    name: FABRIC_E_KEY_TOO_LARGE
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED
  - types:
    - uid: string
    name: FABRIC_E_INVALID_ATOMIC_GROUP
  - types:
    - uid: string
    name: FABRIC_E_VALUE_EMPTY
  - types:
    - uid: string
    name: FABRIC_E_NODE_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_TYPE_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_TYPE_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_DOES_NOT_EXIST
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_PARTITION_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_REPLICA_DOES_NOT_EXIST
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST
  - types:
    - uid: string
    name: FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_DIRECTORY_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_VERSION_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_FILE_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_NAME_DOES_NOT_EXIST
  - types:
    - uid: string
    name: FABRIC_E_PROPERTY_DOES_NOT_EXIST
  - types:
    - uid: string
    name: FABRIC_E_ENUMERATION_COMPLETED
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_MANIFEST_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_KEY_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_HEALTH_ENTITY_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_ALREADY_EXISTS
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_ALREADY_EXISTS
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_TYPE_IN_USE
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_VERSION_IN_USE
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS
  - types:
    - uid: string
    name: FABRIC_E_NAME_ALREADY_EXISTS
  - types:
    - uid: string
    name: FABRIC_E_NAME_NOT_EMPTY
  - types:
    - uid: string
    name: FABRIC_E_PROPERTY_CHECK_FAILED
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_METADATA_MISMATCH
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_TYPE_MISMATCH
  - types:
    - uid: string
    name: FABRIC_E_HEALTH_STALE_REPORT
  - types:
    - uid: string
    name: FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED
  - types:
    - uid: string
    name: FABRIC_E_NODE_HAS_NOT_STOPPED_YET
  - types:
    - uid: string
    name: FABRIC_E_INSTANCE_ID_MISMATCH
  - types:
    - uid: string
    name: FABRIC_E_VALUE_TOO_LARGE
  - types:
    - uid: string
    name: FABRIC_E_NO_WRITE_QUORUM
  - types:
    - uid: string
    name: FABRIC_E_NOT_PRIMARY
  - types:
    - uid: string
    name: FABRIC_E_NOT_READY
  - types:
    - uid: string
    name: FABRIC_E_RECONFIGURATION_PENDING
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_OFFLINE
  - types:
    - uid: string
    name: E_ABORT
  - types:
    - uid: string
    name: FABRIC_E_COMMUNICATION_ERROR
  - types:
    - uid: string
    name: FABRIC_E_OPERATION_NOT_COMPLETE
  - types:
    - uid: string
    name: FABRIC_E_TIMEOUT
  - types:
    - uid: string
    name: FABRIC_E_NODE_IS_UP
- name: ServiceTypeHealthPolicy
  description: >
    Represents the health policy used to evaluate the health of services belonging to a service type.
  kind: object
  properties:
  - description: >
      The maximum allowed percentage of unhealthy partitions per service. Allowed values are Byte values from zero to 100


      The percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service is considered in error.

      If the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning.

      The percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions in the service.

      The computation rounds up to tolerate one failure on small numbers of partitions. Default percentage is zero.
    types:
    - uid: integer
    name: MaxPercentUnhealthyPartitionsPerService
  - description: >
      The maximum allowed percentage of unhealthy replicas per partition. Allowed values are Byte values from zero to 100.


      The percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition is considered in error.

      If the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning.

      The percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in the partition.

      The computation rounds up to tolerate one failure on small numbers of replicas. Default percentage is zero.
    types:
    - uid: integer
    name: MaxPercentUnhealthyReplicasPerPartition
  - description: >
      The maximum maximum allowed percentage of unhealthy services. Allowed values are Byte values from zero to 100.


      The percentage represents the maximum tolerated percentage of services that can be unhealthy before the application is considered in error.

      If the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning.

      This is calculated by dividing the number of unhealthy services of the specific service type over the total number of services of the specific service type.

      The computation rounds up to tolerate one failure on small numbers of services. Default percentage is zero.
    types:
    - uid: integer
    name: MaxPercentUnhealthyServices
- name: ServiceTypeHealthPolicyMapItem
  description: >
    Defines a ServiceTypeHealthPolicy per service type name.


    The entries in the map replace the default service type health policy for each specified service type. For example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently. With policy per service type, there's more granular control of the health of the service.


    If no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation.
  kind: object
  properties:
  - description: The key of the service type health policy map item. This is the name of the service type.
    types:
    - uid: string
    name: Key
  - description: >
      Represents the health policy used to evaluate the health of services belonging to a service type.
    types:
    - uid: ServiceTypeHealthPolicy
    name: Value
examples: []
security: []
name: UpdateClusterUpgrade
uid: localhost:19080.servicefabric.updateclusterupgrade.updateclusterupgrade
