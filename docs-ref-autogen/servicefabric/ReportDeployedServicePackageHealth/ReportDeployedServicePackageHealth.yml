### YamlMime:RESTOperation
uid: localhost:19080.servicefabric.reportdeployedservicepackagehealth.reportdeployedservicepackagehealth
name: Report Deployed Service Package Health
service: Service Fabric
groupName: Report Deployed Service Package Health
apiVersion: 6.2.0.9
summary: "Sends a health report on the Service Fabric deployed service package.  \nReports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.\nThe report is sent to a Service Fabric gateway Service, which forwards to the health store.\nThe report may be accepted by the gateway, but rejected by the health store after extra validation.\nFor example, the health store may reject the report because of an invalid parameter, like a stale sequence number.\nTo see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section."
produces:
- application/json
paths:
- content: POST http://localhost:19080/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/ReportHealth?api-version=6.2.0.9
- content: POST http://localhost:19080/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/ReportHealth?api-version=6.2.0.9&Immediate={Immediate}&timeout={timeout}
  isOptional: true
uriParameters:
- name: nodeName
  in: path
  isRequired: true
  description: The name of the node.
  types:
  - uid: string
- name: applicationId
  in: path
  isRequired: true
  description: >-
    The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.

    Starting from version 6.0, hierarchical names are delimited with the "~" character.

    For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  types:
  - uid: string
- name: servicePackageName
  in: path
  isRequired: true
  description: The name of the service package.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: >-
    The version of the API. This parameter is required and its value must be '6.0'.


    Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.


    Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  types:
  - uid: ApiVersion_6-0_RequiredQueryParam
- name: Immediate
  in: query
  description: >-
    A flag which indicates whether the report should be sent immediately.

    A health report is sent to a Service Fabric gateway Application, which forwards to the health store.

    If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.

    This is useful for critical reports that should be sent as soon as possible.

    Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.

    If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.

    This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.

    By default, reports are not sent immediately.
  types:
  - uid: boolean
- name: timeout
  in: query
  description: The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  types:
  - uid: integer
  format: int64
responses:
- name: 200 OK
  description: A successful operation will return 200 status code.
- name: Other Status Codes
  description: The detailed error response.
  types:
  - uid: FabricError
requestBody:
- name: HealthEvent
  description: Represents health information reported on a health entity, such as cluster, application or node, with additional metadata added by the Health Manager.
  parameters:
  - name: SourceId
    in: body
    isRequired: true
    description: The source name which identifies the client/watchdog/system component which generated the health information.
    types:
    - uid: string
  - name: Property
    in: body
    isRequired: true
    description: >-
      The property of the health information. An entity can have health reports for different properties.

      The property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state condition that triggers the report.

      For example, a reporter with SourceId "LocalWatchdog" can monitor the state of the available disk on a node,

      so it can report "AvailableDisk" property on that node.

      The same reporter can monitor the node connectivity, so it can report a property "Connectivity" on the same node.

      In the health store, these reports are treated as separate health events for the specified node.


      Together with the SourceId, the property uniquely identifies the health information.
    types:
    - uid: string
  - name: HealthState
    in: body
    isRequired: true
    description: The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
    types:
    - uid: HealthState
  - name: TimeToLiveInMilliSeconds
    in: body
    description: >-
      The duration for which this health report is valid. This field uses ISO8601 format for specifying the duration.

      When clients report periodically, they should send reports with higher frequency than time to live.

      If clients report on transition, they can set the time to live to infinite.

      When time to live expires, the health event that contains the health information

      is either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired false.


      If not specified, time to live defaults to infinite value.
    types:
    - uid: string
  - name: Description
    in: body
    description: >-
      The description of the health information. It represents free text used to add human readable information about the report.

      The maximum string length for the description is 4096 characters.

      If the provided string is longer, it will be automatically truncated.

      When truncated, the last characters of the description contain a marker "[Truncated]", and total string size is 4096 characters.

      The presence of the marker indicates to users that truncation occurred.

      Note that when truncated, the description has less than 4096 characters from the original string.
    types:
    - uid: string
  - name: SequenceNumber
    in: body
    description: >-
      The sequence number for this health report as a numeric string.

      The report sequence number is used by the health store to detect stale reports.

      If not specified, a sequence number is auto-generated by the health client when a report is added.
    types:
    - uid: string
  - name: RemoveWhenExpired
    in: body
    description: >-
      Value that indicates whether the report is removed from health store when it expires.

      If set to true, the report is removed from the health store after it expires.

      If set to false, the report is treated as an error when expired. The value of this property is false by default.

      When clients report periodically, they should set RemoveWhenExpired false (default).

      This way, is the reporter has issues (eg. deadlock) and can't report, the entity is evaluated at error when the health report expires.

      This flags the entity as being in Error health state.
    types:
    - uid: boolean
  - name: IsExpired
    in: body
    description: Returns true if the health event is expired, otherwise false.
    types:
    - uid: boolean
  - name: SourceUtcTimestamp
    in: body
    description: The date and time when the health report was sent by the source.
    types:
    - uid: string
  - name: LastModifiedUtcTimestamp
    in: body
    description: The date and time when the health report was last modified by the health store.
    types:
    - uid: string
  - name: LastOkTransitionAt
    in: body
    description: >-
      If the current health state is 'Ok', this property returns the time at which the health report was first reported with 'Ok'.

      For periodic reporting, many reports with the same state may have been generated.

      This property returns the date and time when the first 'Ok' health report was received.


      If the current health state is 'Error' or 'Warning', returns the date and time at which the health state was last in 'Ok', before transitioning to a different state.


      If the health state was never 'Ok', the value will be zero date-time.
    types:
    - uid: string
  - name: LastWarningTransitionAt
    in: body
    description: >-
      If the current health state is 'Warning', this property returns the time at which the health report was first reported with 'Warning'. For periodic reporting, many reports with the same state may have been generated however, this property returns only the date and time at the first 'Warning' health report was received.


      If the current health state is 'Ok' or 'Error', returns the date and time at which the health state was last in 'Warning', before transitioning to a different state.


      If the health state was never 'Warning', the value will be zero date-time.
    types:
    - uid: string
  - name: LastErrorTransitionAt
    in: body
    description: >-
      If the current health state is 'Error', this property returns the time at which the health report was first reported with 'Error'. For periodic reporting, many reports with the same state may have been generated however, this property returns only the date and time at the first 'Error' health report was received.


      If the current health state is 'Ok' or 'Warning', returns the date and time at which the health state was last in 'Error', before transitioning to a different state.


      If the health state was never 'Error', the value will be zero date-time.
    types:
    - uid: string
requestHeader: []
definitions:
- name: HealthEvent
  description: Represents health information reported on a health entity, such as cluster, application or node, with additional metadata added by the Health Manager.
  kind: object
  properties:
  - name: SourceId
    description: The source name which identifies the client/watchdog/system component which generated the health information.
    types:
    - uid: string
  - name: Property
    description: >-
      The property of the health information. An entity can have health reports for different properties.

      The property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state condition that triggers the report.

      For example, a reporter with SourceId "LocalWatchdog" can monitor the state of the available disk on a node,

      so it can report "AvailableDisk" property on that node.

      The same reporter can monitor the node connectivity, so it can report a property "Connectivity" on the same node.

      In the health store, these reports are treated as separate health events for the specified node.


      Together with the SourceId, the property uniquely identifies the health information.
    types:
    - uid: string
  - name: HealthState
    description: The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
    types:
    - uid: HealthState
  - name: TimeToLiveInMilliSeconds
    description: >-
      The duration for which this health report is valid. This field uses ISO8601 format for specifying the duration.

      When clients report periodically, they should send reports with higher frequency than time to live.

      If clients report on transition, they can set the time to live to infinite.

      When time to live expires, the health event that contains the health information

      is either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired false.


      If not specified, time to live defaults to infinite value.
    types:
    - uid: string
  - name: Description
    description: >-
      The description of the health information. It represents free text used to add human readable information about the report.

      The maximum string length for the description is 4096 characters.

      If the provided string is longer, it will be automatically truncated.

      When truncated, the last characters of the description contain a marker "[Truncated]", and total string size is 4096 characters.

      The presence of the marker indicates to users that truncation occurred.

      Note that when truncated, the description has less than 4096 characters from the original string.
    types:
    - uid: string
  - name: SequenceNumber
    description: >-
      The sequence number for this health report as a numeric string.

      The report sequence number is used by the health store to detect stale reports.

      If not specified, a sequence number is auto-generated by the health client when a report is added.
    types:
    - uid: string
  - name: RemoveWhenExpired
    description: >-
      Value that indicates whether the report is removed from health store when it expires.

      If set to true, the report is removed from the health store after it expires.

      If set to false, the report is treated as an error when expired. The value of this property is false by default.

      When clients report periodically, they should set RemoveWhenExpired false (default).

      This way, is the reporter has issues (eg. deadlock) and can't report, the entity is evaluated at error when the health report expires.

      This flags the entity as being in Error health state.
    types:
    - uid: boolean
  - name: IsExpired
    description: Returns true if the health event is expired, otherwise false.
    types:
    - uid: boolean
  - name: SourceUtcTimestamp
    description: The date and time when the health report was sent by the source.
    types:
    - uid: string
  - name: LastModifiedUtcTimestamp
    description: The date and time when the health report was last modified by the health store.
    types:
    - uid: string
  - name: LastOkTransitionAt
    description: >-
      If the current health state is 'Ok', this property returns the time at which the health report was first reported with 'Ok'.

      For periodic reporting, many reports with the same state may have been generated.

      This property returns the date and time when the first 'Ok' health report was received.


      If the current health state is 'Error' or 'Warning', returns the date and time at which the health state was last in 'Ok', before transitioning to a different state.


      If the health state was never 'Ok', the value will be zero date-time.
    types:
    - uid: string
  - name: LastWarningTransitionAt
    description: >-
      If the current health state is 'Warning', this property returns the time at which the health report was first reported with 'Warning'. For periodic reporting, many reports with the same state may have been generated however, this property returns only the date and time at the first 'Warning' health report was received.


      If the current health state is 'Ok' or 'Error', returns the date and time at which the health state was last in 'Warning', before transitioning to a different state.


      If the health state was never 'Warning', the value will be zero date-time.
    types:
    - uid: string
  - name: LastErrorTransitionAt
    description: >-
      If the current health state is 'Error', this property returns the time at which the health report was first reported with 'Error'. For periodic reporting, many reports with the same state may have been generated however, this property returns only the date and time at the first 'Error' health report was received.


      If the current health state is 'Ok' or 'Warning', returns the date and time at which the health state was last in 'Error', before transitioning to a different state.


      If the health state was never 'Error', the value will be zero date-time.
    types:
    - uid: string
- name: ApiVersion_6-0_RequiredQueryParam
  description: >-
    The version of the API. This parameter is required and its value must be '6.0'.


    Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.


    Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  kind: enum
  properties:
  - name: "6.0"
    description: The 6.0 version of the API.
    types:
    - uid: string
- name: FabricError
  description: The REST API operations for Service Fabric return standard HTTP status codes. This type defines the additional information returned from the Service Fabric API operations that are not successful.
  kind: object
  properties:
  - name: Error
    description: Error object containing error code and error message.
    types:
    - uid: FabricErrorError
- name: HealthState
  description: The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
  kind: enum
  properties:
  - name: Invalid
    description: Indicates an invalid health state. All Service Fabric enumerations have the invalid type. The value is zero.
    types:
    - uid: string
  - name: Ok
    description: Indicates the health state is okay. The value is 1.
    types:
    - uid: string
  - name: Warning
    description: Indicates the health state is at a warning level. The value is 2.
    types:
    - uid: string
  - name: Error
    description: Indicates the health state is at an error level. Error health state should be investigated, as they can impact the correct functionality of the cluster. The value is 3.
    types:
    - uid: string
  - name: Unknown
    description: Indicates an unknown health status. The value is 65535.
    types:
    - uid: string
- name: FabricErrorError
  description: Error object containing error code and error message.
  kind: object
  properties:
  - name: Code
    description: >-
      Defines the fabric error codes that be returned as part of the error object in response to Service Fabric API operations that are not successful. Following are the error code values that can be returned for a specific HTTP status code.

        - Possible values of the error code for HTTP status code 400 (Bad Request)
          - "FABRIC_E_INVALID_PARTITION_KEY"
          - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
          - "FABRIC_E_INVALID_ADDRESS"
          - "FABRIC_E_APPLICATION_NOT_UPGRADING"
          - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
          - "FABRIC_E_FABRIC_NOT_UPGRADING"
          - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
          - "FABRIC_E_INVALID_CONFIGURATION"
          - "FABRIC_E_INVALID_NAME_URI"
          - "FABRIC_E_PATH_TOO_LONG"
          - "FABRIC_E_KEY_TOO_LARGE"
          - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
          - "FABRIC_E_INVALID_ATOMIC_GROUP"
          - "FABRIC_E_VALUE_EMPTY"
          - "FABRIC_E_BACKUP_IS_ENABLED"
          - "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH"
          - "FABRIC_E_INVALID_FOR_STATELESS_SERVICES"
          - "FABRIC_E_INVALID_SERVICE_SCALING_POLICY"
          - "E_INVALIDARG"

        - Possible values of the error code for HTTP status code 404 (Not Found)
          - "FABRIC_E_NODE_NOT_FOUND"
          - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
          - "FABRIC_E_APPLICATION_NOT_FOUND"
          - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
          - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
          - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
          - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
          - "FABRIC_E_PARTITION_NOT_FOUND"
          - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
          - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
          - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
          - "FABRIC_E_DIRECTORY_NOT_FOUND"
          - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
          - "FABRIC_E_FILE_NOT_FOUND"
          - "FABRIC_E_NAME_DOES_NOT_EXIST"
          - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
          - "FABRIC_E_ENUMERATION_COMPLETED"
          - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
          - "FABRIC_E_KEY_NOT_FOUND"
          - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"
          - "FABRIC_E_BACKUP_NOT_ENABLED"
          - "FABRIC_E_BACKUP_POLICY_NOT_EXISTING"
          - "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING"

        - Possible values of the error code for HTTP status code 409 (Conflict)
          - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
          - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
          - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
          - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
          - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
          - "FABRIC_E_SERVICE_ALREADY_EXISTS"
          - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
          - "FABRIC_E_APPLICATION_TYPE_IN_USE"
          - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
          - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
          - "FABRIC_E_FABRIC_VERSION_IN_USE"
          - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
          - "FABRIC_E_NAME_ALREADY_EXISTS"
          - "FABRIC_E_NAME_NOT_EMPTY"
          - "FABRIC_E_PROPERTY_CHECK_FAILED"
          - "FABRIC_E_SERVICE_METADATA_MISMATCH"
          - "FABRIC_E_SERVICE_TYPE_MISMATCH"
          - "FABRIC_E_HEALTH_STALE_REPORT"
          - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
          - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
          - "FABRIC_E_INSTANCE_ID_MISMATCH"
          - "FABRIC_E_BACKUP_IN_PROGRESS"
          - "FABRIC_E_RESTORE_IN_PROGRESS"
          - "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING"

        - Possible values of the error code for HTTP status code 413 (Request Entity Too Large)
          - "FABRIC_E_VALUE_TOO_LARGE"

        - Possible values of the error code for HTTP status code 500 (Internal Server Error)
          - "FABRIC_E_NODE_IS_UP"
          - "E_FAIL"

        - Possible values of the error code for HTTP status code 503 (Service Unavailable)
          - "FABRIC_E_NO_WRITE_QUORUM"
          - "FABRIC_E_NOT_PRIMARY"
          - "FABRIC_E_NOT_READY"
          - "FABRIC_E_RECONFIGURATION_PENDING"
          - "FABRIC_E_SERVICE_OFFLINE"
          - "E_ABORT"
          - "FABRIC_E_VALUE_TOO_LARGE"

        - Possible values of the error code for HTTP status code 504 (Gateway Timeout)
          - "FABRIC_E_COMMUNICATION_ERROR"
          - "FABRIC_E_OPERATION_NOT_COMPLETE"
          - "FABRIC_E_TIMEOUT"
    types:
    - uid: FabricErrorCodes
  - name: Message
    description: Error message.
    types:
    - uid: string
- name: FabricErrorCodes
  description: >-
    Defines the fabric error codes that be returned as part of the error object in response to Service Fabric API operations that are not successful. Following are the error code values that can be returned for a specific HTTP status code.

      - Possible values of the error code for HTTP status code 400 (Bad Request)
        - "FABRIC_E_INVALID_PARTITION_KEY"
        - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
        - "FABRIC_E_INVALID_ADDRESS"
        - "FABRIC_E_APPLICATION_NOT_UPGRADING"
        - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
        - "FABRIC_E_FABRIC_NOT_UPGRADING"
        - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
        - "FABRIC_E_INVALID_CONFIGURATION"
        - "FABRIC_E_INVALID_NAME_URI"
        - "FABRIC_E_PATH_TOO_LONG"
        - "FABRIC_E_KEY_TOO_LARGE"
        - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
        - "FABRIC_E_INVALID_ATOMIC_GROUP"
        - "FABRIC_E_VALUE_EMPTY"
        - "FABRIC_E_BACKUP_IS_ENABLED"
        - "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH"
        - "FABRIC_E_INVALID_FOR_STATELESS_SERVICES"
        - "FABRIC_E_INVALID_SERVICE_SCALING_POLICY"
        - "E_INVALIDARG"

      - Possible values of the error code for HTTP status code 404 (Not Found)
        - "FABRIC_E_NODE_NOT_FOUND"
        - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
        - "FABRIC_E_APPLICATION_NOT_FOUND"
        - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
        - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
        - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
        - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
        - "FABRIC_E_PARTITION_NOT_FOUND"
        - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
        - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
        - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
        - "FABRIC_E_DIRECTORY_NOT_FOUND"
        - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
        - "FABRIC_E_FILE_NOT_FOUND"
        - "FABRIC_E_NAME_DOES_NOT_EXIST"
        - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
        - "FABRIC_E_ENUMERATION_COMPLETED"
        - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
        - "FABRIC_E_KEY_NOT_FOUND"
        - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"
        - "FABRIC_E_BACKUP_NOT_ENABLED"
        - "FABRIC_E_BACKUP_POLICY_NOT_EXISTING"
        - "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING"

      - Possible values of the error code for HTTP status code 409 (Conflict)
        - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
        - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
        - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
        - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
        - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
        - "FABRIC_E_SERVICE_ALREADY_EXISTS"
        - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
        - "FABRIC_E_APPLICATION_TYPE_IN_USE"
        - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
        - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
        - "FABRIC_E_FABRIC_VERSION_IN_USE"
        - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
        - "FABRIC_E_NAME_ALREADY_EXISTS"
        - "FABRIC_E_NAME_NOT_EMPTY"
        - "FABRIC_E_PROPERTY_CHECK_FAILED"
        - "FABRIC_E_SERVICE_METADATA_MISMATCH"
        - "FABRIC_E_SERVICE_TYPE_MISMATCH"
        - "FABRIC_E_HEALTH_STALE_REPORT"
        - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
        - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
        - "FABRIC_E_INSTANCE_ID_MISMATCH"
        - "FABRIC_E_BACKUP_IN_PROGRESS"
        - "FABRIC_E_RESTORE_IN_PROGRESS"
        - "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING"

      - Possible values of the error code for HTTP status code 413 (Request Entity Too Large)
        - "FABRIC_E_VALUE_TOO_LARGE"

      - Possible values of the error code for HTTP status code 500 (Internal Server Error)
        - "FABRIC_E_NODE_IS_UP"
        - "E_FAIL"

      - Possible values of the error code for HTTP status code 503 (Service Unavailable)
        - "FABRIC_E_NO_WRITE_QUORUM"
        - "FABRIC_E_NOT_PRIMARY"
        - "FABRIC_E_NOT_READY"
        - "FABRIC_E_RECONFIGURATION_PENDING"
        - "FABRIC_E_SERVICE_OFFLINE"
        - "E_ABORT"
        - "FABRIC_E_VALUE_TOO_LARGE"

      - Possible values of the error code for HTTP status code 504 (Gateway Timeout)
        - "FABRIC_E_COMMUNICATION_ERROR"
        - "FABRIC_E_OPERATION_NOT_COMPLETE"
        - "FABRIC_E_TIMEOUT"
  kind: enum
  properties:
  - name: FABRIC_E_INVALID_PARTITION_KEY
    types:
    - uid: string
  - name: FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR
    types:
    - uid: string
  - name: FABRIC_E_INVALID_ADDRESS
    types:
    - uid: string
  - name: FABRIC_E_APPLICATION_NOT_UPGRADING
    types:
    - uid: string
  - name: FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR
    types:
    - uid: string
  - name: FABRIC_E_FABRIC_NOT_UPGRADING
    types:
    - uid: string
  - name: FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR
    types:
    - uid: string
  - name: FABRIC_E_INVALID_CONFIGURATION
    types:
    - uid: string
  - name: FABRIC_E_INVALID_NAME_URI
    types:
    - uid: string
  - name: FABRIC_E_PATH_TOO_LONG
    types:
    - uid: string
  - name: FABRIC_E_KEY_TOO_LARGE
    types:
    - uid: string
  - name: FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED
    types:
    - uid: string
  - name: FABRIC_E_INVALID_ATOMIC_GROUP
    types:
    - uid: string
  - name: FABRIC_E_VALUE_EMPTY
    types:
    - uid: string
  - name: FABRIC_E_NODE_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_APPLICATION_TYPE_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_APPLICATION_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_SERVICE_TYPE_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_SERVICE_DOES_NOT_EXIST
    types:
    - uid: string
  - name: FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_PARTITION_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_REPLICA_DOES_NOT_EXIST
    types:
    - uid: string
  - name: FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST
    types:
    - uid: string
  - name: FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_DIRECTORY_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_FABRIC_VERSION_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_FILE_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_NAME_DOES_NOT_EXIST
    types:
    - uid: string
  - name: FABRIC_E_PROPERTY_DOES_NOT_EXIST
    types:
    - uid: string
  - name: FABRIC_E_ENUMERATION_COMPLETED
    types:
    - uid: string
  - name: FABRIC_E_SERVICE_MANIFEST_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_KEY_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_HEALTH_ENTITY_NOT_FOUND
    types:
    - uid: string
  - name: FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS
    types:
    - uid: string
  - name: FABRIC_E_APPLICATION_ALREADY_EXISTS
    types:
    - uid: string
  - name: FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION
    types:
    - uid: string
  - name: FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS
    types:
    - uid: string
  - name: FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS
    types:
    - uid: string
  - name: FABRIC_E_SERVICE_ALREADY_EXISTS
    types:
    - uid: string
  - name: FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS
    types:
    - uid: string
  - name: FABRIC_E_APPLICATION_TYPE_IN_USE
    types:
    - uid: string
  - name: FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION
    types:
    - uid: string
  - name: FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS
    types:
    - uid: string
  - name: FABRIC_E_FABRIC_VERSION_IN_USE
    types:
    - uid: string
  - name: FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS
    types:
    - uid: string
  - name: FABRIC_E_NAME_ALREADY_EXISTS
    types:
    - uid: string
  - name: FABRIC_E_NAME_NOT_EMPTY
    types:
    - uid: string
  - name: FABRIC_E_PROPERTY_CHECK_FAILED
    types:
    - uid: string
  - name: FABRIC_E_SERVICE_METADATA_MISMATCH
    types:
    - uid: string
  - name: FABRIC_E_SERVICE_TYPE_MISMATCH
    types:
    - uid: string
  - name: FABRIC_E_HEALTH_STALE_REPORT
    types:
    - uid: string
  - name: FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED
    types:
    - uid: string
  - name: FABRIC_E_NODE_HAS_NOT_STOPPED_YET
    types:
    - uid: string
  - name: FABRIC_E_INSTANCE_ID_MISMATCH
    types:
    - uid: string
  - name: FABRIC_E_VALUE_TOO_LARGE
    types:
    - uid: string
  - name: FABRIC_E_NO_WRITE_QUORUM
    types:
    - uid: string
  - name: FABRIC_E_NOT_PRIMARY
    types:
    - uid: string
  - name: FABRIC_E_NOT_READY
    types:
    - uid: string
  - name: FABRIC_E_RECONFIGURATION_PENDING
    types:
    - uid: string
  - name: FABRIC_E_SERVICE_OFFLINE
    types:
    - uid: string
  - name: E_ABORT
    types:
    - uid: string
  - name: FABRIC_E_COMMUNICATION_ERROR
    types:
    - uid: string
  - name: FABRIC_E_OPERATION_NOT_COMPLETE
    types:
    - uid: string
  - name: FABRIC_E_TIMEOUT
    types:
    - uid: string
  - name: FABRIC_E_NODE_IS_UP
    types:
    - uid: string
  - name: E_FAIL
    types:
    - uid: string
  - name: FABRIC_E_BACKUP_IS_ENABLED
    types:
    - uid: string
  - name: FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH
    types:
    - uid: string
  - name: FABRIC_E_INVALID_FOR_STATELESS_SERVICES
    types:
    - uid: string
  - name: FABRIC_E_BACKUP_NOT_ENABLED
    types:
    - uid: string
  - name: FABRIC_E_BACKUP_POLICY_NOT_EXISTING
    types:
    - uid: string
  - name: FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING
    types:
    - uid: string
  - name: FABRIC_E_BACKUP_IN_PROGRESS
    types:
    - uid: string
  - name: FABRIC_E_RESTORE_IN_PROGRESS
    types:
    - uid: string
  - name: FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING
    types:
    - uid: string
  - name: FABRIC_E_INVALID_SERVICE_SCALING_POLICY
    types:
    - uid: string
  - name: E_INVALIDARG
    types:
    - uid: string
examples: []
security: []
