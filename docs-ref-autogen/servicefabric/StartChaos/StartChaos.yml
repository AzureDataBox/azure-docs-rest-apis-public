### YamlMime:RESTOperation
summary: >
  Starts Chaos in the cluster. If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.

  If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.

  Please refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-controlled-chaos) for more details.
service: Service Fabric
apiVersion: 6.0.0.1
groupName: Start Chaos
produces:
- application/json
paths:
- content: POST http://localhost:19080/Tools/Chaos/$/Start?api-version=6.0.0.1
- content: POST http://localhost:19080/Tools/Chaos/$/Start?api-version=6.0.0.1&timeout={timeout}
  isOptional: true
uriParameters:
- in: query
  isRequired: true
  description: The version of the API. This is a required parameter and it's value must be "6.0".
  types:
  - uid: string
  name: api-version
- in: query
  description: The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  types:
  - uid: integer
  format: int64
  name: timeout
responses:
- description: A successful operation will return 200 status code.
  name: 200 OK
- description: The detailed error response.
  types:
  - uid: FabricError
  name: Other Status Codes
requestBody:
- parameters:
  - in: body
    description: >
      Total time (in seconds) for which Chaos will run before automatically stopping. The maximum allowed value is 4,294,967,295 (System.UInt32.MaxValue).
    types:
    - uid: string
    name: TimeToRunInSeconds
  - in: body
    description: >
      The maximum amount of time to wait for all cluster entities to become stable and healthy. Chaos executes in iterations and at the start of each iteration it validates the health of cluster entities.

      During validation if a cluster entity is not stable and healthy within MaxClusterStabilizationTimeoutInSeconds, Chaos generates a validation failed event.
    types:
    - uid: integer
    name: MaxClusterStabilizationTimeoutInSeconds
  - in: body
    description: >
      MaxConcurrentFaults is the maximum number of concurrent faults induced per iteration.

      Chaos executes in iterations and two consecutive iterations are separated by a validation phase.

      The higher the concurrency, the more aggressive the injection of faults -- inducing more complex series of states to uncover bugs.

      The recommendation is to start with a value of 2 or 3 and to exercise caution while moving up.
    types:
    - uid: integer
    name: MaxConcurrentFaults
  - in: body
    description: >
      Enables or disables the move primary and move secondary faults.
    types:
    - uid: boolean
    name: EnableMoveReplicaFaults
  - in: body
    description: >
      Wait time (in seconds) between consecutive faults within a single iteration.

      The larger the value, the lower the overlapping between faults and the simpler the sequence of state transitions that the cluster goes through.

      The recommendation is to start with a value between 1 and 5 and exercise caution while moving up.
    types:
    - uid: integer
    name: WaitTimeBetweenFaultsInSeconds
  - in: body
    description: >
      Time-separation (in seconds) between two consecutive iterations of Chaos.

      The larger the value, the lower the fault injection rate.
    types:
    - uid: integer
    name: WaitTimeBetweenIterationsInSeconds
  - in: body
    description: >
      Defines a health policy used to evaluate the health of the cluster or of a cluster node.
    types:
    - uid: ClusterHealthPolicy
    name: ClusterHealthPolicy
  - in: body
    description: >
      Describes a map, which is a collection of (string, string) type key-value pairs. The map can be used to record information about

      the Chaos run. There cannot be more than 100 such pairs and each string (key or value) can be at most 4095 characters long.

      This map is set by the starter of the Chaos run to optionally store the context about the specific run.
    types:
    - uid: ChaosContext
    name: Context
requestHeader: []
definitions:
- name: ClusterHealthPolicy
  description: >
    Defines a health policy used to evaluate the health of the cluster or of a cluster node.
  kind: object
  properties:
  - description: Indicates whether warnings are treated with the same severity as errors.
    types:
    - uid: boolean
    name: ConsiderWarningAsError
  - description: >
      The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.


      The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.

      If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.

      The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.

      The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.


      In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
    types:
    - uid: integer
    name: MaxPercentUnhealthyNodes
  - description: >
      The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.


      The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.

      If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.

      This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.

      The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
    types:
    - uid: integer
    name: MaxPercentUnhealthyApplications
  - description: >
      Defines a map with max percentage unhealthy applications for specific application types.

      Each entry specifies as key the application type name and as value an integer that represents the MaxPercentUnhealthyApplications percentage used to evaluate the applications of the specified application type.


      The application type health policy map can be used during cluster health evaluation to describe special application types.

      The application types included in the map are evaluated against the percentage specified in the map, and not with the global MaxPercentUnhealthyApplications defined in the cluster health policy.

      The applications of application types specified in the map are not counted against the global pool of applications.

      For example, if some applications of a type are critical, the cluster administrator can add an entry to the map for that application type

      and assign it a value of 0% (that is, do not tolerate any failures).

      All other applications can be evaluated with MaxPercentUnhealthyApplications set to 20% to tolerate some failures out of the thousands of application instances.

      The application type health policy map is used only if the cluster manifest enables application type health evaluation using the configuration entry for HealthManager/EnableApplicationTypeHealthEvaluation.
    types:
    - uid: ApplicationTypeHealthPolicyMapItem
    name: ApplicationTypeHealthPolicyMap
- name: ChaosContext
  description: >
    Describes a map, which is a collection of (string, string) type key-value pairs. The map can be used to record information about

    the Chaos run. There cannot be more than 100 such pairs and each string (key or value) can be at most 4095 characters long.

    This map is set by the starter of the Chaos run to optionally store the context about the specific run.
  kind: object
  properties:
  - description: >
      Describes a map that contains a collection of ChaosContextMapItem's.
    types:
    - uid: object
    name: Map
- name: FabricError
  description: >
    The REST API operations for Service Fabric return standard HTTP status codes. This type defines the additional information returned from the Service Fabric API operations that are not successful.
  kind: object
  properties:
  - description: Error object containing error code and error message.
    types:
    - uid: FabricError_Error
    name: Error
- name: ChaosParameters
  description: >
    Defines all the parameters to configure a Chaos run.
  kind: object
  properties:
  - description: >
      Total time (in seconds) for which Chaos will run before automatically stopping. The maximum allowed value is 4,294,967,295 (System.UInt32.MaxValue).
    types:
    - uid: string
    name: TimeToRunInSeconds
  - description: >
      The maximum amount of time to wait for all cluster entities to become stable and healthy. Chaos executes in iterations and at the start of each iteration it validates the health of cluster entities.

      During validation if a cluster entity is not stable and healthy within MaxClusterStabilizationTimeoutInSeconds, Chaos generates a validation failed event.
    types:
    - uid: integer
    name: MaxClusterStabilizationTimeoutInSeconds
  - description: >
      MaxConcurrentFaults is the maximum number of concurrent faults induced per iteration.

      Chaos executes in iterations and two consecutive iterations are separated by a validation phase.

      The higher the concurrency, the more aggressive the injection of faults -- inducing more complex series of states to uncover bugs.

      The recommendation is to start with a value of 2 or 3 and to exercise caution while moving up.
    types:
    - uid: integer
    name: MaxConcurrentFaults
  - description: >
      Enables or disables the move primary and move secondary faults.
    types:
    - uid: boolean
    name: EnableMoveReplicaFaults
  - description: >
      Wait time (in seconds) between consecutive faults within a single iteration.

      The larger the value, the lower the overlapping between faults and the simpler the sequence of state transitions that the cluster goes through.

      The recommendation is to start with a value between 1 and 5 and exercise caution while moving up.
    types:
    - uid: integer
    name: WaitTimeBetweenFaultsInSeconds
  - description: >
      Time-separation (in seconds) between two consecutive iterations of Chaos.

      The larger the value, the lower the fault injection rate.
    types:
    - uid: integer
    name: WaitTimeBetweenIterationsInSeconds
  - description: >
      Defines a health policy used to evaluate the health of the cluster or of a cluster node.
    types:
    - uid: ClusterHealthPolicy
    name: ClusterHealthPolicy
  - description: >
      Describes a map, which is a collection of (string, string) type key-value pairs. The map can be used to record information about

      the Chaos run. There cannot be more than 100 such pairs and each string (key or value) can be at most 4095 characters long.

      This map is set by the starter of the Chaos run to optionally store the context about the specific run.
    types:
    - uid: ChaosContext
    name: Context
- name: ApplicationTypeHealthPolicyMapItem
  description: >
    Defines an item in ApplicationTypeHealthPolicyMap.
  kind: object
  properties:
  - description: The key of the application type health policy map item. This is the name of the application type.
    types:
    - uid: string
    name: Key
  - description: >
      The value of the application type health policy map item.

      The max percent unhealthy applications allowed for the application type. Must be between zero and 100.
    types:
    - uid: integer
    name: Value
- name: FabricError_Error
  description: Error object containing error code and error message.
  kind: object
  properties:
  - description: >
      Defines the fabric error codes that be returned as part of the error object in response to Service Fabric API operations that are not successful. Following are the error code values that can be returned for a specific HTTP status code.

        - Possible values of the error code for HTTP status code 400 (Bad Request)
          - "FABRIC_E_INVALID_PARTITION_KEY"
          - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
          - "FABRIC_E_INVALID_ADDRESS"
          - "FABRIC_E_APPLICATION_NOT_UPGRADING"
          - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
          - "FABRIC_E_FABRIC_NOT_UPGRADING"
          - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
          - "FABRIC_E_INVALID_CONFIGURATION"
          - "FABRIC_E_INVALID_NAME_URI"
          - "FABRIC_E_PATH_TOO_LONG"
          - "FABRIC_E_KEY_TOO_LARGE"
          - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
          - "FABRIC_E_INVALID_ATOMIC_GROUP"
          - "FABRIC_E_VALUE_EMPTY"

        - Possible values of the error code for HTTP status code 404 (Not Found)
          - "FABRIC_E_NODE_NOT_FOUND"
          - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
          - "FABRIC_E_APPLICATION_NOT_FOUND"
          - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
          - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
          - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
          - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
          - "FABRIC_E_PARTITION_NOT_FOUND"
          - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
          - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
          - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
          - "FABRIC_E_DIRECTORY_NOT_FOUND"
          - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
          - "FABRIC_E_FILE_NOT_FOUND"
          - "FABRIC_E_NAME_DOES_NOT_EXIST"
          - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
          - "FABRIC_E_ENUMERATION_COMPLETED"
          - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
          - "FABRIC_E_KEY_NOT_FOUND"
          - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"

        - Possible values of the error code for HTTP status code 409 (Conflict)
          - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
          - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
          - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
          - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
          - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
          - "FABRIC_E_SERVICE_ALREADY_EXISTS"
          - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
          - "FABRIC_E_APPLICATION_TYPE_IN_USE"
          - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
          - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
          - "FABRIC_E_FABRIC_VERSION_IN_USE"
          - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
          - "FABRIC_E_NAME_ALREADY_EXISTS"
          - "FABRIC_E_NAME_NOT_EMPTY"
          - "FABRIC_E_PROPERTY_CHECK_FAILED"
          - "FABRIC_E_SERVICE_METADATA_MISMATCH"
          - "FABRIC_E_SERVICE_TYPE_MISMATCH"
          - "FABRIC_E_HEALTH_STALE_REPORT"
          - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
          - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
          - "FABRIC_E_INSTANCE_ID_MISMATCH"

        - Possible values of the error code for HTTP status code 413 (Request Entity Too Large)
          - "FABRIC_E_VALUE_TOO_LARGE"

        - Possible values of the error code for HTTP status code 500 (Internal Server Error)
          - "FABRIC_E_NODE_IS_UP"

        - Possible values of the error code for HTTP status code 503 (Service Unavailable)
          - "FABRIC_E_NO_WRITE_QUORUM"
          - "FABRIC_E_NOT_PRIMARY"
          - "FABRIC_E_NOT_READY"
          - "FABRIC_E_RECONFIGURATION_PENDING"
          - "FABRIC_E_SERVICE_OFFLINE"
          - "E_ABORT"
          - "FABRIC_E_VALUE_TOO_LARGE"

        - Possible values of the error code for HTTP status code 504 (Gateway Timeout)
          - "FABRIC_E_COMMUNICATION_ERROR"
          - "FABRIC_E_OPERATION_NOT_COMPLETE"
          - "FABRIC_E_TIMEOUT"
    types:
    - uid: FabricErrorCodes
    name: Code
  - description: Error message.
    types:
    - uid: string
    name: Message
- name: Int64RangePartitionInformation
  description: Describes the partition information for the integer range that is based on partition schemes.
  kind: object
  properties:
  - description: Specifies the minimum key value handled by this partition.
    types:
    - uid: string
    name: LowKey
  - description: Specifies the maximum key value handled by this partition.
    types:
    - uid: string
    name: HighKey
  - description: >
      The kind of partitioning scheme used to partition the service. Possible values are following.

          -	Invalid - Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
          -	Singleton - Indicates that there is only one partition, and SingletonPartitionSchemeDescription was specified while creating the service. The value is 1.
          -	Int64Range - Indicates that the partition is based on Int64 key ranges, and UniformInt64RangePartitionSchemeDescription was specified while creating the service. The value is 2.
          -	Named - Indicates that the partition is based on string names, and NamedPartitionInformation  was specified while creating the service. The value is 3.
    types:
    - uid: Int64Range
    typesTitle: string
    name: ServicePartitionKind
  - description: An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.
    types:
    - uid: string
    name: Id
- name: NamedPartitionInformation
  description: Describes the partition information for the name as a string that is based on partition schemes.
  kind: object
  properties:
  - description: Name of the partition.
    types:
    - uid: string
    name: Name
  - description: >
      The kind of partitioning scheme used to partition the service. Possible values are following.

          -	Invalid - Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
          -	Singleton - Indicates that there is only one partition, and SingletonPartitionSchemeDescription was specified while creating the service. The value is 1.
          -	Int64Range - Indicates that the partition is based on Int64 key ranges, and UniformInt64RangePartitionSchemeDescription was specified while creating the service. The value is 2.
          -	Named - Indicates that the partition is based on string names, and NamedPartitionInformation  was specified while creating the service. The value is 3.
    types:
    - uid: Named
    typesTitle: string
    name: ServicePartitionKind
  - description: An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.
    types:
    - uid: string
    name: Id
- name: EnsureAvailabilitySafetyCheck
  description: Safety check that waits to ensure the availability of the partition. It waits until there are replicas available such that bringing down this replica will not cause availability loss for the partition.
  kind: object
  properties:
  - description: >
      The kind of safety check performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state. Following are the kinds of safety checks.


      - Invalid - Indicates that the upgrade safety check kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - EnsureSeedNodeQuorum - Indicates that if we bring down the node then this will result in global seed node quorum loss. The value is 1.

      - EnsurePartitionQuorum - Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition. The value is 2.

      - WaitForPrimaryPlacement - Indicates that there is some replica on the node that was moved out of this node due to upgrade. Service Fabric is now waiting for the primary to be moved back to this node. The value is 3.

      - WaitForPrimarySwap - Indicates that Service Fabric is waiting for a primary replica to be moved out of the node before starting upgrade on that node. The value is 4.

      - WaitForReconfiguration - Indicates that there is some replica on the node that is involved in a reconfiguration. Service Fabric is waiting for the reconfiguration to be complete before staring upgrade on that node. The value is 5.

      - WaitForInbuildReplica - Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying data to some other replica. In both cases, bringing down the replica on the node due to upgrade will abort the copy. The value is 6.

      - EnsureAvailability - Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the node for which the partition is quorum loss. In both cases, bringing down the replicas due to upgrade will result in loss of availability. The value is 7.
    types:
    - uid: EnsureAvailability
    typesTitle: string
    name: Kind
  - description: An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.
    types:
    - uid: string
    name: PartitionId
- name: EnsurePartitionQurumSafetyCheck
  description: Safety check that ensures that a quorum of replicas are not lost for a partition.
  kind: object
  properties:
  - description: >
      The kind of safety check performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state. Following are the kinds of safety checks.


      - Invalid - Indicates that the upgrade safety check kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - EnsureSeedNodeQuorum - Indicates that if we bring down the node then this will result in global seed node quorum loss. The value is 1.

      - EnsurePartitionQuorum - Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition. The value is 2.

      - WaitForPrimaryPlacement - Indicates that there is some replica on the node that was moved out of this node due to upgrade. Service Fabric is now waiting for the primary to be moved back to this node. The value is 3.

      - WaitForPrimarySwap - Indicates that Service Fabric is waiting for a primary replica to be moved out of the node before starting upgrade on that node. The value is 4.

      - WaitForReconfiguration - Indicates that there is some replica on the node that is involved in a reconfiguration. Service Fabric is waiting for the reconfiguration to be complete before staring upgrade on that node. The value is 5.

      - WaitForInbuildReplica - Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying data to some other replica. In both cases, bringing down the replica on the node due to upgrade will abort the copy. The value is 6.

      - EnsureAvailability - Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the node for which the partition is quorum loss. In both cases, bringing down the replicas due to upgrade will result in loss of availability. The value is 7.
    types:
    - uid: EnsurePartitionQuorum
    typesTitle: string
    name: Kind
  - description: An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.
    types:
    - uid: string
    name: PartitionId
- name: SeedNodeSafetyCheck
  description: Represents a safety check for the seed nodes being performed by service fabric before continuing with node level operations.
  kind: object
  properties:
  - description: >
      The kind of safety check performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state. Following are the kinds of safety checks.


      - Invalid - Indicates that the upgrade safety check kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - EnsureSeedNodeQuorum - Indicates that if we bring down the node then this will result in global seed node quorum loss. The value is 1.

      - EnsurePartitionQuorum - Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition. The value is 2.

      - WaitForPrimaryPlacement - Indicates that there is some replica on the node that was moved out of this node due to upgrade. Service Fabric is now waiting for the primary to be moved back to this node. The value is 3.

      - WaitForPrimarySwap - Indicates that Service Fabric is waiting for a primary replica to be moved out of the node before starting upgrade on that node. The value is 4.

      - WaitForReconfiguration - Indicates that there is some replica on the node that is involved in a reconfiguration. Service Fabric is waiting for the reconfiguration to be complete before staring upgrade on that node. The value is 5.

      - WaitForInbuildReplica - Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying data to some other replica. In both cases, bringing down the replica on the node due to upgrade will abort the copy. The value is 6.

      - EnsureAvailability - Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the node for which the partition is quorum loss. In both cases, bringing down the replicas due to upgrade will result in loss of availability. The value is 7.
    types:
    - uid: EnsureSeedNodeQuorum
    typesTitle: string
    name: Kind
- name: ServicePlacementNonPartiallyPlaceServicePolicyDescription
  description: >
    Describes the policy to be used for placement of a Service Fabric service where all replicas must be able to be placed in order for any replicas to be created.
  kind: object
  properties:
  - description: >
      The type of placement policy for a service fabric service. Following are the possible values.

        - Invalid - Indicates the type of the placement policy is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
        - InvalidDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 1.
        - RequiredDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 2.
        - PreferredPrimaryDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 3.
        - RequiredDomainDistribution - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 4.
        - NonPartiallyPlaceService - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 5.
    types:
    - uid: NonPartiallyPlaceService
    typesTitle: string
    name: Type
- name: SingletonPartitionInformation
  description: Information about a partition that is singleton. The services with singletone partitioning scheme are effectively non-partitioned. They only have one partition.
  kind: object
  properties:
  - description: >
      The kind of partitioning scheme used to partition the service. Possible values are following.

          -	Invalid - Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
          -	Singleton - Indicates that there is only one partition, and SingletonPartitionSchemeDescription was specified while creating the service. The value is 1.
          -	Int64Range - Indicates that the partition is based on Int64 key ranges, and UniformInt64RangePartitionSchemeDescription was specified while creating the service. The value is 2.
          -	Named - Indicates that the partition is based on string names, and NamedPartitionInformation  was specified while creating the service. The value is 3.
    types:
    - uid: Singleton
    typesTitle: string
    name: ServicePartitionKind
  - description: An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.
    types:
    - uid: string
    name: Id
- name: StatefulServicePartitionInfo
  description: Information about a partition of a stateful Service Fabric service..
  kind: object
  properties:
  - description: The target replica set size as a number.
    types:
    - uid: integer
    name: TargetReplicaSetSize
  - description: The minimum replica set size as a number.
    types:
    - uid: integer
    name: MinReplicaSetSize
  - description: The duration for which this partition was in quorum loss. If the partition is currently in quorum loss, it returns the duration since it has been in that state. This field is using ISO8601 format for specifying the duration.
    types:
    - uid: string
    name: LastQuorumLossDuration
  - description: >
      An Epoch is a configuration number for the partition as a whole. When the configuration of the replica set changes, for example when the Primary replica changes, the operations that are replicated from the new Primary replica are said to be a new Epoch from the ones which were sent by the old Primary replica.
    types:
    - uid: Epoch
    name: CurrentConfigurationEpoch
  - description: >
      The kind of service (Stateless or Stateful). Following are the possible values.


      - Invalid - Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Stateless - Does not use Service Fabric to make its state highly available or reliable. The value is 1.

      - Stateful - Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
    types:
    - uid: Stateful
    typesTitle: string
    name: ServiceKind
  - description: >
      The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.

        - Invalid - Indicates an invalid health state. All Service Fabric enumerations have the invalid type. The value is zero.
        - Ok - Indicates the health state is okay. The value is 1.
        - Warning - Indicates the health state is at a warning level. The value is 2.
        - Error - Indicates the health state is at an error level. Error health state should be investigated, as they can impact the correct functionality of the cluster. The value is 3.
        - Unknown - Indicates an unknown health status. The value is 65535.
    types:
    - uid: HealthState
    name: HealthState
  - description: >
      The status of the service fabric service partition. Possible values are following.

        - Invalid - Indicates the partition status is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
        - Ready - Indicates that the partition is ready. This means that for a stateless service partition there is atleast one instance that is up and for a stateful service partition the number of ready replicas is greater than or equal to the MinReplicaSetSize. The value is 1.
        - NotReady - Indicates that the partition is not ready. This status is returned when none of the other states apply. The value is 2.
        - InQuorumLoss  - Indicates that the partition is in quorum loss. This means that number of replicas that are up and participating in a replica set is less than MinReplicaSetSize for this partition. The value is 3.
        - Reconfiguring - Indicates that the partition is undergoing reconfiguration of its replica sets. This can happen due to failover, upgrade, load balancing or addition or removal of replicas from the replica set. The value is 4.
        - Deleting - Indicates that the partition is being deleted. The value is 5.
    types:
    - uid: ServicePartitionStatus
    name: PartitionStatus
  - description: Information about the partition identity, partitioning scheme and keys supported by it.
    types:
    - uid: Int64RangePartitionInformation
    - uid: NamedPartitionInformation
    - uid: SingletonPartitionInformation
    typesTitle: PartitionInformation
    name: PartitionInformation
- name: StatefulServiceTypeDescription
  description: Describes a stateful service type defined in the service manifest of a provisioned application type.
  kind: object
  properties:
  - description: A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false.
    types:
    - uid: boolean
    name: HasPersistedState
  - description: >
      The kind of service (Stateless or Stateful). Following are the possible values.


      - Invalid - Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Stateless - Does not use Service Fabric to make its state highly available or reliable. The value is 1.

      - Stateful - Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
    types:
    - uid: Stateful
    typesTitle: string
    name: Kind
  - description: Indicates whether the service type is a stateful service type or a stateless service type. This property is true if the service type is a stateful service type, false otherwise.
    types:
    - uid: boolean
    name: IsStateful
  - description: Name of the service type as specified in the service manifest.
    types:
    - uid: string
    name: ServiceTypeName
  - description: The placement constraint to be used when instantiating this service in a Service Fabric cluster.
    types:
    - uid: string
    name: PlacementConstraints
  - description: List of service placement policy descriptions.
    types:
    - isArray: true
      uid: ServicePlacementInvalidDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementNonPartiallyPlaceServicePolicyDescription
    - isArray: true
      uid: ServicePlacementPreferPrimaryDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementRequiredDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementRequireDomainDistributionPolicyDescription
    typesTitle: ServicePlacementPolicyDescription[]
    name: ServicePlacementPolicies
  - description: List of service type extensions.
    types:
    - uid: ServiceTypeExtensionDescription
    name: Extensions
- name: StatelessServiceInfo
  description: Information about a stateless Service Fabric service.
  kind: object
  properties:
  - description: >
      The identity of the service. This is an encoded representation of the service name. This is used in the REST APIs to identify the service resource.


      Starting in version 6.0, hierarchical names are delimited with the "~" character. For example, if the service name is "fabric://myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
    types:
    - uid: string
    name: Id
  - description: >
      The kind of service (Stateless or Stateful). Following are the possible values.


      - Invalid - Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Stateless - Does not use Service Fabric to make its state highly available or reliable. The value is 1.

      - Stateful - Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
    types:
    - uid: Stateless
    typesTitle: string
    name: ServiceKind
  - description: The full name of the service with 'fabric:' URI scheme.
    types:
    - uid: string
    name: Name
  - description: Name of the service type as specified in the service manifest.
    types:
    - uid: string
    name: TypeName
  - description: The version of the service manifest.
    types:
    - uid: string
    name: ManifestVersion
  - description: >
      The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.

        - Invalid - Indicates an invalid health state. All Service Fabric enumerations have the invalid type. The value is zero.
        - Ok - Indicates the health state is okay. The value is 1.
        - Warning - Indicates the health state is at a warning level. The value is 2.
        - Error - Indicates the health state is at an error level. Error health state should be investigated, as they can impact the correct functionality of the cluster. The value is 3.
        - Unknown - Indicates an unknown health status. The value is 65535.
    types:
    - uid: HealthState
    name: HealthState
  - description: >
      The status of the application. Possible values are:


      - Unknown - Indicates the service status is unknown. The value is zero.

      - Active - Indicates the service status is active. The value is 1.

      - Upgrading - Indicates the service is upgrading. The value is 2.

      - Deleting - Indicates the service is being deleted. The value is 3.

      - Creating - Indicates the service is being created. The value is 4.

      - Failed - Indicates creation or deletion was terminated due to persistent failures. Another create/delete request can be accepted. The value is 5.
    types:
    - uid: ServiceStatus
    name: ServiceStatus
  - description: Whether the service is in a service group.
    types:
    - uid: boolean
    name: IsServiceGroup
- name: StatelessServicePartitionInfo
  description: Information about a partition of a stateless Service Fabric service.
  kind: object
  properties:
  - description: Number of instances of this partition.
    types:
    - uid: integer
    name: InstanceCount
  - description: >
      The kind of service (Stateless or Stateful). Following are the possible values.


      - Invalid - Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Stateless - Does not use Service Fabric to make its state highly available or reliable. The value is 1.

      - Stateful - Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
    types:
    - uid: Stateless
    typesTitle: string
    name: ServiceKind
  - description: >
      The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.

        - Invalid - Indicates an invalid health state. All Service Fabric enumerations have the invalid type. The value is zero.
        - Ok - Indicates the health state is okay. The value is 1.
        - Warning - Indicates the health state is at a warning level. The value is 2.
        - Error - Indicates the health state is at an error level. Error health state should be investigated, as they can impact the correct functionality of the cluster. The value is 3.
        - Unknown - Indicates an unknown health status. The value is 65535.
    types:
    - uid: HealthState
    name: HealthState
  - description: >
      The status of the service fabric service partition. Possible values are following.

        - Invalid - Indicates the partition status is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
        - Ready - Indicates that the partition is ready. This means that for a stateless service partition there is atleast one instance that is up and for a stateful service partition the number of ready replicas is greater than or equal to the MinReplicaSetSize. The value is 1.
        - NotReady - Indicates that the partition is not ready. This status is returned when none of the other states apply. The value is 2.
        - InQuorumLoss  - Indicates that the partition is in quorum loss. This means that number of replicas that are up and participating in a replica set is less than MinReplicaSetSize for this partition. The value is 3.
        - Reconfiguring - Indicates that the partition is undergoing reconfiguration of its replica sets. This can happen due to failover, upgrade, load balancing or addition or removal of replicas from the replica set. The value is 4.
        - Deleting - Indicates that the partition is being deleted. The value is 5.
    types:
    - uid: ServicePartitionStatus
    name: PartitionStatus
  - description: Information about the partition identity, partitioning scheme and keys supported by it.
    types:
    - uid: Int64RangePartitionInformation
    - uid: NamedPartitionInformation
    - uid: SingletonPartitionInformation
    typesTitle: PartitionInformation
    name: PartitionInformation
- name: StatelessServiceTypeDescription
  description: Describes a stateless service type defined in the service manifest of a provisioned application type.
  kind: object
  properties:
  - description: A flag indicating if this type is not implemented and hosted by a user service process, but is implicitly hosted by a system created process. This value is true for services using the guest executable services, false otherwise.
    types:
    - uid: boolean
    name: UseImplicitHost
  - description: >
      The kind of service (Stateless or Stateful). Following are the possible values.


      - Invalid - Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Stateless - Does not use Service Fabric to make its state highly available or reliable. The value is 1.

      - Stateful - Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
    types:
    - uid: Stateless
    typesTitle: string
    name: Kind
  - description: Indicates whether the service type is a stateful service type or a stateless service type. This property is true if the service type is a stateful service type, false otherwise.
    types:
    - uid: boolean
    name: IsStateful
  - description: Name of the service type as specified in the service manifest.
    types:
    - uid: string
    name: ServiceTypeName
  - description: The placement constraint to be used when instantiating this service in a Service Fabric cluster.
    types:
    - uid: string
    name: PlacementConstraints
  - description: List of service placement policy descriptions.
    types:
    - isArray: true
      uid: ServicePlacementInvalidDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementNonPartiallyPlaceServicePolicyDescription
    - isArray: true
      uid: ServicePlacementPreferPrimaryDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementRequiredDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementRequireDomainDistributionPolicyDescription
    typesTitle: ServicePlacementPolicyDescription[]
    name: ServicePlacementPolicies
  - description: List of service type extensions.
    types:
    - uid: ServiceTypeExtensionDescription
    name: Extensions
- name: WaitForInbuildReplicaSafetyCheck
  description: Safety check that waits for the replica build operation to finish. This indiciates that there is a replica that is going through the copy or is providing data for building another replica. Bring the node down will abort this copy operation which are typoically expensive involving data movements.
  kind: object
  properties:
  - description: >
      The kind of safety check performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state. Following are the kinds of safety checks.


      - Invalid - Indicates that the upgrade safety check kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - EnsureSeedNodeQuorum - Indicates that if we bring down the node then this will result in global seed node quorum loss. The value is 1.

      - EnsurePartitionQuorum - Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition. The value is 2.

      - WaitForPrimaryPlacement - Indicates that there is some replica on the node that was moved out of this node due to upgrade. Service Fabric is now waiting for the primary to be moved back to this node. The value is 3.

      - WaitForPrimarySwap - Indicates that Service Fabric is waiting for a primary replica to be moved out of the node before starting upgrade on that node. The value is 4.

      - WaitForReconfiguration - Indicates that there is some replica on the node that is involved in a reconfiguration. Service Fabric is waiting for the reconfiguration to be complete before staring upgrade on that node. The value is 5.

      - WaitForInbuildReplica - Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying data to some other replica. In both cases, bringing down the replica on the node due to upgrade will abort the copy. The value is 6.

      - EnsureAvailability - Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the node for which the partition is quorum loss. In both cases, bringing down the replicas due to upgrade will result in loss of availability. The value is 7.
    types:
    - uid: WaitForInbuildReplica
    typesTitle: string
    name: Kind
  - description: An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.
    types:
    - uid: string
    name: PartitionId
- name: WaitForPrimaryPlacementSafetyCheck
  description: Safety check that waits for the primary replica that was moved out of the node due to upgrade to be placed back again on that node.
  kind: object
  properties:
  - description: >
      The kind of safety check performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state. Following are the kinds of safety checks.


      - Invalid - Indicates that the upgrade safety check kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - EnsureSeedNodeQuorum - Indicates that if we bring down the node then this will result in global seed node quorum loss. The value is 1.

      - EnsurePartitionQuorum - Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition. The value is 2.

      - WaitForPrimaryPlacement - Indicates that there is some replica on the node that was moved out of this node due to upgrade. Service Fabric is now waiting for the primary to be moved back to this node. The value is 3.

      - WaitForPrimarySwap - Indicates that Service Fabric is waiting for a primary replica to be moved out of the node before starting upgrade on that node. The value is 4.

      - WaitForReconfiguration - Indicates that there is some replica on the node that is involved in a reconfiguration. Service Fabric is waiting for the reconfiguration to be complete before staring upgrade on that node. The value is 5.

      - WaitForInbuildReplica - Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying data to some other replica. In both cases, bringing down the replica on the node due to upgrade will abort the copy. The value is 6.

      - EnsureAvailability - Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the node for which the partition is quorum loss. In both cases, bringing down the replicas due to upgrade will result in loss of availability. The value is 7.
    types:
    - uid: WaitForPrimaryPlacement
    typesTitle: string
    name: Kind
  - description: An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.
    types:
    - uid: string
    name: PartitionId
- name: WaitForPrimarySwapSafetyCheck
  description: Safety check that waits for the primary replica to be moved out of the node before starting an upgrade to ensure the availability of the primary replica for the partition.
  kind: object
  properties:
  - description: >
      The kind of safety check performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state. Following are the kinds of safety checks.


      - Invalid - Indicates that the upgrade safety check kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - EnsureSeedNodeQuorum - Indicates that if we bring down the node then this will result in global seed node quorum loss. The value is 1.

      - EnsurePartitionQuorum - Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition. The value is 2.

      - WaitForPrimaryPlacement - Indicates that there is some replica on the node that was moved out of this node due to upgrade. Service Fabric is now waiting for the primary to be moved back to this node. The value is 3.

      - WaitForPrimarySwap - Indicates that Service Fabric is waiting for a primary replica to be moved out of the node before starting upgrade on that node. The value is 4.

      - WaitForReconfiguration - Indicates that there is some replica on the node that is involved in a reconfiguration. Service Fabric is waiting for the reconfiguration to be complete before staring upgrade on that node. The value is 5.

      - WaitForInbuildReplica - Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying data to some other replica. In both cases, bringing down the replica on the node due to upgrade will abort the copy. The value is 6.

      - EnsureAvailability - Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the node for which the partition is quorum loss. In both cases, bringing down the replicas due to upgrade will result in loss of availability. The value is 7.
    types:
    - uid: WaitForPrimarySwap
    typesTitle: string
    name: Kind
  - description: An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.
    types:
    - uid: string
    name: PartitionId
- name: WaitForReconfigurationSafetyCheck
  description: Safety check that waits for the current reconfiguration of the partition to be completed before starting an upgrade.
  kind: object
  properties:
  - description: >
      The kind of safety check performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state. Following are the kinds of safety checks.


      - Invalid - Indicates that the upgrade safety check kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - EnsureSeedNodeQuorum - Indicates that if we bring down the node then this will result in global seed node quorum loss. The value is 1.

      - EnsurePartitionQuorum - Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition. The value is 2.

      - WaitForPrimaryPlacement - Indicates that there is some replica on the node that was moved out of this node due to upgrade. Service Fabric is now waiting for the primary to be moved back to this node. The value is 3.

      - WaitForPrimarySwap - Indicates that Service Fabric is waiting for a primary replica to be moved out of the node before starting upgrade on that node. The value is 4.

      - WaitForReconfiguration - Indicates that there is some replica on the node that is involved in a reconfiguration. Service Fabric is waiting for the reconfiguration to be complete before staring upgrade on that node. The value is 5.

      - WaitForInbuildReplica - Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying data to some other replica. In both cases, bringing down the replica on the node due to upgrade will abort the copy. The value is 6.

      - EnsureAvailability - Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the node for which the partition is quorum loss. In both cases, bringing down the replicas due to upgrade will result in loss of availability. The value is 7.
    types:
    - uid: WaitForReconfiguration
    typesTitle: string
    name: Kind
  - description: An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.
    types:
    - uid: string
    name: PartitionId
- name: NamedPartitionSchemeDescription
  description: Describes the named partition scheme of the service.
  kind: object
  properties:
  - description: The number of partitions.
    types:
    - uid: integer
    name: Count
  - description: Array of size specified by the ‘Count’ parameter, for the names of the partitions.
    types:
    - uid: string
    name: Names
  - description: >
      Enumerates the ways that a service can be partitioned. Possible values are:


      - Invalid - Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Singleton - Indicates that the partition is based on string names, and is a SingletonPartitionSchemeDescription object, The value is 1.

      - UniformInt64Range - Indicates that the partition is based on Int64 key ranges, and is a UniformInt64RangePartitionSchemeDescription object. The value is 2.

      - Named - Indicates that the partition is based on string names, and is a NamedPartitionSchemeDescription object. The value is 3
    types:
    - uid: Named
    typesTitle: string
    name: PartitionScheme
- name: SingletonPartitionSchemeDescription
  description: Describes the partition scheme of a singleton-partitioned, or non-partitioned service.
  kind: object
  properties:
  - description: >
      Enumerates the ways that a service can be partitioned. Possible values are:


      - Invalid - Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Singleton - Indicates that the partition is based on string names, and is a SingletonPartitionSchemeDescription object, The value is 1.

      - UniformInt64Range - Indicates that the partition is based on Int64 key ranges, and is a UniformInt64RangePartitionSchemeDescription object. The value is 2.

      - Named - Indicates that the partition is based on string names, and is a NamedPartitionSchemeDescription object. The value is 3
    types:
    - uid: Singleton
    typesTitle: string
    name: PartitionScheme
- name: UniformInt64RangePartitionSchemeDescription
  description: Describes a partitioning scheme where an integer range is allocated evenly across a number of partitions.
  kind: object
  properties:
  - description: The number of partitions.
    types:
    - uid: integer
    name: Count
  - description: >
      String indicating the lower bound of the partition key range that

      should be split between the partition ‘Count’
    types:
    - uid: string
    name: LowKey
  - description: >
      String indicating the upper bound of the partition key range that

      should be split between the partition ‘Count’
    types:
    - uid: string
    name: HighKey
  - description: >
      Enumerates the ways that a service can be partitioned. Possible values are:


      - Invalid - Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Singleton - Indicates that the partition is based on string names, and is a SingletonPartitionSchemeDescription object, The value is 1.

      - UniformInt64Range - Indicates that the partition is based on Int64 key ranges, and is a UniformInt64RangePartitionSchemeDescription object. The value is 2.

      - Named - Indicates that the partition is based on string names, and is a NamedPartitionSchemeDescription object. The value is 3
    types:
    - uid: UniformInt64Range
    typesTitle: string
    name: PartitionScheme
- name: StatefulServiceDescription
  description: Describes a stateful service.
  kind: object
  properties:
  - description: The target replica set size as a number.
    types:
    - uid: integer
    name: TargetReplicaSetSize
  - description: The minimum replica set size as a number.
    types:
    - uid: integer
    name: MinReplicaSetSize
  - description: A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false.
    types:
    - uid: boolean
    name: HasPersistedState
  - description: >
      Flags indicating whether other properties are set. Each of the associated properties corresponds to a flag, specified below, which, if set, indicate that the property is specified.

      This property can be a combination of those flags obtained using bitwise 'OR' operator.

      For example, if the provided value is 6 then the flags for QuorumLossWaitDuration (2) and StandByReplicaKeepDuration(4) are set.


      - None - Does not indicate any other properties are set. The value is zero.

      - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is 1.

      - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 2.

      - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 4.
    types:
    - uid: integer
    name: Flags
  - description: The duration, in seconds, between when a replica goes down and when a new replica is created.
    types:
    - uid: integer
    name: ReplicaRestartWaitDurationSeconds
  - description: The maximum duration, in seconds, for which a partition is allowed to be in a state of quorum loss.
    types:
    - uid: integer
    name: QuorumLossWaitDurationSeconds
  - description: The definition on how long StandBy replicas should be maintained before being removed.
    types:
    - uid: integer
    name: StandByReplicaKeepDurationSeconds
  - description: >
      The kind of service (Stateless or Stateful). Following are the possible values.


      - Invalid - Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Stateless - Does not use Service Fabric to make its state highly available or reliable. The value is 1.

      - Stateful - Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
    types:
    - uid: Stateful
    typesTitle: string
    name: ServiceKind
  - description: The name of the application, including the 'fabric:' URI scheme.
    types:
    - uid: string
    name: ApplicationName
  - description: The full name of the service with 'fabric:' URI scheme.
    types:
    - uid: string
    name: ServiceName
  - description: Name of the service type as specified in the service manifest.
    types:
    - uid: string
    name: ServiceTypeName
  - description: Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.
    types:
    - uid: integer
    name: InitializationData
  - description: Describes how the service is partitioned.
    types:
    - uid: NamedPartitionSchemeDescription
    - uid: SingletonPartitionSchemeDescription
    - uid: UniformInt64RangePartitionSchemeDescription
    typesTitle: PartitionSchemeDescription
    name: PartitionDescription
  - description: 'The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".'
    types:
    - uid: string
    name: PlacementConstraints
  - description: A list that describes the correlation of the service with other services.
    types:
    - uid: ServiceCorrelationDescription
    name: CorrelationScheme
  - description: The service load metrics is given as an array of ServiceLoadMetricDescription objects.
    types:
    - uid: ServiceLoadMetricDescription
    name: ServiceLoadMetrics
  - description: A list that describes the correlation of the service with other services.
    types:
    - isArray: true
      uid: ServicePlacementInvalidDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementNonPartiallyPlaceServicePolicyDescription
    - isArray: true
      uid: ServicePlacementPreferPrimaryDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementRequiredDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementRequireDomainDistributionPolicyDescription
    typesTitle: ServicePlacementPolicyDescription[]
    name: ServicePlacementPolicies
  - description: >
      Specifies the move cost for the service. Possible values are the following.

        - Zero - Zero move cost. This value is zero.
        - Low - Specifies the move cost of the service as Low. The value is 1.
        - Medium - Specifies the move cost of the service as Medium. The value is 2.
        - High - Specifies the move cost of the service as High. The value is 3.
    types:
    - uid: MoveCost
    name: DefaultMoveCost
  - description: Indicates if the DefaultMoveCost property is specified.
    types:
    - uid: boolean
    name: IsDefaultMoveCostSpecified
  - description: >
      The activation mode of service package to be used for a Service Fabric service. This is specified at the time of creating the Service. Possible values are following.

        - SharedProcess - This is the default activation mode. With this activation mode, replicas or instances from different partition(s) of service, on a given node, will share same activation of service package on a node. The value is zero.
        - ExclusiveProcess - With this activation mode, each replica or instance of service, on a given node, will have its own dedicated activation of service package on a node. The value is 1.
    types:
    - uid: ServicePackageActivationMode
    name: ServicePackageActivationMode
  - description: The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.
    types:
    - uid: string
    name: ServiceDnsName
- name: StatelessServiceDescription
  description: Describes a stateless service.
  kind: object
  properties:
  - description: The instance count.
    types:
    - uid: integer
    name: InstanceCount
  - description: >
      The kind of service (Stateless or Stateful). Following are the possible values.


      - Invalid - Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Stateless - Does not use Service Fabric to make its state highly available or reliable. The value is 1.

      - Stateful - Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
    types:
    - uid: Stateless
    typesTitle: string
    name: ServiceKind
  - description: The name of the application, including the 'fabric:' URI scheme.
    types:
    - uid: string
    name: ApplicationName
  - description: The full name of the service with 'fabric:' URI scheme.
    types:
    - uid: string
    name: ServiceName
  - description: Name of the service type as specified in the service manifest.
    types:
    - uid: string
    name: ServiceTypeName
  - description: Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.
    types:
    - uid: integer
    name: InitializationData
  - description: Describes how the service is partitioned.
    types:
    - uid: NamedPartitionSchemeDescription
    - uid: SingletonPartitionSchemeDescription
    - uid: UniformInt64RangePartitionSchemeDescription
    typesTitle: PartitionSchemeDescription
    name: PartitionDescription
  - description: 'The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".'
    types:
    - uid: string
    name: PlacementConstraints
  - description: A list that describes the correlation of the service with other services.
    types:
    - uid: ServiceCorrelationDescription
    name: CorrelationScheme
  - description: The service load metrics is given as an array of ServiceLoadMetricDescription objects.
    types:
    - uid: ServiceLoadMetricDescription
    name: ServiceLoadMetrics
  - description: A list that describes the correlation of the service with other services.
    types:
    - isArray: true
      uid: ServicePlacementInvalidDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementNonPartiallyPlaceServicePolicyDescription
    - isArray: true
      uid: ServicePlacementPreferPrimaryDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementRequiredDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementRequireDomainDistributionPolicyDescription
    typesTitle: ServicePlacementPolicyDescription[]
    name: ServicePlacementPolicies
  - description: >
      Specifies the move cost for the service. Possible values are the following.

        - Zero - Zero move cost. This value is zero.
        - Low - Specifies the move cost of the service as Low. The value is 1.
        - Medium - Specifies the move cost of the service as Medium. The value is 2.
        - High - Specifies the move cost of the service as High. The value is 3.
    types:
    - uid: MoveCost
    name: DefaultMoveCost
  - description: Indicates if the DefaultMoveCost property is specified.
    types:
    - uid: boolean
    name: IsDefaultMoveCostSpecified
  - description: >
      The activation mode of service package to be used for a Service Fabric service. This is specified at the time of creating the Service. Possible values are following.

        - SharedProcess - This is the default activation mode. With this activation mode, replicas or instances from different partition(s) of service, on a given node, will share same activation of service package on a node. The value is zero.
        - ExclusiveProcess - With this activation mode, each replica or instance of service, on a given node, will have its own dedicated activation of service package on a node. The value is 1.
    types:
    - uid: ServicePackageActivationMode
    name: ServicePackageActivationMode
  - description: The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.
    types:
    - uid: string
    name: ServiceDnsName
- name: SecondaryActiveReplicatorStatus
  description: Status of the secondary replicator when it is in active mode and is part of the replica set.
  kind: object
  properties:
  - description: >
      The role of a replica of a stateful service. Possible values are following.
        - Unknown - Indicates the initial role that a replica is created in. The value is zero.
        - None - Specifies that the replica has no responsibility in regard to the replica set. The value is 1
        - Primary - Refers to the replica in the set on which all read and write operations are complete in order to enforce strong consistency semantics. Read operations are handled directly by the Primary replica, while write operations must be acknowledged by a quorum of the replicas in the replica set. There can only be one Primary replica in a replica set at a time. The value is 2.
        - IdleSecondary - Refers to a replica in the set that receives a state transfer from the Primary replica to prepare for becoming an active Secondary replica. There can be multiple Idle Secondary replicas in a replica set at a time. Idle Secondary replicas do not count as a part of a write quorum. The value is 3.
        - ActiveSecondary - Refers to a replica in the set that receives state updates from the Primary replica, applies them, and sends acknowledgements back. Secondary replicas must participate in the write quorum for a replica set. There can be multiple active Secondary replicas in a replica set at a time. The number of active Secondary replicas is configurable that the reliability subsystem should maintain. The value is 4.
    types:
    - uid: ActiveSecondary
    typesTitle: string
    name: Kind
  - description: >
      Provides various statistics of the queue used in the service fabric replicator.

      Contains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc.

      Depending on the role of the replicator, the properties in this type imply different meanings.
    types:
    - uid: ReplicatorQueueStatus
    name: ReplicationQueueStatus
  - description: >
      The last time-stamp (UTC) at which a replication operation was received from the primary.

      UTC 0 represents an invalid value, indicating that a replication operation message was never received.
    types:
    - uid: string
    name: LastReplicationOperationReceivedTimeUtc
  - description: Value that indicates whether the replica is currently being built.
    types:
    - uid: boolean
    name: IsInBuild
  - description: >
      Provides various statistics of the queue used in the service fabric replicator.

      Contains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc.

      Depending on the role of the replicator, the properties in this type imply different meanings.
    types:
    - uid: ReplicatorQueueStatus
    name: CopyQueueStatus
  - description: >
      The last time-stamp (UTC) at which a copy operation was received from the primary.

      UTC 0 represents an invalid value, indicating that a copy operation message was never received.
    types:
    - uid: string
    name: LastCopyOperationReceivedTimeUtc
  - description: >
      The last time-stamp (UTC) at which an acknowledgment was sent to the primary replicator.

      UTC 0 represents an invalid value, indicating that an acknowledgment message was never sent.
    types:
    - uid: string
    name: LastAcknowledgementSentTimeUtc
- name: SecondaryIdleReplicatorStatus
  description: Status of the secondary replicator when it is in idle mode and is being built by the primary.
  kind: object
  properties:
  - description: >
      The role of a replica of a stateful service. Possible values are following.
        - Unknown - Indicates the initial role that a replica is created in. The value is zero.
        - None - Specifies that the replica has no responsibility in regard to the replica set. The value is 1
        - Primary - Refers to the replica in the set on which all read and write operations are complete in order to enforce strong consistency semantics. Read operations are handled directly by the Primary replica, while write operations must be acknowledged by a quorum of the replicas in the replica set. There can only be one Primary replica in a replica set at a time. The value is 2.
        - IdleSecondary - Refers to a replica in the set that receives a state transfer from the Primary replica to prepare for becoming an active Secondary replica. There can be multiple Idle Secondary replicas in a replica set at a time. Idle Secondary replicas do not count as a part of a write quorum. The value is 3.
        - ActiveSecondary - Refers to a replica in the set that receives state updates from the Primary replica, applies them, and sends acknowledgements back. Secondary replicas must participate in the write quorum for a replica set. There can be multiple active Secondary replicas in a replica set at a time. The number of active Secondary replicas is configurable that the reliability subsystem should maintain. The value is 4.
    types:
    - uid: IdleSecondary
    typesTitle: string
    name: Kind
  - description: >
      Provides various statistics of the queue used in the service fabric replicator.

      Contains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc.

      Depending on the role of the replicator, the properties in this type imply different meanings.
    types:
    - uid: ReplicatorQueueStatus
    name: ReplicationQueueStatus
  - description: >
      The last time-stamp (UTC) at which a replication operation was received from the primary.

      UTC 0 represents an invalid value, indicating that a replication operation message was never received.
    types:
    - uid: string
    name: LastReplicationOperationReceivedTimeUtc
  - description: Value that indicates whether the replica is currently being built.
    types:
    - uid: boolean
    name: IsInBuild
  - description: >
      Provides various statistics of the queue used in the service fabric replicator.

      Contains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc.

      Depending on the role of the replicator, the properties in this type imply different meanings.
    types:
    - uid: ReplicatorQueueStatus
    name: CopyQueueStatus
  - description: >
      The last time-stamp (UTC) at which a copy operation was received from the primary.

      UTC 0 represents an invalid value, indicating that a copy operation message was never received.
    types:
    - uid: string
    name: LastCopyOperationReceivedTimeUtc
  - description: >
      The last time-stamp (UTC) at which an acknowledgment was sent to the primary replicator.

      UTC 0 represents an invalid value, indicating that an acknowledgment message was never sent.
    types:
    - uid: string
    name: LastAcknowledgementSentTimeUtc
- name: StatefulServiceUpdateDescription
  description: Describes an update for a stateful service.
  kind: object
  properties:
  - description: The target replica set size as a number.
    types:
    - uid: integer
    name: TargetReplicaSetSize
  - description: The minimum replica set size as a number.
    types:
    - uid: integer
    name: MinReplicaSetSize
  - description: The duration, in seconds, between when a replica goes down and when a new replica is created.
    types:
    - uid: string
    name: ReplicaRestartWaitDurationSeconds
  - description: The maximum duration, in seconds, for which a partition is allowed to be in a state of quorum loss.
    types:
    - uid: string
    name: QuorumLossWaitDurationSeconds
  - description: The definition on how long StandBy replicas should be maintained before being removed.
    types:
    - uid: string
    name: StandByReplicaKeepDurationSeconds
  - description: >
      The kind of service (Stateless or Stateful). Following are the possible values.


      - Invalid - Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Stateless - Does not use Service Fabric to make its state highly available or reliable. The value is 1.

      - Stateful - Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
    types:
    - uid: Stateful
    typesTitle: string
    name: ServiceKind
  - description: >
      Flags indicating whether other properties are set. Each of the associated properties corresponds to a flag, specified below, which, if set, indicate that the property is specified.

      This property can be a combination of those flags obtained using bitwise 'OR' operator.

      For example, if the provided value is 6 then the flags for ReplicaRestartWaitDuration (2) and QuorumLossWaitDuration (4) are set.


      - None - Does not indicate any other properties are set. The value is zero.

      - TargetReplicaSetSize/InstanceCount - Indicates whether the TargetReplicaSetSize property (for Stateful services) or the InstanceCount property (for Stateless services) is set. The value is 1.

      - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is  2.

      - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 4.

      - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 8.

      - MinReplicaSetSize - Indicates the MinReplicaSetSize property is set. The value is 16.

      - PlacementConstraints - Indicates the PlacementConstraints property is set. The value is 32.

      - PlacementPolicyList - Indicates the ServicePlacementPolicies property is set. The value is 64.

      - Correlation - Indicates the CorrelationScheme property is set. The value is 128.

      - Metrics - Indicates the ServiceLoadMetrics property is set. The value is 256.

      - DefaultMoveCost - Indicates the DefaultMoveCost property is set. The value is 512.
    types:
    - uid: string
    name: Flags
  - description: 'The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".'
    types:
    - uid: string
    name: PlacementConstraints
  - description: A list that describes the correlation of the service with other services.
    types:
    - uid: ServiceCorrelationDescription
    name: CorrelationScheme
  - description: The service load metrics is given as an array of ServiceLoadMetricDescription objects.
    types:
    - uid: ServiceLoadMetricDescription
    name: LoadMetrics
  - description: A list that describes the correlation of the service with other services.
    types:
    - isArray: true
      uid: ServicePlacementInvalidDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementNonPartiallyPlaceServicePolicyDescription
    - isArray: true
      uid: ServicePlacementPreferPrimaryDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementRequiredDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementRequireDomainDistributionPolicyDescription
    typesTitle: ServicePlacementPolicyDescription[]
    name: ServicePlacementPolicies
  - description: >
      Specifies the move cost for the service. Possible values are the following.

        - Zero - Zero move cost. This value is zero.
        - Low - Specifies the move cost of the service as Low. The value is 1.
        - Medium - Specifies the move cost of the service as Medium. The value is 2.
        - High - Specifies the move cost of the service as High. The value is 3.
    types:
    - uid: MoveCost
    name: DefaultMoveCost
- name: StatelessServiceUpdateDescription
  description: Describes an update for a stateless service.
  kind: object
  properties:
  - description: The instance count.
    types:
    - uid: integer
    name: InstanceCount
  - description: >
      The kind of service (Stateless or Stateful). Following are the possible values.


      - Invalid - Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Stateless - Does not use Service Fabric to make its state highly available or reliable. The value is 1.

      - Stateful - Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
    types:
    - uid: Stateless
    typesTitle: string
    name: ServiceKind
  - description: >
      Flags indicating whether other properties are set. Each of the associated properties corresponds to a flag, specified below, which, if set, indicate that the property is specified.

      This property can be a combination of those flags obtained using bitwise 'OR' operator.

      For example, if the provided value is 6 then the flags for ReplicaRestartWaitDuration (2) and QuorumLossWaitDuration (4) are set.


      - None - Does not indicate any other properties are set. The value is zero.

      - TargetReplicaSetSize/InstanceCount - Indicates whether the TargetReplicaSetSize property (for Stateful services) or the InstanceCount property (for Stateless services) is set. The value is 1.

      - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is  2.

      - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 4.

      - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 8.

      - MinReplicaSetSize - Indicates the MinReplicaSetSize property is set. The value is 16.

      - PlacementConstraints - Indicates the PlacementConstraints property is set. The value is 32.

      - PlacementPolicyList - Indicates the ServicePlacementPolicies property is set. The value is 64.

      - Correlation - Indicates the CorrelationScheme property is set. The value is 128.

      - Metrics - Indicates the ServiceLoadMetrics property is set. The value is 256.

      - DefaultMoveCost - Indicates the DefaultMoveCost property is set. The value is 512.
    types:
    - uid: string
    name: Flags
  - description: 'The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".'
    types:
    - uid: string
    name: PlacementConstraints
  - description: A list that describes the correlation of the service with other services.
    types:
    - uid: ServiceCorrelationDescription
    name: CorrelationScheme
  - description: The service load metrics is given as an array of ServiceLoadMetricDescription objects.
    types:
    - uid: ServiceLoadMetricDescription
    name: LoadMetrics
  - description: A list that describes the correlation of the service with other services.
    types:
    - isArray: true
      uid: ServicePlacementInvalidDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementNonPartiallyPlaceServicePolicyDescription
    - isArray: true
      uid: ServicePlacementPreferPrimaryDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementRequiredDomainPolicyDescription
    - isArray: true
      uid: ServicePlacementRequireDomainDistributionPolicyDescription
    typesTitle: ServicePlacementPolicyDescription[]
    name: ServicePlacementPolicies
  - description: >
      Specifies the move cost for the service. Possible values are the following.

        - Zero - Zero move cost. This value is zero.
        - Low - Specifies the move cost of the service as Low. The value is 1.
        - Medium - Specifies the move cost of the service as Medium. The value is 2.
        - High - Specifies the move cost of the service as High. The value is 3.
    types:
    - uid: MoveCost
    name: DefaultMoveCost
- name: BinaryPropertyValue
  description: Describes a Service Fabric property value of type Binary.
  kind: object
  properties:
  - description: Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.
    types:
    - uid: integer
    name: Data
  - description: >
      The kind of property, determined by the type of data. Following are the possible values.


      - Invalid - Indicates the property is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Binary - The data inside the property is a binary blob. The value is 1.

      - Int64 - The data inside the property is an int64. The value is 2.

      - Double - The data inside the property is a double. The value is 3.

      - String - The data inside the property is a wstring. The value is 4.

      - Guid - The data inside the property is a guid. The value is 5.
    types:
    - uid: Binary
    typesTitle: string
    name: Kind
- name: Int64PropertyValue
  description: Describes a Service Fabric property value of type Int64.
  kind: object
  properties:
  - description: The data of the property value.
    types:
    - uid: string
    name: Data
  - description: >
      The kind of property, determined by the type of data. Following are the possible values.


      - Invalid - Indicates the property is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Binary - The data inside the property is a binary blob. The value is 1.

      - Int64 - The data inside the property is an int64. The value is 2.

      - Double - The data inside the property is a double. The value is 3.

      - String - The data inside the property is a wstring. The value is 4.

      - Guid - The data inside the property is a guid. The value is 5.
    types:
    - uid: Int64
    typesTitle: string
    name: Kind
- name: DoublePropertyValue
  description: Describes a Service Fabric property value of type Double.
  kind: object
  properties:
  - description: The data of the property value.
    types:
    - uid: number
    name: Data
  - description: >
      The kind of property, determined by the type of data. Following are the possible values.


      - Invalid - Indicates the property is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Binary - The data inside the property is a binary blob. The value is 1.

      - Int64 - The data inside the property is an int64. The value is 2.

      - Double - The data inside the property is a double. The value is 3.

      - String - The data inside the property is a wstring. The value is 4.

      - Guid - The data inside the property is a guid. The value is 5.
    types:
    - uid: Double
    typesTitle: string
    name: Kind
- name: StringPropertyValue
  description: Describes a Service Fabric property value of type String.
  kind: object
  properties:
  - description: The data of the property value.
    types:
    - uid: string
    name: Data
  - description: >
      The kind of property, determined by the type of data. Following are the possible values.


      - Invalid - Indicates the property is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Binary - The data inside the property is a binary blob. The value is 1.

      - Int64 - The data inside the property is an int64. The value is 2.

      - Double - The data inside the property is a double. The value is 3.

      - String - The data inside the property is a wstring. The value is 4.

      - Guid - The data inside the property is a guid. The value is 5.
    types:
    - uid: String
    typesTitle: string
    name: Kind
- name: GuidPropertyValue
  description: Describes a Service Fabric property value of type Guid.
  kind: object
  properties:
  - description: The data of the property value.
    types:
    - uid: string
    name: Data
  - description: >
      The kind of property, determined by the type of data. Following are the possible values.


      - Invalid - Indicates the property is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Binary - The data inside the property is a binary blob. The value is 1.

      - Int64 - The data inside the property is an int64. The value is 2.

      - Double - The data inside the property is a double. The value is 3.

      - String - The data inside the property is a wstring. The value is 4.

      - Guid - The data inside the property is a guid. The value is 5.
    types:
    - uid: Guid
    typesTitle: string
    name: Kind
- name: CheckExistsPropertyBatchOperation
  description: >
    Represents a PropertyBatchOperation that compares the Boolean existence of a property with the Exists argument.  The PropertyBatchOperation operation fails if the property's existence is not equal to the Exists argument.  The CheckExistsPropertyBatchOperation is generally used as a precondition for the write operations in the batch.  Note that if one PropertyBatchOperation in a PropertyBatch fails,  the entire batch fails and cannot be committed in a transactional manner.
  kind: object
  properties:
  - description: Whether or not the property should exist for the operation to pass.
    types:
    - uid: boolean
    name: Exists
  - description: >
      The kind of property batch operation, determined by the operation to be performed. The following are the possible values.


      - Invalid - Indicates the property operation is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Put - The operation will create or edit a property. The value is 1.

      - Get - The operation will get a property. The value is 2.

      - CheckExists - The operation will check that a property exists or doesn't exists, depending on the provided value. The value is 3.

      - CheckSequence - The operation will ensure that the sequence number is equal to the provided value. The value is 4.

      - Delete - The operation will delete a property. The value is 5.

      - CheckValue - The operation will ensure that the value of a property is equal to the provided value. The value is 7.
    types:
    - uid: CheckExists
    typesTitle: string
    name: Kind
  - description: The name of the Service Fabric property.
    types:
    - uid: string
    name: PropertyName
- name: CheckSequencePropertyBatchOperation
  description: >
    Compares the Sequence Number of a property with the SequenceNumber argument.  A property's sequence number can be thought of as that property's version.  Every time the property is modified, its sequence number is increased.  The sequence number can be found in a property's metadata.  The comparison fails if the sequence numbers are not equal.  CheckSequencePropertyBatchOperation is generally used as a precondition for the write operations in the batch.  Note that if one PropertyBatchOperation in a PropertyBatch fails,  the entire batch fails and cannot be committed in a transactional manner.
  kind: object
  properties:
  - description: The expected sequence number.
    types:
    - uid: string
    name: SequenceNumber
  - description: >
      The kind of property batch operation, determined by the operation to be performed. The following are the possible values.


      - Invalid - Indicates the property operation is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Put - The operation will create or edit a property. The value is 1.

      - Get - The operation will get a property. The value is 2.

      - CheckExists - The operation will check that a property exists or doesn't exists, depending on the provided value. The value is 3.

      - CheckSequence - The operation will ensure that the sequence number is equal to the provided value. The value is 4.

      - Delete - The operation will delete a property. The value is 5.

      - CheckValue - The operation will ensure that the value of a property is equal to the provided value. The value is 7.
    types:
    - uid: CheckSequence
    typesTitle: string
    name: Kind
  - description: The name of the Service Fabric property.
    types:
    - uid: string
    name: PropertyName
- name: CheckValuePropertyBatchOperation
  description: >
    Represents a PropertyBatchOperation that compares the value of the property with the expected value.  The CheckValuePropertyBatchOperation is generally used as a precondition for the write operations in the batch.  Note that if one PropertyBatchOperation in a PropertyBatch fails,  the entire batch fails and cannot be committed in a transactional manner.
  kind: object
  properties:
  - description: Describes a Service Fabric property value.
    types:
    - uid: BinaryPropertyValue
    - uid: Int64PropertyValue
    - uid: DoublePropertyValue
    - uid: StringPropertyValue
    - uid: GuidPropertyValue
    typesTitle: PropertyValue
    name: Value
  - description: >
      The kind of property batch operation, determined by the operation to be performed. The following are the possible values.


      - Invalid - Indicates the property operation is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Put - The operation will create or edit a property. The value is 1.

      - Get - The operation will get a property. The value is 2.

      - CheckExists - The operation will check that a property exists or doesn't exists, depending on the provided value. The value is 3.

      - CheckSequence - The operation will ensure that the sequence number is equal to the provided value. The value is 4.

      - Delete - The operation will delete a property. The value is 5.

      - CheckValue - The operation will ensure that the value of a property is equal to the provided value. The value is 7.
    types:
    - uid: CheckValue
    typesTitle: string
    name: Kind
  - description: The name of the Service Fabric property.
    types:
    - uid: string
    name: PropertyName
- name: DeletePropertyBatchOperation
  description: >
    Represents a PropertyBatchOperation that deletes a specified property if it exists.  Note that if one PropertyBatchOperation in a PropertyBatch fails,  the entire batch fails and cannot be committed in a transactional manner.
  kind: object
  properties:
  - description: >
      The kind of property batch operation, determined by the operation to be performed. The following are the possible values.


      - Invalid - Indicates the property operation is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Put - The operation will create or edit a property. The value is 1.

      - Get - The operation will get a property. The value is 2.

      - CheckExists - The operation will check that a property exists or doesn't exists, depending on the provided value. The value is 3.

      - CheckSequence - The operation will ensure that the sequence number is equal to the provided value. The value is 4.

      - Delete - The operation will delete a property. The value is 5.

      - CheckValue - The operation will ensure that the value of a property is equal to the provided value. The value is 7.
    types:
    - uid: Delete
    typesTitle: string
    name: Kind
  - description: The name of the Service Fabric property.
    types:
    - uid: string
    name: PropertyName
- name: GetPropertyBatchOperation
  description: >
    Represents a PropertyBatchOperation that gets the specified property if it exists.  Note that if one PropertyBatchOperation in a PropertyBatch fails,  the entire batch fails and cannot be committed in a transactional manner.
  kind: object
  properties:
  - description: >
      Whether or not to return the property value with the metadata.  True if values should be returned with the metadata; False to return only property metadata.
    types:
    - uid: boolean
    name: IncludeValue
  - description: >
      The kind of property batch operation, determined by the operation to be performed. The following are the possible values.


      - Invalid - Indicates the property operation is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Put - The operation will create or edit a property. The value is 1.

      - Get - The operation will get a property. The value is 2.

      - CheckExists - The operation will check that a property exists or doesn't exists, depending on the provided value. The value is 3.

      - CheckSequence - The operation will ensure that the sequence number is equal to the provided value. The value is 4.

      - Delete - The operation will delete a property. The value is 5.

      - CheckValue - The operation will ensure that the value of a property is equal to the provided value. The value is 7.
    types:
    - uid: Get
    typesTitle: string
    name: Kind
  - description: The name of the Service Fabric property.
    types:
    - uid: string
    name: PropertyName
- name: PutPropertyBatchOperation
  description: >
    Puts the specified property under the specified name.  Note that if one PropertyBatchOperation in a PropertyBatch fails,  the entire batch fails and cannot be committed in a transactional manner.
  kind: object
  properties:
  - description: Describes a Service Fabric property value.
    types:
    - uid: BinaryPropertyValue
    - uid: Int64PropertyValue
    - uid: DoublePropertyValue
    - uid: StringPropertyValue
    - uid: GuidPropertyValue
    typesTitle: PropertyValue
    name: Value
  - description: The property's custom type id. Using this property, the user is able to tag the type of the value of the property.
    types:
    - uid: string
    name: CustomTypeId
  - description: >
      The kind of property batch operation, determined by the operation to be performed. The following are the possible values.


      - Invalid - Indicates the property operation is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

      - Put - The operation will create or edit a property. The value is 1.

      - Get - The operation will get a property. The value is 2.

      - CheckExists - The operation will check that a property exists or doesn't exists, depending on the provided value. The value is 3.

      - CheckSequence - The operation will ensure that the sequence number is equal to the provided value. The value is 4.

      - Delete - The operation will delete a property. The value is 5.

      - CheckValue - The operation will ensure that the value of a property is equal to the provided value. The value is 7.
    types:
    - uid: Put
    typesTitle: string
    name: Kind
  - description: The name of the Service Fabric property.
    types:
    - uid: string
    name: PropertyName
- name: SuccessfulPropertyBatchInfo
  description: Derived from PropertyBatchInfo. Represents the property batch succeeding. Contains the results of any "Get" operations in the batch.
  kind: object
  properties:
  - description: A map containing the properties that were requested through any "Get" property batch operations. The key represents the index of the "Get" operation in the original request, in string form. The value is the property. If a property is not found, it will not be in the map.
    types:
    - isDictionary: true
      additionalTypes:
      - uid: string
      - uid: PropertyInfo
      uid: object
    name: Properties
  - description: >
      The kind of property batch info, determined by the results of a property batch. The following are the possible values.


      - Invalid - Indicates the property batch info is invalid. All Service Fabric enumerations have the invalid type.

      - Successful - The property batch succeeded.

      - Failed - The property batch failed.
    types:
    - uid: Successful
    typesTitle: string
    name: Kind
- name: FailedPropertyBatchInfo
  description: Derived from PropertyBatchInfo. Represents the property batch failing. Contains information about the specific batch failure.
  kind: object
  properties:
  - description: The error message of the failed operation. Describes the exception thrown due to the first unsuccessful operation in the property batch.
    types:
    - uid: string
    name: ErrorMessage
  - description: The index of the unsuccessful operation in the property batch.
    types:
    - uid: integer
    name: OperationIndex
  - description: >
      The kind of property batch info, determined by the results of a property batch. The following are the possible values.


      - Invalid - Indicates the property batch info is invalid. All Service Fabric enumerations have the invalid type.

      - Successful - The property batch succeeded.

      - Failed - The property batch failed.
    types:
    - uid: Failed
    typesTitle: string
    name: Kind
- name: FabricErrorCodes
  description: >
    Defines the fabric error codes that be returned as part of the error object in response to Service Fabric API operations that are not successful. Following are the error code values that can be returned for a specific HTTP status code.

      - Possible values of the error code for HTTP status code 400 (Bad Request)
        - "FABRIC_E_INVALID_PARTITION_KEY"
        - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
        - "FABRIC_E_INVALID_ADDRESS"
        - "FABRIC_E_APPLICATION_NOT_UPGRADING"
        - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
        - "FABRIC_E_FABRIC_NOT_UPGRADING"
        - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
        - "FABRIC_E_INVALID_CONFIGURATION"
        - "FABRIC_E_INVALID_NAME_URI"
        - "FABRIC_E_PATH_TOO_LONG"
        - "FABRIC_E_KEY_TOO_LARGE"
        - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
        - "FABRIC_E_INVALID_ATOMIC_GROUP"
        - "FABRIC_E_VALUE_EMPTY"

      - Possible values of the error code for HTTP status code 404 (Not Found)
        - "FABRIC_E_NODE_NOT_FOUND"
        - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
        - "FABRIC_E_APPLICATION_NOT_FOUND"
        - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
        - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
        - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
        - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
        - "FABRIC_E_PARTITION_NOT_FOUND"
        - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
        - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
        - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
        - "FABRIC_E_DIRECTORY_NOT_FOUND"
        - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
        - "FABRIC_E_FILE_NOT_FOUND"
        - "FABRIC_E_NAME_DOES_NOT_EXIST"
        - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
        - "FABRIC_E_ENUMERATION_COMPLETED"
        - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
        - "FABRIC_E_KEY_NOT_FOUND"
        - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"

      - Possible values of the error code for HTTP status code 409 (Conflict)
        - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
        - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
        - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
        - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
        - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
        - "FABRIC_E_SERVICE_ALREADY_EXISTS"
        - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
        - "FABRIC_E_APPLICATION_TYPE_IN_USE"
        - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
        - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
        - "FABRIC_E_FABRIC_VERSION_IN_USE"
        - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
        - "FABRIC_E_NAME_ALREADY_EXISTS"
        - "FABRIC_E_NAME_NOT_EMPTY"
        - "FABRIC_E_PROPERTY_CHECK_FAILED"
        - "FABRIC_E_SERVICE_METADATA_MISMATCH"
        - "FABRIC_E_SERVICE_TYPE_MISMATCH"
        - "FABRIC_E_HEALTH_STALE_REPORT"
        - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
        - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
        - "FABRIC_E_INSTANCE_ID_MISMATCH"

      - Possible values of the error code for HTTP status code 413 (Request Entity Too Large)
        - "FABRIC_E_VALUE_TOO_LARGE"

      - Possible values of the error code for HTTP status code 500 (Internal Server Error)
        - "FABRIC_E_NODE_IS_UP"

      - Possible values of the error code for HTTP status code 503 (Service Unavailable)
        - "FABRIC_E_NO_WRITE_QUORUM"
        - "FABRIC_E_NOT_PRIMARY"
        - "FABRIC_E_NOT_READY"
        - "FABRIC_E_RECONFIGURATION_PENDING"
        - "FABRIC_E_SERVICE_OFFLINE"
        - "E_ABORT"
        - "FABRIC_E_VALUE_TOO_LARGE"

      - Possible values of the error code for HTTP status code 504 (Gateway Timeout)
        - "FABRIC_E_COMMUNICATION_ERROR"
        - "FABRIC_E_OPERATION_NOT_COMPLETE"
        - "FABRIC_E_TIMEOUT"
  kind: enum
  properties:
  - types:
    - uid: string
    name: FABRIC_E_INVALID_PARTITION_KEY
  - types:
    - uid: string
    name: FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR
  - types:
    - uid: string
    name: FABRIC_E_INVALID_ADDRESS
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_NOT_UPGRADING
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_NOT_UPGRADING
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR
  - types:
    - uid: string
    name: FABRIC_E_INVALID_CONFIGURATION
  - types:
    - uid: string
    name: FABRIC_E_INVALID_NAME_URI
  - types:
    - uid: string
    name: FABRIC_E_PATH_TOO_LONG
  - types:
    - uid: string
    name: FABRIC_E_KEY_TOO_LARGE
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED
  - types:
    - uid: string
    name: FABRIC_E_INVALID_ATOMIC_GROUP
  - types:
    - uid: string
    name: FABRIC_E_VALUE_EMPTY
  - types:
    - uid: string
    name: FABRIC_E_NODE_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_TYPE_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_TYPE_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_DOES_NOT_EXIST
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_PARTITION_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_REPLICA_DOES_NOT_EXIST
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST
  - types:
    - uid: string
    name: FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_DIRECTORY_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_VERSION_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_FILE_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_NAME_DOES_NOT_EXIST
  - types:
    - uid: string
    name: FABRIC_E_PROPERTY_DOES_NOT_EXIST
  - types:
    - uid: string
    name: FABRIC_E_ENUMERATION_COMPLETED
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_MANIFEST_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_KEY_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_HEALTH_ENTITY_NOT_FOUND
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_ALREADY_EXISTS
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_ALREADY_EXISTS
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS
  - types:
    - uid: string
    name: FABRIC_E_APPLICATION_TYPE_IN_USE
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_VERSION_IN_USE
  - types:
    - uid: string
    name: FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS
  - types:
    - uid: string
    name: FABRIC_E_NAME_ALREADY_EXISTS
  - types:
    - uid: string
    name: FABRIC_E_NAME_NOT_EMPTY
  - types:
    - uid: string
    name: FABRIC_E_PROPERTY_CHECK_FAILED
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_METADATA_MISMATCH
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_TYPE_MISMATCH
  - types:
    - uid: string
    name: FABRIC_E_HEALTH_STALE_REPORT
  - types:
    - uid: string
    name: FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED
  - types:
    - uid: string
    name: FABRIC_E_NODE_HAS_NOT_STOPPED_YET
  - types:
    - uid: string
    name: FABRIC_E_INSTANCE_ID_MISMATCH
  - types:
    - uid: string
    name: FABRIC_E_VALUE_TOO_LARGE
  - types:
    - uid: string
    name: FABRIC_E_NO_WRITE_QUORUM
  - types:
    - uid: string
    name: FABRIC_E_NOT_PRIMARY
  - types:
    - uid: string
    name: FABRIC_E_NOT_READY
  - types:
    - uid: string
    name: FABRIC_E_RECONFIGURATION_PENDING
  - types:
    - uid: string
    name: FABRIC_E_SERVICE_OFFLINE
  - types:
    - uid: string
    name: E_ABORT
  - types:
    - uid: string
    name: FABRIC_E_COMMUNICATION_ERROR
  - types:
    - uid: string
    name: FABRIC_E_OPERATION_NOT_COMPLETE
  - types:
    - uid: string
    name: FABRIC_E_TIMEOUT
  - types:
    - uid: string
    name: FABRIC_E_NODE_IS_UP
- name: ServicePartitionKind
  description: >
    The kind of partitioning scheme used to partition the service. Possible values are following.

        -	Invalid - Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
        -	Singleton - Indicates that there is only one partition, and SingletonPartitionSchemeDescription was specified while creating the service. The value is 1.
        -	Int64Range - Indicates that the partition is based on Int64 key ranges, and UniformInt64RangePartitionSchemeDescription was specified while creating the service. The value is 2.
        -	Named - Indicates that the partition is based on string names, and NamedPartitionInformation  was specified while creating the service. The value is 3.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: Singleton
  - types:
    - uid: string
    name: Int64Range
  - types:
    - uid: string
    name: Named
- name: SafetyCheckKind
  description: >
    The kind of safety check performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state. Following are the kinds of safety checks.


    - Invalid - Indicates that the upgrade safety check kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

    - EnsureSeedNodeQuorum - Indicates that if we bring down the node then this will result in global seed node quorum loss. The value is 1.

    - EnsurePartitionQuorum - Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition. The value is 2.

    - WaitForPrimaryPlacement - Indicates that there is some replica on the node that was moved out of this node due to upgrade. Service Fabric is now waiting for the primary to be moved back to this node. The value is 3.

    - WaitForPrimarySwap - Indicates that Service Fabric is waiting for a primary replica to be moved out of the node before starting upgrade on that node. The value is 4.

    - WaitForReconfiguration - Indicates that there is some replica on the node that is involved in a reconfiguration. Service Fabric is waiting for the reconfiguration to be complete before staring upgrade on that node. The value is 5.

    - WaitForInbuildReplica - Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying data to some other replica. In both cases, bringing down the replica on the node due to upgrade will abort the copy. The value is 6.

    - EnsureAvailability - Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the node for which the partition is quorum loss. In both cases, bringing down the replicas due to upgrade will result in loss of availability. The value is 7.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: EnsureSeedNodeQuorum
  - types:
    - uid: string
    name: EnsurePartitionQuorum
  - types:
    - uid: string
    name: WaitForPrimaryPlacement
  - types:
    - uid: string
    name: WaitForPrimarySwap
  - types:
    - uid: string
    name: WaitForReconfiguration
  - types:
    - uid: string
    name: WaitForInbuildReplica
  - types:
    - uid: string
    name: EnsureAvailability
- name: ServicePlacementPolicyType
  description: >
    The type of placement policy for a service fabric service. Following are the possible values.

      - Invalid - Indicates the type of the placement policy is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
      - InvalidDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 1.
      - RequiredDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 2.
      - PreferredPrimaryDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 3.
      - RequiredDomainDistribution - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 4.
      - NonPartiallyPlaceService - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 5.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: InvalidDomain
  - types:
    - uid: string
    name: RequiredDomain
  - types:
    - uid: string
    name: PreferredPrimaryDomain
  - types:
    - uid: string
    name: RequiredDomainDistribution
  - types:
    - uid: string
    name: NonPartiallyPlaceService
- name: Epoch
  description: >
    An Epoch is a configuration number for the partition as a whole. When the configuration of the replica set changes, for example when the Primary replica changes, the operations that are replicated from the new Primary replica are said to be a new Epoch from the ones which were sent by the old Primary replica.
  kind: object
  properties:
  - description: The current configuration number of this Epoch. The configuration number is an increasing value that is updated whenever the configuration of this replica set changes.
    types:
    - uid: string
    name: ConfigurationVersion
  - description: The current dataloss number of this Epoch. The data loss number property is an increasing value which is updated whenever data loss is suspected, as when loss of a quorum of replicas in the replica set that includes the Primary replica.
    types:
    - uid: string
    name: DataLossVersion
- name: ServiceKind
  description: >
    The kind of service (Stateless or Stateful). Following are the possible values.


    - Invalid - Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

    - Stateless - Does not use Service Fabric to make its state highly available or reliable. The value is 1.

    - Stateful - Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: Stateless
  - types:
    - uid: string
    name: Stateful
- name: HealthState
  description: >
    The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.

      - Invalid - Indicates an invalid health state. All Service Fabric enumerations have the invalid type. The value is zero.
      - Ok - Indicates the health state is okay. The value is 1.
      - Warning - Indicates the health state is at a warning level. The value is 2.
      - Error - Indicates the health state is at an error level. Error health state should be investigated, as they can impact the correct functionality of the cluster. The value is 3.
      - Unknown - Indicates an unknown health status. The value is 65535.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: Ok
  - types:
    - uid: string
    name: Warning
  - types:
    - uid: string
    name: Error
  - types:
    - uid: string
    name: Unknown
- name: ServicePartitionStatus
  description: >
    The status of the service fabric service partition. Possible values are following.

      - Invalid - Indicates the partition status is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
      - Ready - Indicates that the partition is ready. This means that for a stateless service partition there is atleast one instance that is up and for a stateful service partition the number of ready replicas is greater than or equal to the MinReplicaSetSize. The value is 1.
      - NotReady - Indicates that the partition is not ready. This status is returned when none of the other states apply. The value is 2.
      - InQuorumLoss  - Indicates that the partition is in quorum loss. This means that number of replicas that are up and participating in a replica set is less than MinReplicaSetSize for this partition. The value is 3.
      - Reconfiguring - Indicates that the partition is undergoing reconfiguration of its replica sets. This can happen due to failover, upgrade, load balancing or addition or removal of replicas from the replica set. The value is 4.
      - Deleting - Indicates that the partition is being deleted. The value is 5.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: Ready
  - types:
    - uid: string
    name: NotReady
  - types:
    - uid: string
    name: InQuorumLoss
  - types:
    - uid: string
    name: Reconfiguring
  - types:
    - uid: string
    name: Deleting
- name: ServiceTypeExtensionDescription
  description: List of service type extensions.
  kind: object
  properties:
  - description: The name of the extension.
    types:
    - uid: string
    name: Key
  - description: The extension value.
    types:
    - uid: string
    name: Value
- name: ServiceStatus
  description: >
    The status of the application. Possible values are:


    - Unknown - Indicates the service status is unknown. The value is zero.

    - Active - Indicates the service status is active. The value is 1.

    - Upgrading - Indicates the service is upgrading. The value is 2.

    - Deleting - Indicates the service is being deleted. The value is 3.

    - Creating - Indicates the service is being created. The value is 4.

    - Failed - Indicates creation or deletion was terminated due to persistent failures. Another create/delete request can be accepted. The value is 5.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Unknown
  - types:
    - uid: string
    name: Active
  - types:
    - uid: string
    name: Upgrading
  - types:
    - uid: string
    name: Deleting
  - types:
    - uid: string
    name: Creating
  - types:
    - uid: string
    name: Failed
- name: PartitionScheme
  description: >
    Enumerates the ways that a service can be partitioned. Possible values are:


    - Invalid - Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

    - Singleton - Indicates that the partition is based on string names, and is a SingletonPartitionSchemeDescription object, The value is 1.

    - UniformInt64Range - Indicates that the partition is based on Int64 key ranges, and is a UniformInt64RangePartitionSchemeDescription object. The value is 2.

    - Named - Indicates that the partition is based on string names, and is a NamedPartitionSchemeDescription object. The value is 3
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: Singleton
  - types:
    - uid: string
    name: UniformInt64Range
  - types:
    - uid: string
    name: Named
- name: ServiceCorrelationDescription
  description: Creates a particular correlation between services.
  kind: object
  properties:
  - description: >
      The service correlation scheme. Possible values are following.

        - Invalid - An invalid correlation scheme. Cannot be used. The value is zero.
        - Affinity - Indicates that this service has an affinity relationship with another service. Provided for backwards compatibility, consider preferring the Aligned or NonAlignedAffinity options. The value is 1.
        - AlignedAffinity - Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the same nodes. This is the default and is the same as selecting the Affinity scheme. The value is 2.
        - NonAlignedAffinity - Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned Affinity, this does not guarantee that replicas of particular role will be collocated. The value is 3.
    types:
    - uid: ServiceCorrelationScheme
    name: Scheme
  - description: The full name of the service with 'fabric:' URI scheme.
    types:
    - uid: string
    name: ServiceName
- name: ServiceLoadMetricDescription
  description: Specifies a metric to load balance a service during runtime.
  kind: object
  properties:
  - description: The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive.
    types:
    - uid: string
    name: Name
  - description: >
      Determines the metric weight relative to the other metrics that are configured for this service. During runtime, if two metrics end up in conflict, the Cluster Resource Manager prefers the metric with the higher weight. Possible values are following.

        - Zero - Disables resource balancing for this metric. This value is zero.
        - Low - Specifies the metric weight of the service load as Low. The value is 1.
        - Medium - Specifies the metric weight of the service load as Medium. The value is 2.
        - High - Specifies the metric weight of the service load as High. The value is 3.
    types:
    - uid: ServiceLoadMetricWeight
    name: Weight
  - description: Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica.
    types:
    - uid: integer
    name: PrimaryDefaultLoad
  - description: Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica.
    types:
    - uid: integer
    name: SecondaryDefaultLoad
  - description: Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric.
    types:
    - uid: integer
    name: DefaultLoad
- name: MoveCost
  description: >
    Specifies the move cost for the service. Possible values are the following.

      - Zero - Zero move cost. This value is zero.
      - Low - Specifies the move cost of the service as Low. The value is 1.
      - Medium - Specifies the move cost of the service as Medium. The value is 2.
      - High - Specifies the move cost of the service as High. The value is 3.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Zero
  - types:
    - uid: string
    name: Low
  - types:
    - uid: string
    name: Medium
  - types:
    - uid: string
    name: High
- name: ServicePackageActivationMode
  description: >
    The activation mode of service package to be used for a Service Fabric service. This is specified at the time of creating the Service. Possible values are following.

      - SharedProcess - This is the default activation mode. With this activation mode, replicas or instances from different partition(s) of service, on a given node, will share same activation of service package on a node. The value is zero.
      - ExclusiveProcess - With this activation mode, each replica or instance of service, on a given node, will have its own dedicated activation of service package on a node. The value is 1.
  kind: enum
  properties:
  - types:
    - uid: string
    name: SharedProcess
  - types:
    - uid: string
    name: ExclusiveProcess
- name: ReplicaRole
  description: >
    The role of a replica of a stateful service. Possible values are following.
      - Unknown - Indicates the initial role that a replica is created in. The value is zero.
      - None - Specifies that the replica has no responsibility in regard to the replica set. The value is 1
      - Primary - Refers to the replica in the set on which all read and write operations are complete in order to enforce strong consistency semantics. Read operations are handled directly by the Primary replica, while write operations must be acknowledged by a quorum of the replicas in the replica set. There can only be one Primary replica in a replica set at a time. The value is 2.
      - IdleSecondary - Refers to a replica in the set that receives a state transfer from the Primary replica to prepare for becoming an active Secondary replica. There can be multiple Idle Secondary replicas in a replica set at a time. Idle Secondary replicas do not count as a part of a write quorum. The value is 3.
      - ActiveSecondary - Refers to a replica in the set that receives state updates from the Primary replica, applies them, and sends acknowledgements back. Secondary replicas must participate in the write quorum for a replica set. There can be multiple active Secondary replicas in a replica set at a time. The number of active Secondary replicas is configurable that the reliability subsystem should maintain. The value is 4.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Unknown
  - types:
    - uid: string
    name: None
  - types:
    - uid: string
    name: Primary
  - types:
    - uid: string
    name: IdleSecondary
  - types:
    - uid: string
    name: ActiveSecondary
- name: ReplicatorQueueStatus
  description: >
    Provides various statistics of the queue used in the service fabric replicator.

    Contains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc.

    Depending on the role of the replicator, the properties in this type imply different meanings.
  kind: object
  properties:
  - description: Represents the utilization of the queue. A value of 0 indicates that the queue is empty and a value of 100 indicates the queue is full.
    types:
    - uid: integer
    name: QueueUtilizationPercentage
  - description: Represents the virtual memory consumed by the queue in bytes.
    types:
    - uid: string
    name: QueueMemorySize
  - description: >
      On a primary replicator, this is semantically the sequence number of the operation for which all the secondary replicas have sent an acknowledgement.

      On a secondary replicator, this is the smallest sequence number of the operation that is present in the queue.
    types:
    - uid: string
    name: FirstSequenceNumber
  - description: >
      On a primary replicator, this is semantically the highest sequence number of the operation for which all the secondary replicas have sent an acknowledgement.

      On a secondary replicator, this is semantically the highest sequence number that has been applied to the persistent state.
    types:
    - uid: string
    name: CompletedSequenceNumber
  - description: >
      On a primary replicator, this is semantically the highest sequence number of the operation for which a write quorum of the secondary replicas have sent an acknowledgement.

      On a secondary replicator, this is semantically the highest sequence number of the in-order operation received from the primary.
    types:
    - uid: string
    name: CommittedSequenceNumber
  - description: Represents the latest sequence number of the operation that is available in the queue.
    types:
    - uid: string
    name: LastSequenceNumber
- name: PropertyValueKind
  description: >
    The kind of property, determined by the type of data. Following are the possible values.


    - Invalid - Indicates the property is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

    - Binary - The data inside the property is a binary blob. The value is 1.

    - Int64 - The data inside the property is an int64. The value is 2.

    - Double - The data inside the property is a double. The value is 3.

    - String - The data inside the property is a wstring. The value is 4.

    - Guid - The data inside the property is a guid. The value is 5.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: Binary
  - types:
    - uid: string
    name: Int64
  - types:
    - uid: string
    name: Double
  - types:
    - uid: string
    name: String
  - types:
    - uid: string
    name: Guid
- name: PropertyBatchOperationKind
  description: >
    The kind of property batch operation, determined by the operation to be performed. The following are the possible values.


    - Invalid - Indicates the property operation is invalid. All Service Fabric enumerations have the invalid type. The value is zero.

    - Put - The operation will create or edit a property. The value is 1.

    - Get - The operation will get a property. The value is 2.

    - CheckExists - The operation will check that a property exists or doesn't exists, depending on the provided value. The value is 3.

    - CheckSequence - The operation will ensure that the sequence number is equal to the provided value. The value is 4.

    - Delete - The operation will delete a property. The value is 5.

    - CheckValue - The operation will ensure that the value of a property is equal to the provided value. The value is 7.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: Put
  - types:
    - uid: string
    name: Get
  - types:
    - uid: string
    name: CheckExists
  - types:
    - uid: string
    name: CheckSequence
  - types:
    - uid: string
    name: Delete
  - types:
    - uid: string
    name: CheckValue
- name: Properties
  description: A map containing the properties that were requested through any "Get" property batch operations. The key represents the index of the "Get" operation in the original request, in string form. The value is the property. If a property is not found, it will not be in the map.
  kind: object
  properties:
  - description: Information about a Service Fabric property.
    types:
    - uid: PropertyInfo
    name: ''
- name: PropertyBatchInfoKind
  description: >
    The kind of property batch info, determined by the results of a property batch. The following are the possible values.


    - Invalid - Indicates the property batch info is invalid. All Service Fabric enumerations have the invalid type.

    - Successful - The property batch succeeded.

    - Failed - The property batch failed.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: Successful
  - types:
    - uid: string
    name: Failed
- name: ServicePlacementInvalidDomainPolicyDescription
  description: Describes the policy to be used for placement of a Service Fabric service where a particular fault or upgrade domain should not be used for placement of the instances or replicas of that service.
  kind: object
  properties:
  - description: >
      The type of placement policy for a service fabric service. Following are the possible values.

        - Invalid - Indicates the type of the placement policy is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
        - InvalidDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 1.
        - RequiredDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 2.
        - PreferredPrimaryDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 3.
        - RequiredDomainDistribution - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 4.
        - NonPartiallyPlaceService - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 5.
    types:
    - uid: InvalidDomain
    typesTitle: string
    name: Type
  - description: The name of the domain that should not be used for placement.
    types:
    - uid: string
    name: DomainName
- name: ServicePlacementPreferPrimaryDomainPolicyDescription
  description: >
    Describes the policy to be used for placement of a Service Fabric service where the service's Primary replicas should optimally be placed in a particular domain.


    This placement policy is usually used with fault domains in scenarios where the Service Fabric cluster is geographically distributed in order to indicate that a service's primary replica should be located in a particular fault domain, which in geo-distributed scenarios usually aligns with regional or datacenter boundaries. Note that since this is an optimization it is possible that the Primary replica may not end up located in this domain due to failures, capacity limits, or other constraints.
  kind: object
  properties:
  - description: >
      The type of placement policy for a service fabric service. Following are the possible values.

        - Invalid - Indicates the type of the placement policy is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
        - InvalidDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 1.
        - RequiredDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 2.
        - PreferredPrimaryDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 3.
        - RequiredDomainDistribution - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 4.
        - NonPartiallyPlaceService - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 5.
    types:
    - uid: PreferPrimaryDomain
    typesTitle: string
    name: Type
  - description: The name of the domain that should used for placement as per this policy.
    types:
    - uid: string
    name: DomainName
- name: ServicePlacementRequiredDomainPolicyDescription
  description: Describes the policy to be used for placement of a Service Fabric service where the instances or replicas of that service must be placed in a particular domain
  kind: object
  properties:
  - description: >
      The type of placement policy for a service fabric service. Following are the possible values.

        - Invalid - Indicates the type of the placement policy is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
        - InvalidDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 1.
        - RequiredDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 2.
        - PreferredPrimaryDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 3.
        - RequiredDomainDistribution - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 4.
        - NonPartiallyPlaceService - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 5.
    types:
    - uid: RequireDomain
    typesTitle: string
    name: Type
  - description: The name of the domain that should used for placement as per this policy.
    types:
    - uid: string
    name: DomainName
- name: ServicePlacementRequireDomainDistributionPolicyDescription
  description: >
    Describes the policy to be used for placement of a Service Fabric service where two replicas from the same partition should never be placed in the same fault or upgrade domain.


    While this is not common it can expose the service to an increased risk of concurrent failures due to unplanned outages or other cases of subsequent/concurrent failures. As an example, consider a case where replicas are deployed across different data center, with one replica per location. In the event that one of the datacenters goes offline, normally the replica that was placed in that datacenter will be packed into one of the remaining datacenters. If this is not desirable then this policy should be set.
  kind: object
  properties:
  - description: >
      The type of placement policy for a service fabric service. Following are the possible values.

        - Invalid - Indicates the type of the placement policy is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
        - InvalidDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 1.
        - RequiredDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 2.
        - PreferredPrimaryDomain - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 3.
        - RequiredDomainDistribution - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 4.
        - NonPartiallyPlaceService - Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 5.
    types:
    - uid: RequireDomainDistribution
    typesTitle: string
    name: Type
  - description: The name of the domain that should used for placement as per this policy.
    types:
    - uid: string
    name: DomainName
- name: ServiceCorrelationScheme
  description: >
    The service correlation scheme. Possible values are following.

      - Invalid - An invalid correlation scheme. Cannot be used. The value is zero.
      - Affinity - Indicates that this service has an affinity relationship with another service. Provided for backwards compatibility, consider preferring the Aligned or NonAlignedAffinity options. The value is 1.
      - AlignedAffinity - Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the same nodes. This is the default and is the same as selecting the Affinity scheme. The value is 2.
      - NonAlignedAffinity - Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned Affinity, this does not guarantee that replicas of particular role will be collocated. The value is 3.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Invalid
  - types:
    - uid: string
    name: Affinity
  - types:
    - uid: string
    name: AlignedAffinity
  - types:
    - uid: string
    name: NonAlignedAffinity
- name: ServiceLoadMetricWeight
  description: >
    Determines the metric weight relative to the other metrics that are configured for this service. During runtime, if two metrics end up in conflict, the Cluster Resource Manager prefers the metric with the higher weight. Possible values are following.

      - Zero - Disables resource balancing for this metric. This value is zero.
      - Low - Specifies the metric weight of the service load as Low. The value is 1.
      - Medium - Specifies the metric weight of the service load as Medium. The value is 2.
      - High - Specifies the metric weight of the service load as High. The value is 3.
  kind: enum
  properties:
  - types:
    - uid: string
    name: Zero
  - types:
    - uid: string
    name: Low
  - types:
    - uid: string
    name: Medium
  - types:
    - uid: string
    name: High
examples: []
security: []
name: StartChaos
uid: localhost:19080.servicefabric.startchaos.startchaos
