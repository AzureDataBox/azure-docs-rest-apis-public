### YamlMime:RESTOperation
summary: Lists the compute nodes in the specified pool.
service: Batch Service
apiVersion: 2017-09-01.6.0
groupName: Compute Node
consumes:
- application/json; odata=minimalmetadata
produces:
- application/json
paths:
- content: GET https://batch.core.windows.net/pools/{poolId}/nodes?api-version=2017-09-01.6.0
- content: GET https://batch.core.windows.net/pools/{poolId}/nodes?$filter={$filter}&$select={$select}&maxresults={maxresults}&timeout={timeout}&api-version=2017-09-01.6.0
  isOptional: true
uriParameters:
- in: path
  isRequired: true
  description: The ID of the pool from which you want to list nodes.
  types:
  - uid: string
  name: poolId
- in: query
  description: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
  types:
  - uid: string
  name: $filter
- in: query
  description: An OData $select clause.
  types:
  - uid: string
  name: $select
- in: query
  description: The maximum number of items to return in the response. A maximum of 1000 nodes can be returned.
  types:
  - uid: integer
  format: int32
  name: maxresults
- in: query
  description: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
  types:
  - uid: integer
  format: int32
  name: timeout
- in: query
  isRequired: true
  description: Client API Version.
  types:
  - uid: string
  name: api-version
responses:
- headers:
  - value: string
    name: client-request-id
  - value: string
    name: request-id
  - value: string
    name: ETag
  - value: string
    name: Last-Modified
  description: A response containing the list of nodes.
  types:
  - uid: ComputeNodeListResult
  name: 200 OK
- description: The error from the Batch service.
  types:
  - uid: BatchError
  name: Other Status Codes
requestHeader:
- in: header
  description: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
  types:
  - uid: string
  format: uuid
  name: client-request-id
- in: header
  description: Whether the server should return the client-request-id in the response.
  types:
  - uid: boolean
  name: return-client-request-id
- in: header
  description: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
  types:
  - uid: string
  format: date-time-rfc1123
  name: ocp-date
definitions:
- name: ComputeNodeListResult
  description: The result of listing the compute nodes in a pool.
  kind: object
  properties:
  - description: A compute node in the Batch service.
    types:
    - isArray: true
      uid: ComputeNode
    name: value
  - description: The URL to get the next set of results.
    types:
    - uid: string
    name: odata.nextLink
- name: BatchError
  description: The error encountered while attempting to add the task.
  kind: object
  properties:
  - description: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
    name: code
  - description: A message describing the error, intended to be suitable for display in a user interface.
    types:
    - uid: ErrorMessage
    name: message
  - description: An item of additional information included in an Azure Batch error response.
    types:
    - isArray: true
      uid: BatchErrorDetail
    name: values
- name: ComputeNode
  description: A compute node in the Batch service.
  kind: object
  properties:
  - description: >-
      The ID of the compute node.

      Every node that is added to a pool is assigned a unique ID. Whenever a node is removed from a pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new nodes.
    types:
    - uid: string
    name: id
  - description: The URL of the compute node.
    types:
    - uid: string
    name: url
  - description: >-
      The current state of the compute node.

      The low-priority node has been preempted. Tasks which were running on the node when it was pre-empted will be rescheduled when another node becomes available.
    types:
    - uid: ComputeNodeState
    name: state
  - description: Whether the compute node is available for task scheduling.
    types:
    - uid: SchedulingState
    name: schedulingState
  - description: The time at which the compute node entered its current state.
    types:
    - uid: string
    name: stateTransitionTime
  - description: >-
      The time at which the compute node was started.

      This property may not be present if the node state is unusable.
    types:
    - uid: string
    name: lastBootTime
  - description: The time at which this compute node was allocated to the pool.
    types:
    - uid: string
    name: allocationTime
  - description: >-
      The IP address that other compute nodes can use to communicate with this compute node.

      Every node that is added to a pool is assigned a unique IP address. Whenever a node is removed from a pool, all of its local files are deleted, and the IP address is reclaimed and could be reused for new nodes.
    types:
    - uid: string
    name: ipAddress
  - description: >-
      An identifier which can be passed when adding a task to request that the task be scheduled on this node.

      Note that this is just a soft affinity. If the target node is busy or unavailable at the time the task is scheduled, then the task will be scheduled elsewhere.
    types:
    - uid: string
    name: affinityId
  - description: >-
      The size of the virtual machine hosting the compute node.

      For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
    types:
    - uid: string
    name: vmSize
  - description: The total number of job tasks completed on the compute node. This includes Job Manager tasks and normal tasks, but not Job Preparation, Job Release or Start tasks.
    types:
    - uid: integer
    name: totalTasksRun
  - description: The total number of currently running job tasks on the compute node. This includes Job Manager tasks and normal tasks, but not Job Preparation, Job Release or Start tasks.
    types:
    - uid: integer
    name: runningTasksCount
  - description: The total number of job tasks which completed successfully (with exitCode 0) on the compute node. This includes Job Manager tasks and normal tasks, but not Job Preparation, Job Release or Start tasks.
    types:
    - uid: integer
    name: totalTasksSucceeded
  - description: Information about a task running on a compute node.
    types:
    - isArray: true
      uid: TaskInformation
    name: recentTasks
  - description: The task specified to run on the compute node as it joins the pool.
    types:
    - uid: StartTask
    name: startTask
  - description: Runtime information about the execution of the start task on the compute node.
    types:
    - uid: StartTaskInformation
    name: startTaskInfo
  - description: A reference to a certificate to be installed on compute nodes in a pool.
    types:
    - isArray: true
      uid: CertificateReference
    name: certificateReferences
  - description: An error encountered by a compute node.
    types:
    - isArray: true
      uid: ComputeNodeError
    name: errors
  - description: Whether this compute node is a dedicated node. If false, the node is a low-priority node.
    types:
    - uid: boolean
    name: isDedicated
  - description: The endpoint configuration for the compute node.
    types:
    - uid: ComputeNodeEndpointConfiguration
    name: endpointConfiguration
- name: ErrorMessage
  description: A message describing the error, intended to be suitable for display in a user interface.
  kind: object
  properties:
  - description: The language code of the error message
    types:
    - uid: string
    name: lang
  - description: The text of the message.
    types:
    - uid: string
    name: value
- name: BatchErrorDetail
  description: A collection of key-value pairs containing additional details about the error.
  kind: object
  properties:
  - description: An identifier specifying the meaning of the Value property.
    types:
    - uid: string
    name: key
  - description: The additional information included with the error response.
    types:
    - uid: string
    name: value
- name: ComputeNodeState
  description: >-
    The current state of the compute node.

    The low-priority node has been preempted. Tasks which were running on the node when it was pre-empted will be rescheduled when another node becomes available.
  kind: enum
  properties:
  - description: The node is not currently running a task.
    types:
    - uid: string
    name: idle
  - description: The node is rebooting.
    types:
    - uid: string
    name: rebooting
  - description: The node is reimaging.
    types:
    - uid: string
    name: reimaging
  - description: The node is running one or more tasks (other than a start task).
    types:
    - uid: string
    name: running
  - description: The node cannot be used for task execution due to errors.
    types:
    - uid: string
    name: unusable
  - description: The Batch service has obtained the underlying virtual machine from Azure Compute, but it has not yet started to join the pool.
    types:
    - uid: string
    name: creating
  - description: The Batch service is starting on the underlying virtual machine.
    types:
    - uid: string
    name: starting
  - description: The start task has started running on the compute node, but waitForSuccess is set and the start task has not yet completed.
    types:
    - uid: string
    name: waitingforstarttask
  - description: The start task has failed on the compute node (and exhausted all retries), and waitForSuccess is set. The node is not usable for running tasks.
    types:
    - uid: string
    name: starttaskfailed
  - description: The Batch service has lost contact with the node, and does not know its true state.
    types:
    - uid: string
    name: unknown
  - description: The node is leaving the pool, either because the user explicitly removed it or because the pool is resizing or autoscaling down.
    types:
    - uid: string
    name: leavingpool
  - description: The node is not currently running a task, and scheduling of new tasks to the node is disabled.
    types:
    - uid: string
    name: offline
  - description: The low-priority node has been preempted. Tasks which were running on the node when it was pre-empted will be rescheduled when another node becomes available.
    types:
    - uid: string
    name: preempted
- name: SchedulingState
  description: Whether the compute node is available for task scheduling.
  kind: enum
  properties:
  - description: Tasks can be scheduled on the node.
    types:
    - uid: string
    name: enabled
  - description: No new tasks will be scheduled on the node. Tasks already running on the node may still run to completion. All nodes start with scheduling enabled.
    types:
    - uid: string
    name: disabled
- name: TaskInformation
  description: Information about a task running on a compute node.
  kind: object
  properties:
  - description: The URL of the task.
    types:
    - uid: string
    name: taskUrl
  - description: The ID of the job to which the task belongs.
    types:
    - uid: string
    name: jobId
  - description: The ID of the task.
    types:
    - uid: string
    name: taskId
  - description: The ID of the subtask if the task is a multi-instance task.
    types:
    - uid: integer
    name: subtaskId
  - description: The current state of the task.
    types:
    - uid: TaskState
    name: taskState
  - description: Information about the execution of the task.
    types:
    - uid: TaskExecutionInformation
    name: executionInfo
- name: StartTask
  description: A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.
  kind: object
  properties:
  - description: >-
      The command line of the start task.

      The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
    types:
    - uid: string
    name: commandLine
  - description: >-
      The settings for the container under which the start task runs.

      When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
    types:
    - uid: TaskContainerSettings
    name: containerSettings
  - description: A file to be downloaded from Azure blob storage to a compute node.
    types:
    - isArray: true
      uid: ResourceFile
    name: resourceFiles
  - description: An environment variable to be set on a task process.
    types:
    - isArray: true
      uid: EnvironmentSetting
    name: environmentSettings
  - description: >-
      The user identity under which the start task runs.

      If omitted, the task runs as a non-administrative user unique to the task.
    types:
    - uid: UserIdentity
    name: userIdentity
  - description: >-
      The maximum number of times the task may be retried.

      The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
    types:
    - uid: integer
    name: maxTaskRetryCount
  - description: >-
      Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node.

      If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.
    types:
    - uid: boolean
    name: waitForSuccess
- name: StartTaskInformation
  description: Information about a start task running on a compute node.
  kind: object
  properties:
  - description: The state of the start task on the compute node.
    types:
    - uid: StartTaskState
    name: state
  - description: >-
      The time at which the start task started running.

      This value is reset every time the task is restarted or retried (that is, this is the most recent time at which the start task started running).
    types:
    - uid: string
    name: startTime
  - description: >-
      The time at which the start task stopped running.

      This is the end time of the most recent run of the start task, if that run has completed (even if that run failed and a retry is pending). This element is not present if the start task is currently running.
    types:
    - uid: string
    name: endTime
  - description: >-
      The exit code of the program specified on the start task command line.

      This property is set only if the start task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the start task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
    types:
    - uid: integer
    name: exitCode
  - description: >-
      Information about the container under which the task is executing.

      This property is set only if the task runs in a container context.
    types:
    - uid: TaskContainerExecutionInformation
    name: containerInfo
  - description: >-
      Information describing the task failure, if any.

      This property is set only if the task is in the completed state and encountered a failure.
    types:
    - uid: TaskFailureInformation
    name: failureInfo
  - description: >-
      The number of times the task has been retried by the Batch service.

      Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.
    types:
    - uid: integer
    name: retryCount
  - description: >-
      The most recent time at which a retry of the task started running.

      This element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.
    types:
    - uid: string
    name: lastRetryTime
  - description: >-
      The result of the task execution.

      If the value is 'failed', then the details of the failure can be found in the failureInfo property.
    types:
    - uid: TaskExecutionResult
    name: result
- name: CertificateReference
  description: A reference to a certificate to be installed on compute nodes in a pool.
  kind: object
  properties:
  - description: The thumbprint of the certificate.
    types:
    - uid: string
    name: thumbprint
  - description: The algorithm with which the thumbprint is associated. This must be sha1.
    types:
    - uid: string
    name: thumbprintAlgorithm
  - description: >-
      The location of the certificate store on the compute node into which to install the certificate.

      The default value is currentuser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
    types:
    - uid: CertificateStoreLocation
    name: storeLocation
  - description: >-
      The name of the certificate store on the compute node into which to install the certificate.

      This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
    types:
    - uid: string
    name: storeName
  - description: >-
      Which user accounts on the compute node should have access to the private data of the certificate.

      You can specify more than one visibility in this collection. The default is all accounts.
    types:
    - isArray: true
      uid: string
    name: visibility
- name: ComputeNodeError
  description: An error encountered by a compute node.
  kind: object
  properties:
  - description: An identifier for the compute node error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
    name: code
  - description: A message describing the compute node error, intended to be suitable for display in a user interface.
    types:
    - uid: string
    name: message
  - description: Represents a name-value pair.
    types:
    - isArray: true
      uid: NameValuePair
    name: errorDetails
- name: ComputeNodeEndpointConfiguration
  description: The endpoint configuration for the compute node.
  kind: object
  properties:
  - description: An inbound endpoint on a compute node.
    types:
    - isArray: true
      uid: InboundEndpoint
    name: inboundEndpoints
- name: TaskState
  description: The current state of the task.
  kind: enum
  properties:
  - description: The task is queued and able to run, but is not currently assigned to a compute node. A task enters this state when it is created, when it is enabled after being disabled, or when it is awaiting a retry after a failed run.
    types:
    - uid: string
    name: active
  - description: The task has been assigned to a compute node, but is waiting for a required Job Preparation task to complete on the node. If the Job Preparation task succeeds, the task will move to running. If the Job Preparation task fails, the task will return to active and will be eligible to be assigned to a different node.
    types:
    - uid: string
    name: preparing
  - description: The task is running on a compute node. This includes task-level preparation such as downloading resource files or deploying application packages specified on the task - it does not necessarily mean that the task command line has started executing.
    types:
    - uid: string
    name: running
  - description: The task is no longer eligible to run, usually because the task has finished successfully, or the task has finished unsuccessfully and has exhausted its retry limit. A task is also marked as completed if an error occurred launching the task, or when the task has been terminated.
    types:
    - uid: string
    name: completed
- name: TaskExecutionInformation
  description: Information about the execution of a task.
  kind: object
  properties:
  - description: >-
      The time at which the task started running.

      'Running' corresponds to the running state, so if the task specifies resource files or application packages, then the start time reflects the time at which the task started downloading or deploying these. If the task has been restarted or retried, this is the most recent time at which the task started running. This property is present only for tasks that are in the running or completed state.
    types:
    - uid: string
    name: startTime
  - description: >-
      The time at which the task completed.

      This property is set only if the task is in the Completed state.
    types:
    - uid: string
    name: endTime
  - description: >-
      The exit code of the program specified on the task command line.

      This property is set only if the task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
    types:
    - uid: integer
    name: exitCode
  - description: >-
      Information about the container under which the task is executing.

      This property is set only if the task runs in a container context.
    types:
    - uid: TaskContainerExecutionInformation
    name: containerInfo
  - description: >-
      Information describing the task failure, if any.

      This property is set only if the task is in the completed state and encountered a failure.
    types:
    - uid: TaskFailureInformation
    name: failureInfo
  - description: >-
      The number of times the task has been retried by the Batch service.

      Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.
    types:
    - uid: integer
    name: retryCount
  - description: >-
      The most recent time at which a retry of the task started running.

      This element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.
    types:
    - uid: string
    name: lastRetryTime
  - description: >-
      The number of times the task has been requeued by the Batch service as the result of a user request.

      When the user removes nodes from a pool (by resizing/shrinking the pool) or when the job is being disabled, the user can specify that running tasks on the nodes be requeued for execution. This count tracks how many times the task has been requeued for these reasons.
    types:
    - uid: integer
    name: requeueCount
  - description: >-
      The most recent time at which the task has been requeued by the Batch service as the result of a user request.

      This property is set only if the requeueCount is nonzero.
    types:
    - uid: string
    name: lastRequeueTime
  - description: >-
      The result of the task execution.

      If the value is 'failed', then the details of the failure can be found in the failureInfo property.
    types:
    - uid: TaskExecutionResult
    name: result
- name: TaskContainerSettings
  description: The container settings for a task.
  kind: object
  properties:
  - description: >-
      Additional options to the container create command.

      These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
    types:
    - uid: string
    name: containerRunOptions
  - description: >-
      The image to use to create the container in which the task will run.

      This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
    types:
    - uid: string
    name: imageName
  - description: >-
      The private registry which contains the container image.

      This setting can be omitted if was already provided at pool creation.
    types:
    - uid: ContainerRegistry
    name: registry
- name: ResourceFile
  description: A file to be downloaded from Azure blob storage to a compute node.
  kind: object
  properties:
  - description: >-
      The URL of the file within Azure Blob Storage.

      This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
    types:
    - uid: string
    name: blobSource
  - description: The location on the compute node to which to download the file, relative to the task's working directory.
    types:
    - uid: string
    name: filePath
  - description: >-
      The file permission mode attribute in octal format.

      This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
    types:
    - uid: string
    name: fileMode
- name: EnvironmentSetting
  description: An environment variable to be set on a task process.
  kind: object
  properties:
  - description: The name of the environment variable.
    types:
    - uid: string
    name: name
  - description: The value of the environment variable.
    types:
    - uid: string
    name: value
- name: UserIdentity
  description: >-
    The definition of the user identity under which the task is run.

    Specify either the userName or autoUser property, but not both.
  kind: object
  properties:
  - description: >-
      The name of the user identity under which the task is run.

      The userName and autoUser properties are mutually exclusive; you must specify one but not both.
    types:
    - uid: string
    name: username
  - description: >-
      The auto user under which the task is run.

      The userName and autoUser properties are mutually exclusive; you must specify one but not both.
    types:
    - uid: AutoUserSpecification
    name: autoUser
- name: StartTaskState
  description: The state of the start task on the compute node.
  kind: enum
  properties:
  - description: The start task is currently running.
    types:
    - uid: string
    name: running
  - description: The start task has exited with exit code 0, or the start task has failed and the retry limit has reached, or the start task process did not run due to task preparation errors (such as resource file download failures).
    types:
    - uid: string
    name: completed
- name: TaskContainerExecutionInformation
  description: Contains information about the container which a task is executing.
  kind: object
  properties:
  - description: The ID of the container.
    types:
    - uid: string
    name: containerId
  - description: >-
      The state of the container.

      This is the state of the container according to the Docker service. It is equivalent to the status field returned by "docker inspect".
    types:
    - uid: string
    name: state
  - description: >-
      Detailed error information about the container.

      This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by "docker inspect".
    types:
    - uid: string
    name: error
- name: TaskFailureInformation
  description: Information about a task failure.
  kind: object
  properties:
  - description: The category of the task error.
    types:
    - uid: ErrorCategory
    name: category
  - description: An identifier for the task error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
    name: code
  - description: A message describing the task error, intended to be suitable for display in a user interface.
    types:
    - uid: string
    name: message
  - description: Represents a name-value pair.
    types:
    - isArray: true
      uid: NameValuePair
    name: details
- name: TaskExecutionResult
  description: >-
    The result of the task execution.

    If the value is 'failed', then the details of the failure can be found in the failureInfo property.
  kind: enum
  properties:
  - description: The task ran successfully.
    types:
    - uid: string
    name: success
  - description: There was an error during processing of the task. The failure may have occurred before the task process was launched, while the task process was executing, or after the task process exited.
    types:
    - uid: string
    name: failure
- name: CertificateStoreLocation
  description: >-
    The location of the certificate store on the compute node into which to install the certificate.

    The default value is currentuser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
  kind: enum
  properties:
  - description: Certificates should be installed to the CurrentUser certificate store.
    types:
    - uid: string
    name: currentuser
  - description: Certificates should be installed to the LocalMachine certificate store.
    types:
    - uid: string
    name: localmachine
- name: NameValuePair
  description: Represents a name-value pair.
  kind: object
  properties:
  - description: The name in the name-value pair.
    types:
    - uid: string
    name: name
  - description: The value in the name-value pair.
    types:
    - uid: string
    name: value
- name: InboundEndpoint
  description: The list of inbound endpoints that are accessible on the compute node.
  kind: object
  properties:
  - description: The name of the endpoint.
    types:
    - uid: string
    name: name
  - description: The protocol of the endpoint.
    types:
    - uid: InboundEndpointProtocol
    name: protocol
  - description: The public IP address of the compute node.
    types:
    - uid: string
    name: publicIPAddress
  - description: The public fully qualified domain name for the compute node.
    types:
    - uid: string
    name: publicFQDN
  - description: The public port number of the endpoint.
    types:
    - uid: integer
    name: frontendPort
  - description: The backend port number of the endpoint.
    types:
    - uid: integer
    name: backendPort
- name: ContainerRegistry
  description: >-
    The private registry which contains the container image.

    This setting can be omitted if was already provided at pool creation.
  kind: object
  properties:
  - description: >-
      The registry URL.

      If omitted, the default is "docker.io".
    types:
    - uid: string
    name: registryServer
  - description: The user name to log into the registry server.
    types:
    - uid: string
    name: username
  - description: The password to log into the registry server.
    types:
    - uid: string
    name: password
- name: AutoUserSpecification
  description: Specifies the parameters for the auto user that runs a task on the Batch service.
  kind: object
  properties:
  - description: >-
      The scope for the auto user

      The default value is task.
    types:
    - uid: AutoUserScope
    name: scope
  - description: >-
      The elevation level of the auto user.

      nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
    types:
    - uid: ElevationLevel
    name: elevationLevel
- name: ErrorCategory
  description: The category of the job scheduling error.
  kind: enum
  properties:
  - description: The error is due to a user issue, such as misconfiguration.
    types:
    - uid: string
    name: usererror
  - description: The error is due to an internal server issue.
    types:
    - uid: string
    name: servererror
- name: InboundEndpointProtocol
  description: The protocol of the endpoint.
  kind: enum
  properties:
  - description: Use TCP for the endpoint.
    types:
    - uid: string
    name: tcp
  - description: Use UDP for the endpoint.
    types:
    - uid: string
    name: udp
- name: AutoUserScope
  description: >-
    The scope for the auto user

    The default value is task.
  kind: enum
  properties:
  - description: Specifies that the service should create a new user for the task.
    types:
    - uid: string
    name: task
  - description: Specifies that the task runs as the common auto user account which is created on every node in a pool.
    types:
    - uid: string
    name: pool
- name: ElevationLevel
  description: >-
    The elevation level of the auto user.

    nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
  kind: enum
  properties:
  - description: The user is a standard user without elevated access.
    types:
    - uid: string
    name: nonadmin
  - description: The user is a user with elevated access and operates with full Administrator permissions.
    types:
    - uid: string
    name: admin
examples:
- request:
    uri: GET https://batch.core.windows.net/pools/poolId/nodes?api-version=2017-09-01.6.0
    headers:
    - value: 00000000-0000-0000-0000-000000000000
      name: client-request-id
  responses:
  - statusCode: "200"
    body: >-
      {
        "value": [
          {
            "id": "tvm-1695681911_1-20161122t193202z",
            "url": "https://account.region.batch.azure.com/pools/poolId/nodes/tvm-1695681911_1-20161122t193202z",
            "state": "idle",
            "schedulingState": "enabled",
            "stateTransitionTime": "2016-11-22T22:22:27.2236818Z",
            "lastBootTime": "2016-11-22T22:22:24.4634125Z",
            "allocationTime": "2016-11-22T19:32:02.8155319Z",
            "ipAddress": "1.1.1.1",
            "affinityId": "TVM:tvm-1695681911_1-20161122t193202z",
            "vmSize": "small",
            "totalTasksRun": 0,
            "totalTasksSucceeded": 0,
            "runningTasksCount": 0,
            "isDedicated": true,
            "startTask": {
              "commandLine": "cmd /c echo hello",
              "userIdentity": {
                "autoUser": {
                  "scope": "task",
                  "elevationLevel": "nonadmin"
                }
              },
              "maxTaskRetryCount": 0,
              "waitForSuccess": false
            },
            "startTaskInfo": {
              "state": "completed",
              "startTime": "2016-11-22T22:22:27.2236818Z",
              "endTime": "2016-11-22T22:22:27.567189Z",
              "exitCode": 0,
              "retryCount": 0
            }
          },
          {
            "id": "tvm-1695681911_2-20161122t193202z",
            "url": "https://account.region.batch.azure.com/pools/poolId/nodes/tvm-1695681911_2-20161122t193202z",
            "state": "idle",
            "schedulingState": "enabled",
            "stateTransitionTime": "2016-11-22T19:37:31.4285526Z",
            "lastBootTime": "2016-11-22T19:37:28.623369Z",
            "allocationTime": "2016-11-22T19:32:02.8155319Z",
            "ipAddress": "1.1.1.1",
            "affinityId": "TVM:tvm-1695681911_2-20161122t193202z",
            "vmSize": "small",
            "totalTasksRun": 0,
            "totalTasksSucceeded": 0,
            "runningTasksCount": 0,
            "isDedicated": true,
            "startTask": {
              "commandLine": "cmd /c echo hello",
              "userIdentity": {
                "autoUser": {
                  "scope": "task",
                  "elevationLevel": "nonadmin"
                }
              },
              "maxTaskRetryCount": 0,
              "waitForSuccess": false
            },
            "startTaskInfo": {
              "state": "completed",
              "startTime": "2016-11-22T19:37:31.4285526Z",
              "endTime": "2016-11-22T19:37:31.838028Z",
              "exitCode": 0,
              "retryCount": 0
            }
          },
          {
            "id": "tvm-1695681911_3-20161122t193202z",
            "url": "https://account.region.batch.azure.com/pools/poolId/nodes/tvm-1695681911_3-20161122t193202z",
            "state": "idle",
            "schedulingState": "enabled",
            "stateTransitionTime": "2016-11-22T19:36:51.0013378Z",
            "lastBootTime": "2016-11-22T19:36:48.21721Z",
            "allocationTime": "2016-11-22T19:32:02.8155319Z",
            "ipAddress": "1.1.1.1",
            "affinityId": "TVM:tvm-1695681911_3-20161122t193202z",
            "vmSize": "small",
            "totalTasksRun": 0,
            "totalTasksSucceeded": 0,
            "runningTasksCount": 0,
            "isDedicated": true,
            "startTask": {
              "commandLine": "cmd /c echo hello",
              "userIdentity": {
                "autoUser": {
                  "scope": "task",
                  "elevationLevel": "nonadmin"
                }
              },
              "maxTaskRetryCount": 0,
              "waitForSuccess": false
            },
            "startTaskInfo": {
              "state": "completed",
              "startTime": "2016-11-22T19:36:51.0013378Z",
              "endTime": "2016-11-22T19:36:51.2363447Z",
              "exitCode": 0,
              "retryCount": 0
            }
          }
        ]
      }
  name: Node list
security: []
name: List
uid: batch.core.windows.net.batchservice.computenode.list
