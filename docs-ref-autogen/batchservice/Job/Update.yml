### YamlMime:RESTOperation
summary: Updates the properties of the specified job. This fully replaces all the updateable properties of the job. For example, if the job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.
service: Batch Service
apiVersion: 2017-09-01.6.0
groupName: Job
consumes:
- application/json; odata=minimalmetadata
produces:
- application/json
paths:
- content: PUT https://batch.core.windows.net/jobs/{jobId}?api-version=2017-09-01.6.0
- content: PUT https://batch.core.windows.net/jobs/{jobId}?timeout={timeout}&api-version=2017-09-01.6.0
  isOptional: true
uriParameters:
- in: path
  isRequired: true
  description: The ID of the job whose properties you want to update.
  types:
  - uid: string
  name: jobId
- in: query
  description: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
  types:
  - uid: integer
  format: int32
  name: timeout
- in: query
  isRequired: true
  description: Client API Version.
  types:
  - uid: string
  name: api-version
responses:
- headers:
  - value: string
    name: client-request-id
  - value: string
    name: request-id
  - value: string
    name: ETag
  - value: string
    name: Last-Modified
  - value: string
    name: DataServiceId
  description: The request to the Batch service was successful.
  name: 200 OK
- description: The error from the Batch service.
  types:
  - uid: BatchError
  name: Other Status Codes
requestBody:
- parameters:
  - in: body
    description: >-
      The priority of the job.

      Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, it is set to the default value 0.
    types:
    - uid: integer
    name: priority
  - in: body
    description: >-
      The execution constraints for the job.

      If omitted, the constraints are cleared.
    types:
    - uid: JobConstraints
    name: constraints
  - in: body
    isRequired: true
    description: >-
      The pool on which the Batch service runs the job's tasks.

      You may change the pool for a job only when the job is disabled. The Update Job call will fail if you include the poolInfo element and the job is not disabled. If you specify an autoPoolSpecification specification in the poolInfo, only the keepAlive property can be updated, and then only if the auto pool has a poolLifetimeOption of job.
    types:
    - uid: PoolInformation
    name: poolInfo
  - in: body
    description: >-
      A name-value pair associated with a Batch service resource.

      The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
    types:
    - isArray: true
      uid: MetadataItem
    name: metadata
  - in: body
    description: >-
      The action the Batch service should take when all tasks in the job are in the completed state.

      If omitted, the completion behavior is set to noaction. If the current value is terminatejob, this is an error because a job's completion behavior may not be changed from terminatejob to noaction. You may not change the value from terminatejob to noaction - that is, once you have engaged automatic job termination, you cannot turn it off again. If you try to do this, the request fails and Batch returns status code 400 (Bad Request) and an 'invalid property value' error response. If you do not specify this element in a PUT request, it is equivalent to passing noaction. This is an error if the current value is terminatejob.
    types:
    - uid: OnAllTasksComplete
    name: onAllTasksComplete
requestHeader:
- in: header
  description: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
  types:
  - uid: string
  format: uuid
  name: client-request-id
- in: header
  description: Whether the server should return the client-request-id in the response.
  types:
  - uid: boolean
  name: return-client-request-id
- in: header
  description: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
  types:
  - uid: string
  format: date-time-rfc1123
  name: ocp-date
- in: header
  description: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
  types:
  - uid: string
  name: If-Match
- in: header
  description: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
  types:
  - uid: string
  name: If-None-Match
- in: header
  description: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
  types:
  - uid: string
  format: date-time-rfc1123
  name: If-Modified-Since
- in: header
  description: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
  types:
  - uid: string
  format: date-time-rfc1123
  name: If-Unmodified-Since
definitions:
- name: JobConstraints
  description: The execution constraints for a job.
  kind: object
  properties:
  - description: >-
      The maximum elapsed time that the job may run, measured from the time the job is created.

      If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run.
    types:
    - uid: string
    name: maxWallClockTime
  - description: >-
      The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero.

      Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).
    types:
    - uid: integer
    name: maxTaskRetryCount
- name: PoolInformation
  description: Specifies how a job should be assigned to a pool.
  kind: object
  properties:
  - description: >-
      The ID of an existing pool. All the tasks of the job will run on the specified pool.

      You must ensure that the pool referenced by this property exists. If the pool does not exist at the time the Batch service tries to schedule a job, no tasks for the job will run until you create a pool with that id. Note that the Batch service will not reject the job request; it will simply not run tasks until the pool exists. You must specify either the pool ID or the auto pool specification, but not both.
    types:
    - uid: string
    name: poolId
  - description: >-
      Characteristics for a temporary 'auto pool'. The Batch service will create this auto pool when the job is submitted.

      If auto pool creation fails, the Batch service moves the job to a completed state, and the pool creation error is set in the job's scheduling error property. The Batch service manages the lifetime (both creation and, unless keepAlive is specified, deletion) of the auto pool. Any user actions that affect the lifetime of the auto pool while the job is active will result in unexpected behavior. You must specify either the pool ID or the auto pool specification, but not both.
    types:
    - uid: AutoPoolSpecification
    name: autoPoolSpecification
- name: MetadataItem
  description: A name-value pair associated with a Batch service resource.
  kind: object
  properties:
  - description: The name of the metadata item.
    types:
    - uid: string
    name: name
  - description: The value of the metadata item.
    types:
    - uid: string
    name: value
- name: BatchError
  description: The error encountered while attempting to add the task.
  kind: object
  properties:
  - description: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
    name: code
  - description: A message describing the error, intended to be suitable for display in a user interface.
    types:
    - uid: ErrorMessage
    name: message
  - description: An item of additional information included in an Azure Batch error response.
    types:
    - isArray: true
      uid: BatchErrorDetail
    name: values
- name: JobUpdateParameter
  description: The set of changes to be made to a job.
  kind: object
  properties:
  - description: >-
      The priority of the job.

      Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, it is set to the default value 0.
    types:
    - uid: integer
    name: priority
  - description: >-
      The execution constraints for the job.

      If omitted, the constraints are cleared.
    types:
    - uid: JobConstraints
    name: constraints
  - description: >-
      The pool on which the Batch service runs the job's tasks.

      You may change the pool for a job only when the job is disabled. The Update Job call will fail if you include the poolInfo element and the job is not disabled. If you specify an autoPoolSpecification specification in the poolInfo, only the keepAlive property can be updated, and then only if the auto pool has a poolLifetimeOption of job.
    types:
    - uid: PoolInformation
    name: poolInfo
  - description: >-
      A name-value pair associated with a Batch service resource.

      The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
    types:
    - isArray: true
      uid: MetadataItem
    name: metadata
  - description: >-
      The action the Batch service should take when all tasks in the job are in the completed state.

      If omitted, the completion behavior is set to noaction. If the current value is terminatejob, this is an error because a job's completion behavior may not be changed from terminatejob to noaction. You may not change the value from terminatejob to noaction - that is, once you have engaged automatic job termination, you cannot turn it off again. If you try to do this, the request fails and Batch returns status code 400 (Bad Request) and an 'invalid property value' error response. If you do not specify this element in a PUT request, it is equivalent to passing noaction. This is an error if the current value is terminatejob.
    types:
    - uid: OnAllTasksComplete
    name: onAllTasksComplete
- name: AutoPoolSpecification
  description: Specifies characteristics for a temporary 'auto pool'. The Batch service will create this auto pool when the job is submitted.
  kind: object
  properties:
  - description: >-
      A prefix to be added to the unique identifier when a pool is automatically created.

      The Batch service assigns each auto pool a unique identifier on creation. To distinguish between pools created for different purposes, you can specify this element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
    types:
    - uid: string
    name: autoPoolIdPrefix
  - description: The minimum lifetime of created auto pools, and how multiple jobs on a schedule are assigned to pools.
    types:
    - uid: PoolLifetimeOption
    name: poolLifetimeOption
  - description: >-
      Whether to keep an auto pool alive after its lifetime expires.

      If false, the Batch service deletes the pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the job or job schedule completes. If true, the Batch service does not delete the pool automatically. It is up to the user to delete auto pools created with this option.
    types:
    - uid: boolean
    name: keepAlive
  - description: The pool specification for the auto pool.
    types:
    - uid: PoolSpecification
    name: pool
- name: ErrorMessage
  description: A message describing the error, intended to be suitable for display in a user interface.
  kind: object
  properties:
  - description: The language code of the error message
    types:
    - uid: string
    name: lang
  - description: The text of the message.
    types:
    - uid: string
    name: value
- name: BatchErrorDetail
  description: A collection of key-value pairs containing additional details about the error.
  kind: object
  properties:
  - description: An identifier specifying the meaning of the Value property.
    types:
    - uid: string
    name: key
  - description: The additional information included with the error response.
    types:
    - uid: string
    name: value
- name: OnAllTasksComplete
  description: The action the Batch service should take when all tasks in a job created under this schedule are in the completed state.
  kind: enum
  properties:
  - description: Do nothing. The job remains active unless terminated or disabled by some other means.
    types:
    - uid: string
    name: noaction
  - description: Terminate the job. The job's terminateReason is set to 'AllTasksComplete'.
    types:
    - uid: string
    name: terminatejob
- name: PoolLifetimeOption
  description: The minimum lifetime of created auto pools, and how multiple jobs on a schedule are assigned to pools.
  kind: enum
  properties:
  - description: The pool exists for the lifetime of the job schedule. The Batch Service creates the pool when it creates the first job on the schedule. You may apply this option only to job schedules, not to jobs.
    types:
    - uid: string
    name: jobschedule
  - description: The pool exists for the lifetime of the job to which it is dedicated. The Batch service creates the pool when it creates the job. If the 'job' option is applied to a job schedule, the Batch service creates a new auto pool for every job created on the schedule.
    types:
    - uid: string
    name: job
- name: PoolSpecification
  description: Specification for creating a new pool.
  kind: object
  properties:
  - description: >-
      The display name for the pool.

      The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
    types:
    - uid: string
    name: displayName
  - description: >-
      The size of the virtual machines in the pool. All virtual machines in a pool are the same size.

      For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
    types:
    - uid: string
    name: vmSize
  - description: >-
      The cloud service configuration for the pool.

      This property must be specified if the pool needs to be created with Azure PaaS VMs. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
    types:
    - uid: CloudServiceConfiguration
    name: cloudServiceConfiguration
  - description: >-
      The virtual machine configuration for the pool.

      This property must be specified if the pool needs to be created with Azure IaaS VMs. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
    types:
    - uid: VirtualMachineConfiguration
    name: virtualMachineConfiguration
  - description: >-
      The maximum number of tasks that can run concurrently on a single compute node in the pool.

      The default value is 1. The maximum value of this setting depends on the size of the compute nodes in the pool (the vmSize setting).
    types:
    - uid: integer
    name: maxTasksPerNode
  - description: How tasks are distributed across compute nodes in a pool.
    types:
    - uid: TaskSchedulingPolicy
    name: taskSchedulingPolicy
  - description: >-
      The timeout for allocation of compute nodes to the pool.

      This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
    types:
    - uid: string
    name: resizeTimeout
  - description: >-
      The desired number of dedicated compute nodes in the pool.

      This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
    types:
    - uid: integer
    name: targetDedicatedNodes
  - description: >-
      The desired number of low-priority compute nodes in the pool.

      This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
    types:
    - uid: integer
    name: targetLowPriorityNodes
  - description: >-
      Whether the pool size should automatically adjust over time.

      If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula element is required. The pool automatically resizes according to the formula. The default value is false.
    types:
    - uid: boolean
    name: enableAutoScale
  - description: >-
      The formula for the desired number of compute nodes in the pool.

      This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information.
    types:
    - uid: string
    name: autoScaleFormula
  - description: >-
      The time interval at which to automatically adjust the pool size according to the autoscale formula.

      The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
    types:
    - uid: string
    name: autoScaleEvaluationInterval
  - description: >-
      Whether the pool permits direct communication between nodes.

      Enabling inter-node communication limits the maximum size of the pool due to deployment restrictions on the nodes of the pool. This may result in the pool not reaching its desired size. The default value is false.
    types:
    - uid: boolean
    name: enableInterNodeCommunication
  - description: >-
      The network configuration for the pool.

      The network configuration for a pool.
    types:
    - uid: NetworkConfiguration
    name: networkConfiguration
  - description: A task to run on each compute node as it joins the pool. The task runs when the node is added to the pool or when the node is restarted.
    types:
    - uid: StartTask
    name: startTask
  - description: A reference to a certificate to be installed on compute nodes in a pool.
    types:
    - isArray: true
      uid: CertificateReference
    name: certificateReferences
  - description: A reference to an application package to be deployed to compute nodes.
    types:
    - isArray: true
      uid: ApplicationPackageReference
    name: applicationPackageReferences
  - description: >-
      The list of application licenses the Batch service will make available on each compute node in the pool.

      The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
    types:
    - isArray: true
      uid: string
    name: applicationLicenses
  - description: Properties used to create a user used to execute tasks on an Azure Batch node.
    types:
    - isArray: true
      uid: UserAccount
    name: userAccounts
  - description: >-
      A name-value pair associated with a Batch service resource.

      The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
    types:
    - isArray: true
      uid: MetadataItem
    name: metadata
- name: CloudServiceConfiguration
  description: The cloud service configuration for the pool.
  kind: object
  properties:
  - description: >-
      The Azure Guest OS family to be installed on the virtual machines in the pool.

      Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
    types:
    - uid: string
    name: osFamily
  - description: >-
      The Azure Guest OS version to be installed on the virtual machines in the pool.

      The default value is * which specifies the latest operating system version for the specified OS family.
    types:
    - uid: string
    name: targetOSVersion
  - isReadyOnly: true
    description: >-
      The Azure Guest OS Version currently installed on the virtual machines in the pool.

      This may differ from targetOSVersion if the pool state is Upgrading. In this case some virtual machines may be on the targetOSVersion and some may be on the currentOSVersion during the upgrade process. Once all virtual machines have upgraded, currentOSVersion is updated to be the same as targetOSVersion.
    types:
    - uid: string
    name: currentOSVersion
- name: VirtualMachineConfiguration
  description: The virtual machine configuration for the pool.
  kind: object
  properties:
  - description: A reference to the Azure Virtual Machines Marketplace image or the custom Virtual Machine image to use.
    types:
    - uid: ImageReference
    name: imageReference
  - description: Settings for the operating system disk of the Virtual Machine.
    types:
    - uid: OSDisk
    name: osDisk
  - description: >-
      The SKU of the Batch node agent to be provisioned on compute nodes in the pool.

      The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
    types:
    - uid: string
    name: nodeAgentSKUId
  - description: >-
      Windows operating system settings on the virtual machine.

      This property must not be specified if the imageReference or osDisk property specifies a Linux OS image.
    types:
    - uid: WindowsConfiguration
    name: windowsConfiguration
  - description: Settings which will be used by the data disks associated to compute nodes in the pool.
    types:
    - isArray: true
      uid: DataDisk
    name: dataDisks
  - description: >-
      The type of on-premises license to be used when deploying the operating system.

      This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:

       Windows_Server - The on-premises license is for Windows Server.
       Windows_Client - The on-premises license is for Windows Client.
    types:
    - uid: string
    name: licenseType
  - description: >-
      The container configuration for the pool.

      If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
    types:
    - uid: ContainerConfiguration
    name: containerConfiguration
- name: TaskSchedulingPolicy
  description: Specifies how tasks should be distributed across compute nodes.
  kind: object
  properties:
  - description: How tasks are distributed across compute nodes in a pool.
    types:
    - uid: ComputeNodeFillType
    name: nodeFillType
- name: NetworkConfiguration
  description: The network configuration for the pool.
  kind: object
  properties:
  - description: >-
      The ARM resource identifier of the virtual network subnet which the compute nodes of the pool will join. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.

      The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. For pools created with virtualMachineConfiguration only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported, but for pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
    types:
    - uid: string
    name: subnetId
  - description: >-
      The configuration for endpoints on compute nodes in the Batch pool.

      Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
    types:
    - uid: PoolEndpointConfiguration
    name: endpointConfiguration
- name: StartTask
  description: A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.
  kind: object
  properties:
  - description: >-
      The command line of the start task.

      The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
    types:
    - uid: string
    name: commandLine
  - description: >-
      The settings for the container under which the start task runs.

      When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
    types:
    - uid: TaskContainerSettings
    name: containerSettings
  - description: A file to be downloaded from Azure blob storage to a compute node.
    types:
    - isArray: true
      uid: ResourceFile
    name: resourceFiles
  - description: An environment variable to be set on a task process.
    types:
    - isArray: true
      uid: EnvironmentSetting
    name: environmentSettings
  - description: >-
      The user identity under which the start task runs.

      If omitted, the task runs as a non-administrative user unique to the task.
    types:
    - uid: UserIdentity
    name: userIdentity
  - description: >-
      The maximum number of times the task may be retried.

      The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
    types:
    - uid: integer
    name: maxTaskRetryCount
  - description: >-
      Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node.

      If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.
    types:
    - uid: boolean
    name: waitForSuccess
- name: CertificateReference
  description: A reference to a certificate to be installed on compute nodes in a pool.
  kind: object
  properties:
  - description: The thumbprint of the certificate.
    types:
    - uid: string
    name: thumbprint
  - description: The algorithm with which the thumbprint is associated. This must be sha1.
    types:
    - uid: string
    name: thumbprintAlgorithm
  - description: >-
      The location of the certificate store on the compute node into which to install the certificate.

      The default value is currentuser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
    types:
    - uid: CertificateStoreLocation
    name: storeLocation
  - description: >-
      The name of the certificate store on the compute node into which to install the certificate.

      This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
    types:
    - uid: string
    name: storeName
  - description: >-
      Which user accounts on the compute node should have access to the private data of the certificate.

      You can specify more than one visibility in this collection. The default is all accounts.
    types:
    - isArray: true
      uid: string
    name: visibility
- name: ApplicationPackageReference
  description: A reference to an application package to be deployed to compute nodes.
  kind: object
  properties:
  - description: The ID of the application to deploy.
    types:
    - uid: string
    name: applicationId
  - description: >-
      The version of the application to deploy. If omitted, the default version is deployed.

      If this is omitted on a pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a task, and no default version is specified for this application, the task fails with a pre-processing error.
    types:
    - uid: string
    name: version
- name: UserAccount
  description: Properties used to create a user used to execute tasks on an Azure Batch node.
  kind: object
  properties:
  - description: The name of the user account.
    types:
    - uid: string
    name: name
  - description: The password for the user account.
    types:
    - uid: string
    name: password
  - description: >-
      The elevation level of the user account.

      nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
    types:
    - uid: ElevationLevel
    name: elevationLevel
  - description: >-
      The Linux-specific user configuration for the user account.

      This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
    types:
    - uid: LinuxUserConfiguration
    name: linuxUserConfiguration
- name: ImageReference
  description: The list of Azure Marketplace images verified to be compatible with this node agent SKU.
  kind: object
  properties:
  - description: >-
      The publisher of the Azure Virtual Machines Marketplace image.

      For example, Canonical or MicrosoftWindowsServer.
    types:
    - uid: string
    name: publisher
  - description: >-
      The offer type of the Azure Virtual Machines Marketplace image.

      For example, UbuntuServer or WindowsServer.
    types:
    - uid: string
    name: offer
  - description: >-
      The SKU of the Azure Virtual Machines Marketplace image.

      For example, 14.04.0-LTS or 2012-R2-Datacenter.
    types:
    - uid: string
    name: sku
  - description: >-
      The version of the Azure Virtual Machines Marketplace image.

      A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
    types:
    - uid: string
    name: version
  - description: >-
      The ARM resource identifier of the virtual machine image. Computes nodes of the pool will be created using this custom image. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}

      This property is mutually exclusive with other ImageReference properties. The virtual machine image must be in the same region and subscription as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
    types:
    - uid: string
    name: virtualMachineImageId
- name: OSDisk
  description: Settings for the operating system disk of the Virtual Machine.
  kind: object
  properties:
  - description: >-
      The type of caching to enable for the OS disk.

      The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
    types:
    - uid: CachingType
    name: caching
- name: WindowsConfiguration
  description: Windows operating system settings on the virtual machine.
  kind: object
  properties:
  - description: >-
      Whether automatic updates are enabled on the virtual machine.

      If omitted, the default value is true.
    types:
    - uid: boolean
    name: enableAutomaticUpdates
- name: DataDisk
  description: The configuration for data disks attached to the comptue nodes in the pool.
  kind: object
  properties:
  - description: >-
      The logical unit number.

      The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
    types:
    - uid: integer
    name: lun
  - description: >-
      The type of caching to be enabled for the data disks.

      The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
    types:
    - uid: CachingType
    name: caching
  - description: The initial disk size in gigabytes.
    types:
    - uid: integer
    name: diskSizeGB
  - description: >-
      The storage account type to be used for the data disk.

      If omitted, the default is "standard_lrs".
    types:
    - uid: StorageAccountType
    name: storageAccountType
- name: ContainerConfiguration
  description: The container configuration for the pool.
  kind: object
  properties:
  - description: The container technology to be used.
    types:
    - uid: ContainerType
    name: type
  - description: >-
      The collection of container image names.

      This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
    types:
    - isArray: true
      uid: string
    name: containerImageNames
  - description: A private container registry.
    types:
    - isArray: true
      uid: ContainerRegistry
    name: containerRegistries
- name: ComputeNodeFillType
  description: How tasks are distributed across compute nodes in a pool.
  kind: enum
  properties:
  - description: Tasks should be assigned evenly across all nodes in the pool.
    types:
    - uid: string
    name: spread
  - description: As many tasks as possible (maxTasksPerNode) should be assigned to each node in the pool before any tasks are assigned to the next node in the pool.
    types:
    - uid: string
    name: pack
- name: PoolEndpointConfiguration
  description: The configuration for endpoints on compute nodes in the Batch pool.
  kind: object
  properties:
  - description: A inbound NAT pool that can be used to address specific ports on compute nodes in a Batch pool externally.
    types:
    - isArray: true
      uid: InboundNATPool
    name: inboundNATPools
- name: TaskContainerSettings
  description: The container settings for a task.
  kind: object
  properties:
  - description: >-
      Additional options to the container create command.

      These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
    types:
    - uid: string
    name: containerRunOptions
  - description: >-
      The image to use to create the container in which the task will run.

      This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
    types:
    - uid: string
    name: imageName
  - description: >-
      The private registry which contains the container image.

      This setting can be omitted if was already provided at pool creation.
    types:
    - uid: ContainerRegistry
    name: registry
- name: ResourceFile
  description: A file to be downloaded from Azure blob storage to a compute node.
  kind: object
  properties:
  - description: >-
      The URL of the file within Azure Blob Storage.

      This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
    types:
    - uid: string
    name: blobSource
  - description: The location on the compute node to which to download the file, relative to the task's working directory.
    types:
    - uid: string
    name: filePath
  - description: >-
      The file permission mode attribute in octal format.

      This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
    types:
    - uid: string
    name: fileMode
- name: EnvironmentSetting
  description: An environment variable to be set on a task process.
  kind: object
  properties:
  - description: The name of the environment variable.
    types:
    - uid: string
    name: name
  - description: The value of the environment variable.
    types:
    - uid: string
    name: value
- name: UserIdentity
  description: The definition of the user identity under which the task is run.
  kind: object
  properties:
  - description: >-
      The name of the user identity under which the task is run.

      The userName and autoUser properties are mutually exclusive; you must specify one but not both.
    types:
    - uid: string
    name: username
  - description: >-
      The auto user under which the task is run.

      The userName and autoUser properties are mutually exclusive; you must specify one but not both.
    types:
    - uid: AutoUserSpecification
    name: autoUser
- name: CertificateStoreLocation
  description: The location of the certificate store on the compute node into which to install the certificate.
  kind: enum
  properties:
  - description: Certificates should be installed to the CurrentUser certificate store.
    types:
    - uid: string
    name: currentuser
  - description: Certificates should be installed to the LocalMachine certificate store.
    types:
    - uid: string
    name: localmachine
- name: ElevationLevel
  description: The elevation level of the auto user.
  kind: enum
  properties:
  - description: The user is a standard user without elevated access.
    types:
    - uid: string
    name: nonadmin
  - description: The user is a user with elevated access and operates with full Administrator permissions.
    types:
    - uid: string
    name: admin
- name: LinuxUserConfiguration
  description: Properties used to create a user account on a Linux node.
  kind: object
  properties:
  - description: >-
      The user ID of the user account.

      The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
    types:
    - uid: integer
    name: uid
  - description: >-
      The group ID for the user account.

      The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
    types:
    - uid: integer
    name: gid
  - description: >-
      The SSH private key for the user account.

      The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
    types:
    - uid: string
    name: sshPrivateKey
- name: CachingType
  description: The type of caching to enable for the OS disk.
  kind: enum
  properties:
  - description: The caching mode for the disk is not enabled.
    types:
    - uid: string
    name: none
  - description: The caching mode for the disk is read only.
    types:
    - uid: string
    name: readonly
  - description: The caching mode for the disk is read and write.
    types:
    - uid: string
    name: readwrite
- name: StorageAccountType
  description: The storage account type to be used for the data disk.
  kind: enum
  properties:
  - description: The data disk should use standard locally redundant storage.
    types:
    - uid: string
    name: standard_lrs
  - description: The data disk should use premium locally redundant storage.
    types:
    - uid: string
    name: premium_lrs
- name: ContainerType
  description: The container technology to be used.
  kind: enum
  properties:
  - description: Docker will be used to launch the containers.
    types:
    - uid: string
    name: docker
- name: ContainerRegistry
  description: The private registry which contains the container image.
  kind: object
  properties:
  - description: >-
      The registry URL.

      If omitted, the default is "docker.io".
    types:
    - uid: string
    name: registryServer
  - description: The user name to log into the registry server.
    types:
    - uid: string
    name: username
  - description: The password to log into the registry server.
    types:
    - uid: string
    name: password
- name: InboundNATPool
  description: A list of inbound NAT pools that can be used to address specific ports on an individual compute node externally.
  kind: object
  properties:
  - description: >-
      The name of the endpoint.

      The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
    types:
    - uid: string
    name: name
  - description: The protocol of the endpoint.
    types:
    - uid: InboundEndpointProtocol
    name: protocol
  - description: >-
      The port number on the compute node.

      This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
    types:
    - uid: integer
    name: backendPort
  - description: >-
      The first port number in the range of external ports that will be used to provide inbound access to the backendPort on individual compute nodes.

      Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
    types:
    - uid: integer
    name: frontendPortRangeStart
  - description: >-
      The last port number in the range of external ports that will be used to provide inbound access to the backendPort on individual compute nodes.

      Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
    types:
    - uid: integer
    name: frontendPortRangeEnd
  - description: A network security group rule to apply to an inbound endpoint.
    types:
    - isArray: true
      uid: NetworkSecurityGroupRule
    name: networkSecurityGroupRules
- name: AutoUserSpecification
  description: Specifies the parameters for the auto user that runs a task on the Batch service.
  kind: object
  properties:
  - description: >-
      The scope for the auto user

      The default value is task.
    types:
    - uid: AutoUserScope
    name: scope
  - description: >-
      The elevation level of the auto user.

      nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
    types:
    - uid: ElevationLevel
    name: elevationLevel
- name: InboundEndpointProtocol
  description: The protocol of the endpoint.
  kind: enum
  properties:
  - description: Use TCP for the endpoint.
    types:
    - uid: string
    name: tcp
  - description: Use UDP for the endpoint.
    types:
    - uid: string
    name: udp
- name: NetworkSecurityGroupRule
  description: A list of network security group rules that will be applied to the endpoint.
  kind: object
  properties:
  - description: >-
      The priority for this rule.

      Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 3500. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
    types:
    - uid: integer
    name: priority
  - description: The action that should be taken for a specified IP address, subnet range or tag.
    types:
    - uid: NetworkSecurityGroupRuleAccess
    name: access
  - description: >-
      The source address prefix or tag to match for the rule.

      Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
    types:
    - uid: string
    name: sourceAddressPrefix
- name: AutoUserScope
  description: The scope for the auto user
  kind: enum
  properties:
  - description: Specifies that the service should create a new user for the task.
    types:
    - uid: string
    name: task
  - description: Specifies that the task runs as the common auto user account which is created on every node in a pool.
    types:
    - uid: string
    name: pool
- name: NetworkSecurityGroupRuleAccess
  description: The action that should be taken for a specified IP address, subnet range or tag.
  kind: enum
  properties:
  - description: Allow access.
    types:
    - uid: string
    name: allow
  - description: Deny access.
    types:
    - uid: string
    name: deny
examples:
- request:
    uri: PUT https://batch.core.windows.net/jobs/jobId?api-version=2017-09-01.6.0
    body: >-
      {
        "priority": 100,
        "constraints": {
          "maxWallClockTime": "PT1H",
          "maxTaskRetryCount": -1
        },
        "poolInfo": {
          "poolId": "poolId"
        }
      }
    headers:
    - value: 00000000-0000-0000-0000-000000000000
      name: client-request-id
  responses:
  - statusCode: "200"
    body: "\"\""
  name: Job update
security: []
name: Update
uid: batch.core.windows.net.batchservice.job.update
