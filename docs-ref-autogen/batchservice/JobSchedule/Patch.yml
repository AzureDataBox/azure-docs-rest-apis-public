### YamlMime:RESTOperation
summary: Updates the properties of the specified job schedule. This replaces only the job schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.
service: Batch Service
apiVersion: 2017-09-01.6.0
groupName: Job Schedule
consumes:
- application/json; odata=minimalmetadata
produces:
- application/json
paths:
- content: PATCH https://batch.core.windows.net/jobschedules/{jobScheduleId}?api-version=2017-09-01.6.0
- content: PATCH https://batch.core.windows.net/jobschedules/{jobScheduleId}?timeout={timeout}&api-version=2017-09-01.6.0
  isOptional: true
uriParameters:
- in: path
  isRequired: true
  description: The ID of the job schedule to update.
  types:
  - uid: string
  name: jobScheduleId
- in: query
  description: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
  types:
  - uid: integer
  format: int32
  name: timeout
- in: query
  isRequired: true
  description: Client API Version.
  types:
  - uid: string
  name: api-version
responses:
- headers:
  - value: string
    name: client-request-id
  - value: string
    name: request-id
  - value: string
    name: ETag
  - value: string
    name: Last-Modified
  - value: string
    name: DataServiceId
  description: The request to the Batch service was successful.
  name: 200 OK
- description: The error from the Batch service.
  types:
  - uid: BatchError
  name: Other Status Codes
requestBody:
- parameters:
  - in: body
    description: If you do not specify this element, the existing schedule is left unchanged.
    types:
    - uid: Schedule
    name: schedule
  - in: body
    description: Updates affect only jobs that are started after the update has taken place. Any currently active job continues with the older specification.
    types:
    - uid: JobSpecification
    name: jobSpecification
  - in: body
    description: If you do not specify this element, existing metadata is left unchanged.
    types:
    - uid: MetadataItem
    name: metadata
requestHeader:
- in: header
  description: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
  types:
  - uid: string
  format: uuid
  name: client-request-id
- in: header
  description: Whether the server should return the client-request-id in the response.
  types:
  - uid: boolean
  name: return-client-request-id
- in: header
  description: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
  types:
  - uid: string
  format: date-time-rfc1123
  name: ocp-date
- in: header
  description: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
  types:
  - uid: string
  name: If-Match
- in: header
  description: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
  types:
  - uid: string
  name: If-None-Match
- in: header
  description: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
  types:
  - uid: string
  format: date-time-rfc1123
  name: If-Modified-Since
- in: header
  description: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
  types:
  - uid: string
  format: date-time-rfc1123
  name: If-Unmodified-Since
definitions:
- name: Schedule
  description: The schedule according to which jobs will be created
  kind: object
  properties:
  - description: If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately.
    types:
    - uid: string
    name: doNotRunUntil
  - description: If you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it.
    types:
    - uid: string
    name: doNotRunAfter
  - description: If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
    types:
    - uid: string
    name: startWindow
  - description: 'Because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).'
    types:
    - uid: string
    name: recurrenceInterval
- name: JobSpecification
  description: Specifies details of the jobs to be created on a schedule.
  kind: object
  properties:
  - description: Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job's priority after it has been created using by using the update job API.
    types:
    - uid: integer
    name: priority
  - description: The name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
    types:
    - uid: string
    name: displayName
  - description: Whether tasks in the job can define dependencies on each other. The default is false.
    types:
    - uid: boolean
    name: usesTaskDependencies
  - description: Note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction.
    types:
    - uid: OnAllTasksComplete
    name: onAllTasksComplete
  - description: The default is noaction.
    types:
    - uid: OnTaskFailure
    name: onTaskFailure
  - description: The execution constraints for jobs created under this schedule.
    types:
    - uid: JobConstraints
    name: constraints
  - description: If the job does not specify a Job Manager task, the user must explicitly add tasks to the job using the Task API. If the job does specify a Job Manager task, the Batch service creates the Job Manager task when the job is created, and will try to schedule the Job Manager task before scheduling other tasks in the job.
    types:
    - uid: JobManagerTask
    name: jobManagerTask
  - description: If a job has a Job Preparation task, the Batch service will run the Job Preparation task on a compute node before starting any tasks of that job on that compute node.
    types:
    - uid: JobPreparationTask
    name: jobPreparationTask
  - description: The primary purpose of the Job Release task is to undo changes to compute nodes made by the Job Preparation task. Example activities include deleting local files, or shutting down services that were started as part of job preparation. A Job Release task cannot be specified without also specifying a Job Preparation task for the job. The Batch service runs the Job Release task on the compute nodes that have run the Job Preparation task.
    types:
    - uid: JobReleaseTask
    name: jobReleaseTask
  - description: Individual tasks can override an environment setting specified here by specifying the same setting name with a different value.
    types:
    - uid: EnvironmentSetting
    name: commonEnvironmentSettings
  - description: The pool on which the Batch service runs the tasks of jobs created under this schedule.
    types:
    - uid: PoolInformation
    name: poolInfo
  - description: The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
    types:
    - uid: MetadataItem
    name: metadata
- name: MetadataItem
  description: The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
  kind: object
  properties:
  - description: The name of the metadata item.
    types:
    - uid: string
    name: name
  - description: The value of the metadata item.
    types:
    - uid: string
    name: value
- name: BatchError
  description: The error encountered while attempting to add the task.
  kind: object
  properties:
  - description: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
    name: code
  - description: A message describing the error, intended to be suitable for display in a user interface.
    types:
    - uid: ErrorMessage
    name: message
  - description: A collection of key-value pairs containing additional details about the error.
    types:
    - uid: BatchErrorDetail
    name: values
- name: JobSchedulePatchParameter
  description: The set of changes to be made to a job schedule.
  kind: object
  properties:
  - description: If you do not specify this element, the existing schedule is left unchanged.
    types:
    - uid: Schedule
    name: schedule
  - description: Updates affect only jobs that are started after the update has taken place. Any currently active job continues with the older specification.
    types:
    - uid: JobSpecification
    name: jobSpecification
  - description: If you do not specify this element, existing metadata is left unchanged.
    types:
    - uid: MetadataItem
    name: metadata
- name: OnAllTasksComplete
  description: Note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction.
  kind: enum
  properties:
  - description: Do nothing. The job remains active unless terminated or disabled by some other means.
    types:
    - uid: string
    name: noaction
  - description: Terminate the job. The job's terminateReason is set to 'AllTasksComplete'.
    types:
    - uid: string
    name: terminatejob
- name: OnTaskFailure
  description: The default is noaction.
  kind: enum
  properties:
  - description: Do nothing. The job remains active unless terminated or disabled by some other means.
    types:
    - uid: string
    name: noaction
  - description: Take the action associated with the task exit condition in the task's exitConditions collection. (This may still result in no action being taken, if that is what the task specifies.)
    types:
    - uid: string
    name: performexitoptionsjobaction
- name: JobConstraints
  description: The execution constraints for a job.
  kind: object
  properties:
  - description: If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run.
    types:
    - uid: string
    name: maxWallClockTime
  - description: Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).
    types:
    - uid: integer
    name: maxTaskRetryCount
- name: JobManagerTask
  description: The Job Manager task is automatically started when the job is created. The Batch service tries to schedule the Job Manager task before any other tasks in the job. When shrinking a pool, the Batch service tries to preserve compute nodes where Job Manager tasks are running for as long as possible (that is, nodes running 'normal' tasks are removed before nodes running Job Manager tasks). When a Job Manager task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle nodes available, the system may terminate one of the running tasks in the pool and return it to the queue in order to make room for the Job Manager task to restart. Note that a Job Manager task in one job does not have priority over tasks in other jobs. Across jobs, only job level priorities are observed. For example, if a Job Manager in a priority 0 job needs to be restarted, it will not displace tasks of a priority 1 job.
  kind: object
  properties:
  - description: The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.
    types:
    - uid: string
    name: id
  - description: It need not be unique and can contain any Unicode characters up to a maximum length of 1024.
    types:
    - uid: string
    name: displayName
  - description: The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
    types:
    - uid: string
    name: commandLine
  - description: If the pool that will run this task has containerConfiguration set, this must be set as well. If the pool that will run this task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
    types:
    - uid: TaskContainerSettings
    name: containerSettings
  - description: Files listed under this element are located in the task's working directory.
    types:
    - uid: ResourceFile
    name: resourceFiles
  - description: For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.
    types:
    - uid: OutputFile
    name: outputFiles
  - description: A list of environment variable settings for the Job Manager task.
    types:
    - uid: EnvironmentSetting
    name: environmentSettings
  - description: Constraints that apply to the Job Manager task.
    types:
    - uid: TaskConstraints
    name: constraints
  - description: If true, when the Job Manager task completes, the Batch service marks the job as complete. If any tasks are still running at this time (other than Job Release), those tasks are terminated. If false, the completion of the Job Manager task does not affect the job status. In this case, you should either use the onAllTasksComplete attribute to terminate the job, or have a client or user terminate the job explicitly. An example of this is if the Job Manager creates a set of tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control job lifetime, and using the Job Manager task only to create the tasks for the job (not to monitor progress), then it is important to set killJobOnCompletion to false.
    types:
    - uid: boolean
    name: killJobOnCompletion
  - description: If omitted, the task runs as a non-administrative user unique to the task.
    types:
    - uid: UserIdentity
    name: userIdentity
  - description: If true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks. The default value is true.
    types:
    - uid: boolean
    name: runExclusive
  - description: Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.
    types:
    - uid: ApplicationPackageReference
    name: applicationPackageReferences
  - description: If this property is set, the Batch service provides the task with an authentication token which can be used to authenticate Batch service operations without requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the task can carry out using the token depend on the settings. For example, a task can request job permissions in order to add other tasks to the job, or check the status of the job or of other tasks under the job.
    types:
    - uid: AuthenticationTokenSettings
    name: authenticationTokenSettings
  - description: The default value is false.
    types:
    - uid: boolean
    name: allowLowPriorityNode
- name: JobPreparationTask
  description: 'You can use Job Preparation to prepare a compute node to run tasks for the job. Activities commonly performed in Job Preparation include: Downloading common resource files used by all the tasks in the job. The Job Preparation task can download these common resource files to the shared location on the compute node. (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local service on the compute node so that all tasks of that job can communicate with it. If the Job Preparation task fails (that is, exhausts its retry count before exiting with exit code 0), Batch will not run tasks of this job on the compute node. The node remains ineligible to run tasks of this job until it is reimaged. The node remains active and can be used for other jobs. The Job Preparation task can run multiple times on the same compute node. Therefore, you should write the Job Preparation task to handle re-execution. If the compute node is rebooted, the Job Preparation task is run again on the node before scheduling any other task of the job, if rerunOnNodeRebootAfterSuccess is true or if the Job Preparation task did not previously complete. If the compute node is reimaged, the Job Preparation task is run again before scheduling any task of the job.'
  kind: object
  properties:
  - description: The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other task in the job can have the same ID as the Job Preparation task. If you try to submit a task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
    types:
    - uid: string
    name: id
  - description: The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
    types:
    - uid: string
    name: commandLine
  - description: When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
    types:
    - uid: TaskContainerSettings
    name: containerSettings
  - description: Files listed under this element are located in the task's working directory.
    types:
    - uid: ResourceFile
    name: resourceFiles
  - description: A list of environment variable settings for the Job Preparation task.
    types:
    - uid: EnvironmentSetting
    name: environmentSettings
  - description: Constraints that apply to the Job Preparation task.
    types:
    - uid: TaskConstraints
    name: constraints
  - description: If true and the Job Preparation task fails on a compute node, the Batch service retries the Job Preparation task up to its maximum retry count (as specified in the constraints element). If the task has still not completed successfully after all retries, then the Batch service will not schedule tasks of the job to the compute node. The compute node remains active and eligible to run tasks of other jobs. If false, the Batch service will not wait for the Job Preparation task to complete. In this case, other tasks of the job can start executing on the compute node while the Job Preparation task is still running; and even if the Job Preparation task fails, new tasks will continue to be scheduled on the node. The default value is true.
    types:
    - uid: boolean
    name: waitForSuccess
  - description: If omitted, the task runs as a non-administrative user unique to the task on Windows nodes, or a a non-administrative user unique to the pool on Linux nodes.
    types:
    - uid: UserIdentity
    name: userIdentity
  - description: The Job Preparation task is always rerun if a compute node is reimaged, or if the Job Preparation task did not complete (e.g. because the reboot occurred while the task was running). Therefore, you should always write a Job Preparation task to be idempotent and to behave correctly if run multiple times. The default value is true.
    types:
    - uid: boolean
    name: rerunOnNodeRebootAfterSuccess
- name: JobReleaseTask
  description: "The Job Release task runs when the job ends, because of one of the following: The user calls the Terminate Job API, or the Delete Job API while the job is still active, the job's maximum wall clock time constraint is reached, and the job is still active, or the job's Job Manager task completed, and the job is configured to terminate when the Job Manager completes. The Job Release task runs on each compute node where tasks of the job have run and the Job Preparation task ran and completed. If you reimage a compute node after it has run the Job Preparation task, and the job ends without any further tasks of the job running on that compute node (and hence the Job Preparation task does not re-run), then the Job Release task does not run on that node. If a compute node reboots while the Job Release task is still running, the Job Release task runs again when the compute node starts up. The job is not marked as complete until all Job Release tasks have completed. The Job Release task runs in the background. It does not occupy a scheduling slot; that is, it does not count towards the maxTasksPerNode limit specified on the pool."
  kind: object
  properties:
  - description: The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other task in the job can have the same ID as the Job Release task. If you try to submit a task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
    types:
    - uid: string
    name: id
  - description: The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
    types:
    - uid: string
    name: commandLine
  - description: When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
    types:
    - uid: TaskContainerSettings
    name: containerSettings
  - description: Files listed under this element are located in the task's working directory.
    types:
    - uid: ResourceFile
    name: resourceFiles
  - description: A list of environment variable settings for the Job Release task.
    types:
    - uid: EnvironmentSetting
    name: environmentSettings
  - description: The maximum elapsed time that the Job Release task may run on a given compute node, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes. You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
    types:
    - uid: string
    name: maxWallClockTime
  - description: The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged.
    types:
    - uid: string
    name: retentionTime
  - description: If omitted, the task runs as a non-administrative user unique to the task.
    types:
    - uid: UserIdentity
    name: userIdentity
- name: EnvironmentSetting
  description: An environment variable to be set on a task process.
  kind: object
  properties:
  - description: The name of the environment variable.
    types:
    - uid: string
    name: name
  - description: The value of the environment variable.
    types:
    - uid: string
    name: value
- name: PoolInformation
  description: Specifies how a job should be assigned to a pool.
  kind: object
  properties:
  - description: You must ensure that the pool referenced by this property exists. If the pool does not exist at the time the Batch service tries to schedule a job, no tasks for the job will run until you create a pool with that id. Note that the Batch service will not reject the job request; it will simply not run tasks until the pool exists. You must specify either the pool ID or the auto pool specification, but not both.
    types:
    - uid: string
    name: poolId
  - description: If auto pool creation fails, the Batch service moves the job to a completed state, and the pool creation error is set in the job's scheduling error property. The Batch service manages the lifetime (both creation and, unless keepAlive is specified, deletion) of the auto pool. Any user actions that affect the lifetime of the auto pool while the job is active will result in unexpected behavior. You must specify either the pool ID or the auto pool specification, but not both.
    types:
    - uid: AutoPoolSpecification
    name: autoPoolSpecification
- name: ErrorMessage
  description: A message describing the error, intended to be suitable for display in a user interface.
  kind: object
  properties:
  - description: The language code of the error message
    types:
    - uid: string
    name: lang
  - description: The text of the message.
    types:
    - uid: string
    name: value
- name: BatchErrorDetail
  description: A collection of key-value pairs containing additional details about the error.
  kind: object
  properties:
  - description: An identifier specifying the meaning of the Value property.
    types:
    - uid: string
    name: key
  - description: The additional information included with the error response.
    types:
    - uid: string
    name: value
- name: TaskContainerSettings
  description: The container settings for a task.
  kind: object
  properties:
  - description: These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
    types:
    - uid: string
    name: containerRunOptions
  - description: This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
    types:
    - uid: string
    name: imageName
  - description: This setting can be omitted if was already provided at pool creation.
    types:
    - uid: ContainerRegistry
    name: registry
- name: ResourceFile
  description: A file to be downloaded from Azure blob storage to a compute node.
  kind: object
  properties:
  - description: 'This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.'
    types:
    - uid: string
    name: blobSource
  - description: The location on the compute node to which to download the file, relative to the task's working directory.
    types:
    - uid: string
    name: filePath
  - description: This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
    types:
    - uid: string
    name: fileMode
- name: OutputFile
  description: For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.
  kind: object
  properties:
  - description: "Both relative and absolute paths are supported. Relative paths are relative to the task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with \".\" it is ignored by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple example: **\\*.txt matches any file that does not start in '.' and ends with .txt in the task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*] would match a file named abc*). Note that both \\ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied."
    types:
    - uid: string
    name: filePattern
  - description: The destination for the output file(s).
    types:
    - uid: OutputFileDestination
    name: destination
  - description: Additional options for the upload operation, including under what conditions to perform the upload.
    types:
    - uid: OutputFileUploadOptions
    name: uploadOptions
- name: TaskConstraints
  description: Execution constraints to apply to a task.
  kind: object
  properties:
  - description: If this is not specified, there is no time limit on how long the task may run.
    types:
    - uid: string
    name: maxWallClockTime
  - description: The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged.
    types:
    - uid: string
    name: retentionTime
  - description: Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
    types:
    - uid: integer
    name: maxTaskRetryCount
- name: UserIdentity
  description: Specify either the userName or autoUser property, but not both.
  kind: object
  properties:
  - description: The userName and autoUser properties are mutually exclusive; you must specify one but not both.
    types:
    - uid: string
    name: username
  - description: The userName and autoUser properties are mutually exclusive; you must specify one but not both.
    types:
    - uid: AutoUserSpecification
    name: autoUser
- name: ApplicationPackageReference
  description: A reference to an application package to be deployed to compute nodes.
  kind: object
  properties:
  - description: The ID of the application to deploy.
    types:
    - uid: string
    name: applicationId
  - description: If this is omitted on a pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a task, and no default version is specified for this application, the task fails with a pre-processing error.
    types:
    - uid: string
    name: version
- name: AuthenticationTokenSettings
  description: The settings for an authentication token that the task can use to perform Batch service operations.
  kind: object
  properties:
  - description: The authentication token grants access to a limited set of Batch service operations. Currently the only supported value for the access property is 'job', which grants access to all operations related to the job which contains the task.
    types:
    - uid: string
    name: access
- name: AutoPoolSpecification
  description: Specifies characteristics for a temporary 'auto pool'. The Batch service will create this auto pool when the job is submitted.
  kind: object
  properties:
  - description: The Batch service assigns each auto pool a unique identifier on creation. To distinguish between pools created for different purposes, you can specify this element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
    types:
    - uid: string
    name: autoPoolIdPrefix
  - description: The minimum lifetime of created auto pools, and how multiple jobs on a schedule are assigned to pools.
    types:
    - uid: PoolLifetimeOption
    name: poolLifetimeOption
  - description: If false, the Batch service deletes the pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the job or job schedule completes. If true, the Batch service does not delete the pool automatically. It is up to the user to delete auto pools created with this option.
    types:
    - uid: boolean
    name: keepAlive
  - description: The pool specification for the auto pool.
    types:
    - uid: PoolSpecification
    name: pool
- name: ContainerRegistry
  description: This setting can be omitted if was already provided at pool creation.
  kind: object
  properties:
  - description: If omitted, the default is "docker.io".
    types:
    - uid: string
    name: registryServer
  - description: The user name to log into the registry server.
    types:
    - uid: string
    name: username
  - description: The password to log into the registry server.
    types:
    - uid: string
    name: password
- name: OutputFileDestination
  description: The destination for the output file(s).
  kind: object
  properties:
  - description: A location in Azure blob storage to which files are uploaded.
    types:
    - uid: OutputFileBlobContainerDestination
    name: container
- name: OutputFileUploadOptions
  description: Additional options for the upload operation, including under what conditions to perform the upload.
  kind: object
  properties:
  - description: The default is taskcompletion.
    types:
    - uid: OutputFileUploadCondition
    name: uploadCondition
- name: AutoUserSpecification
  description: Specifies the parameters for the auto user that runs a task on the Batch service.
  kind: object
  properties:
  - description: The default value is task.
    types:
    - uid: AutoUserScope
    name: scope
  - description: nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
    types:
    - uid: ElevationLevel
    name: elevationLevel
- name: PoolLifetimeOption
  description: The minimum lifetime of created auto pools, and how multiple jobs on a schedule are assigned to pools.
  kind: enum
  properties:
  - description: The pool exists for the lifetime of the job schedule. The Batch Service creates the pool when it creates the first job on the schedule. You may apply this option only to job schedules, not to jobs.
    types:
    - uid: string
    name: jobschedule
  - description: The pool exists for the lifetime of the job to which it is dedicated. The Batch service creates the pool when it creates the job. If the 'job' option is applied to a job schedule, the Batch service creates a new auto pool for every job created on the schedule.
    types:
    - uid: string
    name: job
- name: PoolSpecification
  description: Specification for creating a new pool.
  kind: object
  properties:
  - description: The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
    types:
    - uid: string
    name: displayName
  - description: For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
    types:
    - uid: string
    name: vmSize
  - description: This property must be specified if the pool needs to be created with Azure PaaS VMs. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
    types:
    - uid: CloudServiceConfiguration
    name: cloudServiceConfiguration
  - description: This property must be specified if the pool needs to be created with Azure IaaS VMs. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
    types:
    - uid: VirtualMachineConfiguration
    name: virtualMachineConfiguration
  - description: The default value is 1. The maximum value of this setting depends on the size of the compute nodes in the pool (the vmSize setting).
    types:
    - uid: integer
    name: maxTasksPerNode
  - description: How tasks are distributed across compute nodes in a pool.
    types:
    - uid: TaskSchedulingPolicy
    name: taskSchedulingPolicy
  - description: This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
    types:
    - uid: string
    name: resizeTimeout
  - description: This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
    types:
    - uid: integer
    name: targetDedicatedNodes
  - description: This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
    types:
    - uid: integer
    name: targetLowPriorityNodes
  - description: If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula element is required. The pool automatically resizes according to the formula. The default value is false.
    types:
    - uid: boolean
    name: enableAutoScale
  - description: This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information.
    types:
    - uid: string
    name: autoScaleFormula
  - description: The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
    types:
    - uid: string
    name: autoScaleEvaluationInterval
  - description: Enabling inter-node communication limits the maximum size of the pool due to deployment restrictions on the nodes of the pool. This may result in the pool not reaching its desired size. The default value is false.
    types:
    - uid: boolean
    name: enableInterNodeCommunication
  - description: The network configuration for a pool.
    types:
    - uid: NetworkConfiguration
    name: networkConfiguration
  - description: A task to run on each compute node as it joins the pool. The task runs when the node is added to the pool or when the node is restarted.
    types:
    - uid: StartTask
    name: startTask
  - description: For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
    types:
    - uid: CertificateReference
    name: certificateReferences
  - description: The list of application packages to be installed on each compute node in the pool.
    types:
    - uid: ApplicationPackageReference
    name: applicationPackageReferences
  - description: The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
    types:
    - uid: string
    name: applicationLicenses
  - description: The list of user accounts to be created on each node in the pool.
    types:
    - uid: UserAccount
    name: userAccounts
  - description: The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
    types:
    - uid: MetadataItem
    name: metadata
- name: OutputFileBlobContainerDestination
  description: A location in Azure blob storage to which files are uploaded.
  kind: object
  properties:
  - description: If filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name.
    types:
    - uid: string
    name: path
  - description: The URL must include a Shared Access Signature (SAS) granting write permissions to the container.
    types:
    - uid: string
    name: containerUrl
- name: OutputFileUploadCondition
  description: The default is taskcompletion.
  kind: enum
  properties:
  - description: Upload the file(s) only after the task process exits with an exit code of 0.
    types:
    - uid: string
    name: tasksuccess
  - description: Upload the file(s) only after the task process exits with a nonzero exit code.
    types:
    - uid: string
    name: taskfailure
  - description: Upload the file(s) after the task process exits, no matter what the exit code was.
    types:
    - uid: string
    name: taskcompletion
- name: AutoUserScope
  description: The default value is task.
  kind: enum
  properties:
  - description: Specifies that the service should create a new user for the task.
    types:
    - uid: string
    name: task
  - description: Specifies that the task runs as the common auto user account which is created on every node in a pool.
    types:
    - uid: string
    name: pool
- name: ElevationLevel
  description: nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
  kind: enum
  properties:
  - description: The user is a standard user without elevated access.
    types:
    - uid: string
    name: nonadmin
  - description: The user is a user with elevated access and operates with full Administrator permissions.
    types:
    - uid: string
    name: admin
- name: CloudServiceConfiguration
  description: This property must be specified if the pool needs to be created with Azure PaaS VMs. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
  kind: object
  properties:
  - description: 'Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).'
    types:
    - uid: string
    name: osFamily
  - description: The default value is * which specifies the latest operating system version for the specified OS family.
    types:
    - uid: string
    name: targetOSVersion
  - isReadyOnly: true
    description: This may differ from targetOSVersion if the pool state is Upgrading. In this case some virtual machines may be on the targetOSVersion and some may be on the currentOSVersion during the upgrade process. Once all virtual machines have upgraded, currentOSVersion is updated to be the same as targetOSVersion.
    types:
    - uid: string
    name: currentOSVersion
- name: VirtualMachineConfiguration
  description: This property must be specified if the pool needs to be created with Azure IaaS VMs. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
  kind: object
  properties:
  - description: A reference to the Azure Virtual Machines Marketplace image or the custom Virtual Machine image to use.
    types:
    - uid: ImageReference
    name: imageReference
  - description: Settings for the operating system disk of the Virtual Machine.
    types:
    - uid: OSDisk
    name: osDisk
  - description: The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
    types:
    - uid: string
    name: nodeAgentSKUId
  - description: This property must not be specified if the imageReference or osDisk property specifies a Linux OS image.
    types:
    - uid: WindowsConfiguration
    name: windowsConfiguration
  - description: This property must be specified if the compute nodes in the pool need to have empty data disks attached to them. This cannot be updated. Each node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the node is removed from the pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
    types:
    - uid: DataDisk
    name: dataDisks
  - description: >
      This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:

       Windows_Server - The on-premises license is for Windows Server.
       Windows_Client - The on-premises license is for Windows Client.
    types:
    - uid: string
    name: licenseType
  - description: If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
    types:
    - uid: ContainerConfiguration
    name: containerConfiguration
- name: TaskSchedulingPolicy
  description: Specifies how tasks should be distributed across compute nodes.
  kind: object
  properties:
  - description: How tasks are distributed across compute nodes in a pool.
    types:
    - uid: ComputeNodeFillType
    name: nodeFillType
- name: NetworkConfiguration
  description: The network configuration for a pool.
  kind: object
  properties:
  - description: "The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. For pools created with virtualMachineConfiguration only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported, but for pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration"
    types:
    - uid: string
    name: subnetId
  - description: Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
    types:
    - uid: PoolEndpointConfiguration
    name: endpointConfiguration
- name: StartTask
  description: A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.
  kind: object
  properties:
  - description: The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
    types:
    - uid: string
    name: commandLine
  - description: When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
    types:
    - uid: TaskContainerSettings
    name: containerSettings
  - description: Files listed under this element are located in the task's working directory.
    types:
    - uid: ResourceFile
    name: resourceFiles
  - description: A list of environment variable settings for the start task.
    types:
    - uid: EnvironmentSetting
    name: environmentSettings
  - description: If omitted, the task runs as a non-administrative user unique to the task.
    types:
    - uid: UserIdentity
    name: userIdentity
  - description: The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
    types:
    - uid: integer
    name: maxTaskRetryCount
  - description: If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.
    types:
    - uid: boolean
    name: waitForSuccess
- name: CertificateReference
  description: A reference to a certificate to be installed on compute nodes in a pool.
  kind: object
  properties:
  - description: The thumbprint of the certificate.
    types:
    - uid: string
    name: thumbprint
  - description: The algorithm with which the thumbprint is associated. This must be sha1.
    types:
    - uid: string
    name: thumbprintAlgorithm
  - description: The default value is currentuser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
    types:
    - uid: CertificateStoreLocation
    name: storeLocation
  - description: 'This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.'
    types:
    - uid: string
    name: storeName
  - description: You can specify more than one visibility in this collection. The default is all accounts.
    types:
    - uid: string
    name: visibility
- name: UserAccount
  description: Properties used to create a user used to execute tasks on an Azure Batch node.
  kind: object
  properties:
  - description: The name of the user account.
    types:
    - uid: string
    name: name
  - description: The password for the user account.
    types:
    - uid: string
    name: password
  - description: nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
    types:
    - uid: ElevationLevel
    name: elevationLevel
  - description: This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
    types:
    - uid: LinuxUserConfiguration
    name: linuxUserConfiguration
- name: ImageReference
  description: This collection is not exhaustive (the node agent may be compatible with other images).
  kind: object
  properties:
  - description: For example, Canonical or MicrosoftWindowsServer.
    types:
    - uid: string
    name: publisher
  - description: For example, UbuntuServer or WindowsServer.
    types:
    - uid: string
    name: offer
  - description: For example, 14.04.0-LTS or 2012-R2-Datacenter.
    types:
    - uid: string
    name: sku
  - description: A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
    types:
    - uid: string
    name: version
  - description: This property is mutually exclusive with other ImageReference properties. The virtual machine image must be in the same region and subscription as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
    types:
    - uid: string
    name: virtualMachineImageId
- name: OSDisk
  description: Settings for the operating system disk of the Virtual Machine.
  kind: object
  properties:
  - description: 'The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.'
    types:
    - uid: CachingType
    name: caching
- name: WindowsConfiguration
  description: This property must not be specified if the imageReference or osDisk property specifies a Linux OS image.
  kind: object
  properties:
  - description: If omitted, the default value is true.
    types:
    - uid: boolean
    name: enableAutomaticUpdates
- name: DataDisk
  description: This property must be specified if the compute nodes in the pool need to have empty data disks attached to them. This cannot be updated. Each node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the node is removed from the pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
  kind: object
  properties:
  - description: The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
    types:
    - uid: integer
    name: lun
  - description: 'The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.'
    types:
    - uid: CachingType
    name: caching
  - description: The initial disk size in gigabytes.
    types:
    - uid: integer
    name: diskSizeGB
  - description: If omitted, the default is "standard_lrs".
    types:
    - uid: StorageAccountType
    name: storageAccountType
- name: ContainerConfiguration
  description: If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
  kind: object
  properties:
  - description: The container technology to be used.
    types:
    - uid: ContainerType
    name: type
  - description: This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
    types:
    - uid: string
    name: containerImageNames
  - description: If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
    types:
    - uid: ContainerRegistry
    name: containerRegistries
- name: ComputeNodeFillType
  description: How tasks are distributed across compute nodes in a pool.
  kind: enum
  properties:
  - description: Tasks should be assigned evenly across all nodes in the pool.
    types:
    - uid: string
    name: spread
  - description: As many tasks as possible (maxTasksPerNode) should be assigned to each node in the pool before any tasks are assigned to the next node in the pool.
    types:
    - uid: string
    name: pack
- name: PoolEndpointConfiguration
  description: Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
  kind: object
  properties:
  - description: The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400.
    types:
    - uid: InboundNATPool
    name: inboundNATPools
- name: CertificateStoreLocation
  description: The default value is currentuser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
  kind: enum
  properties:
  - description: Certificates should be installed to the CurrentUser certificate store.
    types:
    - uid: string
    name: currentuser
  - description: Certificates should be installed to the LocalMachine certificate store.
    types:
    - uid: string
    name: localmachine
- name: LinuxUserConfiguration
  description: Properties used to create a user account on a Linux node.
  kind: object
  properties:
  - description: The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
    types:
    - uid: integer
    name: uid
  - description: The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
    types:
    - uid: integer
    name: gid
  - description: The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
    types:
    - uid: string
    name: sshPrivateKey
- name: CachingType
  description: 'The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.'
  kind: enum
  properties:
  - description: The caching mode for the disk is not enabled.
    types:
    - uid: string
    name: none
  - description: The caching mode for the disk is read only.
    types:
    - uid: string
    name: readonly
  - description: The caching mode for the disk is read and write.
    types:
    - uid: string
    name: readwrite
- name: StorageAccountType
  description: If omitted, the default is "standard_lrs".
  kind: enum
  properties:
  - description: The data disk should use standard locally redundant storage.
    types:
    - uid: string
    name: standard_lrs
  - description: The data disk should use premium locally redundant storage.
    types:
    - uid: string
    name: premium_lrs
- name: ContainerType
  description: The container technology to be used.
  kind: enum
  properties:
  - description: Docker will be used to launch the containers.
    types:
    - uid: string
    name: docker
- name: InboundNATPool
  description: The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400.
  kind: object
  properties:
  - description: The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
    types:
    - uid: string
    name: name
  - description: The protocol of the endpoint.
    types:
    - uid: InboundEndpointProtocol
    name: protocol
  - description: This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
    types:
    - uid: integer
    name: backendPort
  - description: Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
    types:
    - uid: integer
    name: frontendPortRangeStart
  - description: Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
    types:
    - uid: integer
    name: frontendPortRangeEnd
  - description: The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
    types:
    - uid: NetworkSecurityGroupRule
    name: networkSecurityGroupRules
- name: InboundEndpointProtocol
  description: The protocol of the endpoint.
  kind: enum
  properties:
  - description: Use TCP for the endpoint.
    types:
    - uid: string
    name: tcp
  - description: Use UDP for the endpoint.
    types:
    - uid: string
    name: udp
- name: NetworkSecurityGroupRule
  description: The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
  kind: object
  properties:
  - description: Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 3500. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
    types:
    - uid: integer
    name: priority
  - description: The action that should be taken for a specified IP address, subnet range or tag.
    types:
    - uid: NetworkSecurityGroupRuleAccess
    name: access
  - description: Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
    types:
    - uid: string
    name: sourceAddressPrefix
- name: NetworkSecurityGroupRuleAccess
  description: The action that should be taken for a specified IP address, subnet range or tag.
  kind: enum
  properties:
  - description: Allow access.
    types:
    - uid: string
    name: allow
  - description: Deny access.
    types:
    - uid: string
    name: deny
examples:
- request:
    uri: PATCH https://batch.core.windows.net/jobschedules/jobScheduleId?api-version=2017-09-01.6.0
    body: >-
      {
        "schedule": {
          "doNotRunUntil": "2025-01-01T12:30:00Z"
        },
        "jobSpecification": {
          "priority": 0,
          "usesTaskDependencies": false,
          "constraints": {
            "maxWallClockTime": "P10675199DT2H48M5.4775807S",
            "maxTaskRetryCount": 0
          },
          "poolInfo": {
            "poolId": "poolId"
          }
        }
      }
    headers:
    - value: 00000000-0000-0000-0000-000000000000
      name: client-request-id
  responses:
  - statusCode: "200"
    body: "\"\""
  name: JobSchedule patch
security: []
name: Patch
uid: batch.core.windows.net.batchservice.jobschedule.patch
