### YamlMime:RESTOperation
summary: Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 7 days. If a task has not completed within 7 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
service: Batch Service
apiVersion: 2017-09-01.6.0
groupName: Task
consumes:
- application/json; odata=minimalmetadata
produces:
- application/json
paths:
- content: POST https://batch.core.windows.net/jobs/{jobId}/addtaskcollection?api-version=2017-09-01.6.0
- content: POST https://batch.core.windows.net/jobs/{jobId}/addtaskcollection?timeout={timeout}&api-version=2017-09-01.6.0
  isOptional: true
uriParameters:
- in: path
  isRequired: true
  description: The ID of the job to which the task collection is to be added.
  types:
  - uid: string
  name: jobId
- in: query
  description: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
  types:
  - uid: integer
  format: int32
  name: timeout
- in: query
  isRequired: true
  description: Client API Version.
  types:
  - uid: string
  name: api-version
responses:
- headers:
  - value: string
    name: client-request-id
  - value: string
    name: request-id
  description: A response containing the results of the add task collection operation.
  types:
  - uid: TaskAddCollectionResult
  name: 200 OK
- description: Unexpected error
  types:
  - uid: BatchError
  name: Other Status Codes
requestBody:
- parameters:
  - in: body
    isRequired: true
    description: An Azure Batch task to add.
    types:
    - isArray: true
      uid: TaskAddParameter
    name: value
requestHeader:
- in: header
  description: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
  types:
  - uid: string
  format: uuid
  name: client-request-id
- in: header
  description: Whether the server should return the client-request-id in the response.
  types:
  - uid: boolean
  name: return-client-request-id
- in: header
  description: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
  types:
  - uid: string
  format: date-time-rfc1123
  name: ocp-date
definitions:
- name: TaskAddParameter
  description: An Azure Batch task to add.
  kind: object
  properties:
  - description: >-
      A string that uniquely identifies the task within the job.

      The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a job that differ only by case).
    types:
    - uid: string
    name: id
  - description: >-
      A display name for the task.

      The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
    types:
    - uid: string
    name: displayName
  - description: >-
      The command line of the task.

      For multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
    types:
    - uid: string
    name: commandLine
  - description: >-
      The settings for the container under which the task runs.

      If the pool that will run this task has containerConfiguration set, this must be set as well. If the pool that will run this task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
    types:
    - uid: TaskContainerSettings
    name: containerSettings
  - description: >-
      Specifies how the Batch service should respond when the task completes.

      How the Batch service should respond when the task completes.
    types:
    - uid: ExitConditions
    name: exitConditions
  - description: A file to be downloaded from Azure blob storage to a compute node.
    types:
    - isArray: true
      uid: ResourceFile
    name: resourceFiles
  - description: A specification for uploading files from an Azure Batch node to another location after the Batch service has finished executing the task process.
    types:
    - isArray: true
      uid: OutputFile
    name: outputFiles
  - description: An environment variable to be set on a task process.
    types:
    - isArray: true
      uid: EnvironmentSetting
    name: environmentSettings
  - description: A locality hint that can be used by the Batch service to select a compute node on which to start the new task.
    types:
    - uid: AffinityInformation
    name: affinityInfo
  - description: >-
      The execution constraints that apply to this task.

      If you do not specify constraints, the maxTaskRetryCount is the maxTaskRetryCount specified for the job, and the maxWallClockTime and retentionTime are infinite.
    types:
    - uid: TaskConstraints
    name: constraints
  - description: >-
      The user identity under which the task runs.

      If omitted, the task runs as a non-administrative user unique to the task.
    types:
    - uid: UserIdentity
    name: userIdentity
  - description: >-
      An object that indicates that the task is a multi-instance task, and contains information about how to run the multi-instance task.

      Multi-instance tasks are commonly used to support MPI tasks.
    types:
    - uid: MultiInstanceSettings
    name: multiInstanceSettings
  - description: >-
      The tasks that this task depends on.

      This task will not be scheduled until all tasks that it depends on have completed successfully. If any of those tasks fail and exhaust their retry counts, this task will never be scheduled. If the job does not have usesTaskDependencies set to true, and this element is present, the request fails with error code TaskDependenciesNotSpecifiedOnJob.
    types:
    - uid: TaskDependencies
    name: dependsOn
  - description: A reference to an application package to be deployed to compute nodes.
    types:
    - isArray: true
      uid: ApplicationPackageReference
    name: applicationPackageReferences
  - description: >-
      The settings for an authentication token that the task can use to perform Batch service operations.

      If this property is set, the Batch service provides the task with an authentication token which can be used to authenticate Batch service operations without requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the task can carry out using the token depend on the settings. For example, a task can request job permissions in order to add other tasks to the job, or check the status of the job or of other tasks under the job.
    types:
    - uid: AuthenticationTokenSettings
    name: authenticationTokenSettings
- name: TaskAddCollectionResult
  description: The result of adding a collection of tasks to a job.
  kind: object
  properties:
  - description: Result for a single task added as part of an add task collection operation.
    types:
    - isArray: true
      uid: TaskAddResult
    name: value
- name: BatchError
  description: The error encountered while attempting to add the task.
  kind: object
  properties:
  - description: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
    name: code
  - description: A message describing the error, intended to be suitable for display in a user interface.
    types:
    - uid: ErrorMessage
    name: message
  - description: An item of additional information included in an Azure Batch error response.
    types:
    - isArray: true
      uid: BatchErrorDetail
    name: values
- name: TaskAddCollectionParameter
  description: A collection of Azure Batch tasks to add.
  kind: object
  properties:
  - description: An Azure Batch task to add.
    types:
    - isArray: true
      uid: TaskAddParameter
    name: value
- name: TaskContainerSettings
  description: The container settings for a task.
  kind: object
  properties:
  - description: >-
      Additional options to the container create command.

      These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
    types:
    - uid: string
    name: containerRunOptions
  - description: >-
      The image to use to create the container in which the task will run.

      This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
    types:
    - uid: string
    name: imageName
  - description: >-
      The private registry which contains the container image.

      This setting can be omitted if was already provided at pool creation.
    types:
    - uid: ContainerRegistry
    name: registry
- name: ExitConditions
  description: Specifies how the Batch service should respond when the task completes.
  kind: object
  properties:
  - description: How the Batch service should respond if a task exits with a particular exit code.
    types:
    - isArray: true
      uid: ExitCodeMapping
    name: exitCodes
  - description: A range of exit codes and how the Batch service should respond to exit codes within that range.
    types:
    - isArray: true
      uid: ExitCodeRangeMapping
    name: exitCodeRanges
  - description: How the Batch service should respond if the task fails to start due to an error.
    types:
    - uid: ExitOptions
    name: preProcessingError
  - description: >-
      How the Batch service should respond if a file upload error occurs.

      If the task exited with an exit code that was specified via exitCodes or exitCodeRanges, and then encountered a file upload error, then the action specified by the exit code takes precedence.
    types:
    - uid: ExitOptions
    name: fileUploadError
  - description: >-
      How the Batch service should respond if the task fails with an exit condition not covered by any of the other properties.

      This value is used if the task exits with any nonzero exit code not listed in the exitCodes or exitCodeRanges collection, with a pre-processing error if the preProcessingError property is not present, or with a file upload error if the fileUploadError property is not present. If you want non-default behaviour on exit code 0, you must list it explicitly using the exitCodes or exitCodeRanges collection.
    types:
    - uid: ExitOptions
    name: default
- name: ResourceFile
  description: A file to be downloaded from Azure blob storage to a compute node.
  kind: object
  properties:
  - description: >-
      The URL of the file within Azure Blob Storage.

      This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
    types:
    - uid: string
    name: blobSource
  - description: The location on the compute node to which to download the file, relative to the task's working directory.
    types:
    - uid: string
    name: filePath
  - description: >-
      The file permission mode attribute in octal format.

      This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
    types:
    - uid: string
    name: fileMode
- name: OutputFile
  description: >-
    A list of files that the Batch service will upload from the compute node after running the command line.

    For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.
  kind: object
  properties:
  - description: >-
      A pattern indicating which file(s) to upload.

      Both relative and absolute paths are supported. Relative paths are relative to the task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with "." it is ignored by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple example: **\*.txt matches any file that does not start in '.' and ends with .txt in the task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*] would match a file named abc*). Note that both \ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.
    types:
    - uid: string
    name: filePattern
  - description: The destination for the output file(s).
    types:
    - uid: OutputFileDestination
    name: destination
  - description: Additional options for the upload operation, including under what conditions to perform the upload.
    types:
    - uid: OutputFileUploadOptions
    name: uploadOptions
- name: EnvironmentSetting
  description: An environment variable to be set on a task process.
  kind: object
  properties:
  - description: The name of the environment variable.
    types:
    - uid: string
    name: name
  - description: The value of the environment variable.
    types:
    - uid: string
    name: value
- name: AffinityInformation
  description: A locality hint that can be used by the Batch service to select a compute node on which to start a task.
  kind: object
  properties:
  - description: >-
      An opaque string representing the location of a compute node or a task that has run previously.

      You can pass the affinityId of a compute node to indicate that this task needs to run on that compute node. Note that this is just a soft affinity. If the target node is busy or unavailable at the time the task is scheduled, then the task will be scheduled elsewhere.
    types:
    - uid: string
    name: affinityId
- name: TaskConstraints
  description: Execution constraints to apply to a task.
  kind: object
  properties:
  - description: >-
      The maximum elapsed time that the task may run, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it.

      If this is not specified, there is no time limit on how long the task may run.
    types:
    - uid: string
    name: maxWallClockTime
  - description: >-
      The minimum time to retain the task directory on the compute node where it ran, from the time it completes execution. After this time, the Batch service may delete the task directory and all its contents.

      The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged.
    types:
    - uid: string
    name: retentionTime
  - description: >-
      The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero.

      Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
    types:
    - uid: integer
    name: maxTaskRetryCount
- name: UserIdentity
  description: >-
    The definition of the user identity under which the task is run.

    Specify either the userName or autoUser property, but not both.
  kind: object
  properties:
  - description: >-
      The name of the user identity under which the task is run.

      The userName and autoUser properties are mutually exclusive; you must specify one but not both.
    types:
    - uid: string
    name: username
  - description: >-
      The auto user under which the task is run.

      The userName and autoUser properties are mutually exclusive; you must specify one but not both.
    types:
    - uid: AutoUserSpecification
    name: autoUser
- name: MultiInstanceSettings
  description: >-
    Settings which specify how to run a multi-instance task.

    Multi-instance tasks are commonly used to support MPI tasks.
  kind: object
  properties:
  - description: >-
      The number of compute nodes required by the task.

      If omitted, the default is 1.
    types:
    - uid: integer
    name: numberOfInstances
  - description: >-
      The command line to run on all the compute nodes to enable them to coordinate when the primary runs the main task command.

      A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages.
    types:
    - uid: string
    name: coordinationCommandLine
  - description: A file to be downloaded from Azure blob storage to a compute node.
    types:
    - isArray: true
      uid: ResourceFile
    name: commonResourceFiles
- name: TaskDependencies
  description: Specifies any dependencies of a task. Any task that is explicitly specified or within a dependency range must complete before the dependant task will be scheduled.
  kind: object
  properties:
  - description: >-
      The list of task IDs that this task depends on. All tasks in this list must complete successfully before the dependent task can be scheduled.

      The taskIds collection is limited to 64000 characters total (i.e. the combined length of all task IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong. In this case consider using task ID ranges instead.
    types:
    - isArray: true
      uid: string
    name: taskIds
  - description: >-
      A range of task IDs that a task can depend on. All tasks with IDs in the range must complete successfully before the dependent task can be scheduled.

      The start and end of the range are inclusive. For example, if a range has start 9 and end 12, then it represents tasks '9', '10', '11' and '12'.
    types:
    - isArray: true
      uid: TaskIdRange
    name: taskIdRanges
- name: ApplicationPackageReference
  description: A reference to an application package to be deployed to compute nodes.
  kind: object
  properties:
  - description: The ID of the application to deploy.
    types:
    - uid: string
    name: applicationId
  - description: >-
      The version of the application to deploy. If omitted, the default version is deployed.

      If this is omitted on a pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a task, and no default version is specified for this application, the task fails with a pre-processing error.
    types:
    - uid: string
    name: version
- name: AuthenticationTokenSettings
  description: The settings for an authentication token that the task can use to perform Batch service operations.
  kind: object
  properties:
  - description: >-
      The Batch resources to which the token grants access.

      The authentication token grants access to a limited set of Batch service operations. Currently the only supported value for the access property is 'job', which grants access to all operations related to the job which contains the task.
    types:
    - isArray: true
      uid: string
    name: access
- name: TaskAddResult
  description: Result for a single task added as part of an add task collection operation.
  kind: object
  properties:
  - description: The status of the add task request.
    types:
    - uid: TaskAddStatus
    name: status
  - description: The ID of the task for which this is the result.
    types:
    - uid: string
    name: taskId
  - description: >-
      The ETag of the task, if the task was successfully added.

      You can use this to detect whether the task has changed between requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take effect only if nobody else has modified the job in the meantime.
    types:
    - uid: string
    name: eTag
  - description: The last modified time of the task.
    types:
    - uid: string
    name: lastModified
  - description: The URL of the task, if the task was successfully added.
    types:
    - uid: string
    name: location
  - description: The error encountered while attempting to add the task.
    types:
    - uid: BatchError
    name: error
- name: ErrorMessage
  description: A message describing the error, intended to be suitable for display in a user interface.
  kind: object
  properties:
  - description: The language code of the error message
    types:
    - uid: string
    name: lang
  - description: The text of the message.
    types:
    - uid: string
    name: value
- name: BatchErrorDetail
  description: A collection of key-value pairs containing additional details about the error.
  kind: object
  properties:
  - description: An identifier specifying the meaning of the Value property.
    types:
    - uid: string
    name: key
  - description: The additional information included with the error response.
    types:
    - uid: string
    name: value
- name: ContainerRegistry
  description: >-
    The private registry which contains the container image.

    This setting can be omitted if was already provided at pool creation.
  kind: object
  properties:
  - description: >-
      The registry URL.

      If omitted, the default is "docker.io".
    types:
    - uid: string
    name: registryServer
  - description: The user name to log into the registry server.
    types:
    - uid: string
    name: username
  - description: The password to log into the registry server.
    types:
    - uid: string
    name: password
- name: ExitCodeMapping
  description: A list of individual task exit codes and how the Batch service should respond to them.
  kind: object
  properties:
  - description: A process exit code.
    types:
    - uid: integer
    name: code
  - description: How the Batch service should respond if the task exits with this exit code.
    types:
    - uid: ExitOptions
    name: exitOptions
- name: ExitCodeRangeMapping
  description: A list of task exit code ranges and how the Batch service should respond to them.
  kind: object
  properties:
  - description: The first exit code in the range.
    types:
    - uid: integer
    name: start
  - description: The last exit code in the range.
    types:
    - uid: integer
    name: end
  - description: How the Batch service should respond if the task exits with an exit code in the range start to end (inclusive).
    types:
    - uid: ExitOptions
    name: exitOptions
- name: ExitOptions
  description: How the Batch service should respond if the task exits with this exit code.
  kind: object
  properties:
  - description: >-
      An action to take on the job containing the task, if the task completes with the given exit condition and the job's onTaskFailed property is 'performExitOptionsJobAction'.

      The default is none for exit code 0 and terminate for all other exit conditions. If the job's onTaskFailed property is noaction, then specifying this property returns an error and the add task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
    types:
    - uid: JobAction
    name: jobAction
  - description: >-
      An action that the Batch service performs on tasks that depend on this task.

      The default is 'satisfy' for exit code 0, and 'block' for all other exit conditions. If the job's usesTaskDependencies property is set to false, then specifying the dependencyAction property returns an error and the add task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400  (Bad Request).
    types:
    - uid: DependencyAction
    name: dependencyAction
- name: OutputFileDestination
  description: The destination for the output file(s).
  kind: object
  properties:
  - description: A location in Azure blob storage to which files are uploaded.
    types:
    - uid: OutputFileBlobContainerDestination
    name: container
- name: OutputFileUploadOptions
  description: Additional options for the upload operation, including under what conditions to perform the upload.
  kind: object
  properties:
  - description: >-
      The conditions under which the task output file or set of files should be uploaded.

      The default is taskcompletion.
    types:
    - uid: OutputFileUploadCondition
    name: uploadCondition
- name: AutoUserSpecification
  description: Specifies the parameters for the auto user that runs a task on the Batch service.
  kind: object
  properties:
  - description: >-
      The scope for the auto user

      The default value is task.
    types:
    - uid: AutoUserScope
    name: scope
  - description: >-
      The elevation level of the auto user.

      nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
    types:
    - uid: ElevationLevel
    name: elevationLevel
- name: TaskIdRange
  description: The list of task ID ranges that this task depends on. All tasks in all ranges must complete successfully before the dependent task can be scheduled.
  kind: object
  properties:
  - description: The first task ID in the range.
    types:
    - uid: integer
    name: start
  - description: The last task ID in the range.
    types:
    - uid: integer
    name: end
- name: TaskAddStatus
  description: The status of the add task request.
  kind: enum
  properties:
  - description: The task was added successfully.
    types:
    - uid: string
    name: success
  - description: The task failed to add due to a client error and should not be retried without modifying the request as appropriate.
    types:
    - uid: string
    name: clienterror
  - description: Task failed to add due to a server error and can be retried without modification.
    types:
    - uid: string
    name: servererror
- name: JobAction
  description: >-
    An action to take on the job containing the task, if the task completes with the given exit condition and the job's onTaskFailed property is 'performExitOptionsJobAction'.

    The default is none for exit code 0 and terminate for all other exit conditions. If the job's onTaskFailed property is noaction, then specifying this property returns an error and the add task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
  kind: enum
  properties:
  - description: Take no action.
    types:
    - uid: string
    name: none
  - description: Disable the job. This is equivalent to calling the disable job API, with a disableTasks value of requeue.
    types:
    - uid: string
    name: disable
  - description: Terminate the job. The terminateReason in the job's executionInfo is set to "TaskFailed".
    types:
    - uid: string
    name: terminate
- name: DependencyAction
  description: >-
    An action that the Batch service performs on tasks that depend on this task.

    The default is 'satisfy' for exit code 0, and 'block' for all other exit conditions. If the job's usesTaskDependencies property is set to false, then specifying the dependencyAction property returns an error and the add task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400  (Bad Request).
  kind: enum
  properties:
  - description: Satisfy the task's dependencies.
    types:
    - uid: string
    name: satisfy
  - description: Block the task's dependencies.
    types:
    - uid: string
    name: block
- name: OutputFileBlobContainerDestination
  description: A location in Azure blob storage to which files are uploaded.
  kind: object
  properties:
  - description: >-
      The destination blob or virtual directory within the Azure Storage container.

      If filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name.
    types:
    - uid: string
    name: path
  - description: >-
      The URL of the container within Azure Blob Storage to which to upload the file(s).

      The URL must include a Shared Access Signature (SAS) granting write permissions to the container.
    types:
    - uid: string
    name: containerUrl
- name: OutputFileUploadCondition
  description: >-
    The conditions under which the task output file or set of files should be uploaded.

    The default is taskcompletion.
  kind: enum
  properties:
  - description: Upload the file(s) only after the task process exits with an exit code of 0.
    types:
    - uid: string
    name: tasksuccess
  - description: Upload the file(s) only after the task process exits with a nonzero exit code.
    types:
    - uid: string
    name: taskfailure
  - description: Upload the file(s) after the task process exits, no matter what the exit code was.
    types:
    - uid: string
    name: taskcompletion
- name: AutoUserScope
  description: >-
    The scope for the auto user

    The default value is task.
  kind: enum
  properties:
  - description: Specifies that the service should create a new user for the task.
    types:
    - uid: string
    name: task
  - description: Specifies that the task runs as the common auto user account which is created on every node in a pool.
    types:
    - uid: string
    name: pool
- name: ElevationLevel
  description: >-
    The elevation level of the auto user.

    nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
  kind: enum
  properties:
  - description: The user is a standard user without elevated access.
    types:
    - uid: string
    name: nonadmin
  - description: The user is a user with elevated access and operates with full Administrator permissions.
    types:
    - uid: string
    name: admin
examples:
- request:
    uri: POST https://batch.core.windows.net/jobs/jobId/addtaskcollection?api-version=2017-09-01.6.0
    body: >-
      {
        "value": [
          {
            "id": "simple1",
            "commandLine": "cmd /c dir /s"
          },
          {
            "id": "simple2",
            "commandLine": "cmd /c dir /s"
          }
        ]
      }
    headers:
    - value: 00000000-0000-0000-0000-000000000000
      name: client-request-id
  responses:
  - statusCode: "200"
    body: >-
      {
        "value": [
          {
            "status": "success",
            "taskId": "simple1",
            "eTag": "0x8D3D623CD661246",
            "lastModified": "2016-09-06T07:02:44.7589958Z",
            "location": "https://account.region.batch.azure.com/jobs/jobId/tasks/simple1"
          },
          {
            "status": "success",
            "taskId": "simple2",
            "eTag": "0x8D3D623CD7072CC",
            "lastModified": "2016-09-06T07:02:44.8270028Z",
            "location": "https://account.region.batch.azure.com/jobs/jobId/tasks/simple2"
          }
        ]
      }
  name: Add a basic collection of tasks
- request:
    uri: POST https://batch.core.windows.net/jobs/jobId/addtaskcollection?api-version=2017-09-01.6.0
    body: >-
      {
        "value": [
          {
            "id": "complex1",
            "commandLine": "cmd /c dir /s",
            "resourceFiles": [
              {
                "blobSource": "https://account.blob.core.windows.net/",
                "filePath": "file1"
              }
            ],
            "environmentSettings": [
              {
                "name": "env1",
                "value": "value1"
              },
              {
                "name": "env2",
                "value": "value2"
              }
            ],
            "affinityInfo": {
              "affinityId": "affinityId"
            },
            "constraints": {
              "maxWallClockTime": "P1D",
              "retentionTime": "P2D",
              "maxTaskRetryCount": 5
            },
            "multiInstanceSettings": {
              "numberOfInstances": 3,
              "coordinationCommandLine": "cmd /c echo coordinating",
              "commonResourceFiles": [
                {
                  "blobSource": "https://common.blob.core.windows.net/",
                  "filePath": "common.exe"
                }
              ]
            }
          },
          {
            "id": "simple3",
            "commandLine": "cmd /c dir /s"
          }
        ]
      }
    headers:
    - value: 00000000-0000-0000-0000-000000000000
      name: client-request-id
  responses:
  - statusCode: "200"
    body: >-
      {
        "value": [
          {
            "taskId": "simple3",
            "status": "success",
            "eTag": "0x8D3D623CE295629",
            "lastModified": "2016-09-06T07:02:46.0386857Z",
            "location": "https://account.region.batch.azure.com/jobs/jobId/tasks/simple3"
          },
          {
            "taskId": "complex1",
            "status": "success",
            "eTag": "0x8D3D623CE29A412",
            "lastModified": "2016-09-06T07:02:46.0406802Z",
            "location": "https://account.region.batch.azure.com/jobs/jobId/tasks/complex1"
          }
        ]
      }
  name: Add a complex collection of tasks
security: []
name: AddCollection
uid: batch.core.windows.net.batchservice.task.addcollection
