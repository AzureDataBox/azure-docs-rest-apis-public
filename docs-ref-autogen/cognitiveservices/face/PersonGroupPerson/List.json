{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Face API",
    "description": "An API for face detection, verification, and identification."
  },
  "securityDefinitions": {
    "apim_key": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [
    {
      "apim_key": []
    }
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{AzureRegion}.api.cognitive.microsoft.com",
    "parameters": [
      {
        "$ref": "#/parameters/AzureRegion"
      }
    ]
  },
  "basePath": "/face/v1.0",
  "schemes": [
    "https"
  ],
  "paths": {
    "/persongroups/{personGroupId}/persons": {
      "get": {
        "description": "List all persons in a person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).",
        "operationId": "PersonGroupPerson_List",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "name": "start",
            "description": "Starting person id to return (used to list a range of persons).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "description": "Number of persons to return starting with the person id indicated by the 'start' parameter.",
            "in": "query",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of person information that belong to the person group.",
            "schema": {
              "$ref": "#/definitions/Persons"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "List persons in person group": {
            "parameters": {
              "AzureRegion": "westus",
              "Content-Type": "application/json",
              "Ocp-Apim-Subscription-Key": "{API key}",
              "personGroupId": "abc",
              "start": "25985303-c537-4467-b41d-bdb45cd95ca1",
              "top": 2
            },
            "responses": {
              "200": {
                "body": [
                  {
                    "personId": "25985303-c537-4467-b41d-bdb45cd95ca1",
                    "name": "Ryan",
                    "userData": "User-provided data attached to the person",
                    "persistedFaceIds": [
                      "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
                      "fce92aed-d578-4d2e-8114-068f8af4492e",
                      "b64d5e15-8257-4af2-b20a-5a750f8940e7"
                    ]
                  },
                  {
                    "personId": "2ae4935b-9659-44c3-977f-61fac20d0538",
                    "name": "David",
                    "userData": "User-provided data attached to the person",
                    "persistedFaceIds": [
                      "30ea1073-cc9e-4652-b1e3-d08fb7b95315",
                      "fbd2a038-dbff-452c-8e79-2ee81b1aa84e"
                    ]
                  }
                ]
              }
            }
          }
        },
        "x-internal-toc-name": "List"
      }
    }
  },
  "x-ms-paths": {
    "/verify?overload=persongroup": {
      "post": {
        "description": "Verify whether two faces belong to a same person. Compares a face Id with a Person Id",
        "operationId": "Face_VerifyFaceToPerson",
        "parameters": [
          {
            "name": "body",
            "description": "Request body for verifying two faces in a person group",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/VerifyFaceToPersonRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the verification result.",
            "schema": {
              "$ref": "#/definitions/VerifyResult"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Verify face to person example": {
            "parameters": {
              "AzureRegion": "westus",
              "Content-Type": "application/json",
              "Ocp-Apim-Subscription-Key": "{API key}",
              "body": {
                "faceId": "c5c24a82-6845-4031-9d5d-978df9175426",
                "personId": "815df99c-598f-4926-930a-a734b3fd651c",
                "personGroupId": "sample_group"
              }
            },
            "responses": {
              "200": {
                "body": {
                  "isIdentical": true,
                  "confidence": 0.9
                }
              }
            }
          }
        }
      }
    },
    "/detect?overload=stream": {
      "post": {
        "description": "Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.",
        "operationId": "Face_DetectWithStream",
        "parameters": [
          {
            "name": "returnFaceId",
            "in": "query",
            "description": "A value indicating whether the operation should return faceIds of detected faces.",
            "type": "boolean",
            "default": true
          },
          {
            "name": "returnFaceLandmarks",
            "in": "query",
            "description": "A value indicating whether the operation should return landmarks of the detected faces.",
            "type": "boolean",
            "default": false
          },
          {
            "$ref": "#/parameters/returnFaceAttributes"
          },
          {
            "$ref": "#/parameters/ImageStream"
          }
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of face entries ranked by face rectangle size in descendingorder. An empty response indicates no faces detected.",
            "schema": {
              "$ref": "#/definitions/DetectedFaces"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect with stream example": {
            "parameters": {
              "AzureRegion": "westus",
              "Content-Type": "application/octet-stream",
              "Ocp-Apim-Subscription-Key": "{API key}",
              "returnFaceAttributes": [
                "age",
                "gender",
                "headPose",
                "smile",
                "facialHair",
                "glasses",
                "emotion",
                "hair",
                "makeup",
                "occlusion",
                "accessories",
                "blur",
                "exposure",
                "noise"
              ],
              "Image": "{Image binary in base 64 format}"
            },
            "responses": {
              "200": {
                "body": [
                  {
                    "faceId": "c5c24a82-6845-4031-9d5d-978df9175426",
                    "faceRectangle": {
                      "width": 78,
                      "height": 78,
                      "left": 394,
                      "top": 54
                    },
                    "faceLandmarks": {
                      "pupilLeft": {
                        "x": 412.7,
                        "y": 78.4
                      },
                      "pupilRight": {
                        "x": 446.8,
                        "y": 74.2
                      },
                      "noseTip": {
                        "x": 437.7,
                        "y": 92.4
                      },
                      "mouthLeft": {
                        "x": 417.8,
                        "y": 114.4
                      },
                      "mouthRight": {
                        "x": 451.3,
                        "y": 109.3
                      },
                      "eyebrowLeftOuter": {
                        "x": 397.9,
                        "y": 78.5
                      },
                      "eyebrowLeftInner": {
                        "x": 425.4,
                        "y": 70.5
                      },
                      "eyeLeftOuter": {
                        "x": 406.7,
                        "y": 80.6
                      },
                      "eyeLeftTop": {
                        "x": 412.2,
                        "y": 76.2
                      },
                      "eyeLeftBottom": {
                        "x": 413,
                        "y": 80.1
                      },
                      "eyeLeftInner": {
                        "x": 418.9,
                        "y": 78
                      },
                      "eyebrowRightInner": {
                        "x": 4.8,
                        "y": 69.7
                      },
                      "eyebrowRightOuter": {
                        "x": 5.5,
                        "y": 68.5
                      },
                      "eyeRightInner": {
                        "x": 441.5,
                        "y": 75
                      },
                      "eyeRightTop": {
                        "x": 446.4,
                        "y": 71.7
                      },
                      "eyeRightBottom": {
                        "x": 447,
                        "y": 75.3
                      },
                      "eyeRightOuter": {
                        "x": 451.7,
                        "y": 73.4
                      },
                      "noseRootLeft": {
                        "x": 428,
                        "y": 77.1
                      },
                      "noseRootRight": {
                        "x": 435.8,
                        "y": 75.6
                      },
                      "noseLeftAlarTop": {
                        "x": 428.3,
                        "y": 89.7
                      },
                      "noseRightAlarTop": {
                        "x": 442.2,
                        "y": 87
                      },
                      "noseLeftAlarOutTip": {
                        "x": 424.3,
                        "y": 96.4
                      },
                      "noseRightAlarOutTip": {
                        "x": 446.6,
                        "y": 92.5
                      },
                      "upperLipTop": {
                        "x": 437.6,
                        "y": 105.9
                      },
                      "upperLipBottom": {
                        "x": 437.6,
                        "y": 108.2
                      },
                      "underLipTop": {
                        "x": 436.8,
                        "y": 111.4
                      },
                      "underLipBottom": {
                        "x": 437.3,
                        "y": 114.5
                      }
                    },
                    "faceAttributes": {
                      "age": 71,
                      "gender": "male",
                      "smile": 0.88,
                      "facialHair": {
                        "moustache": 0.8,
                        "beard": 0.1,
                        "sideburns": 0.02
                      },
                      "glasses": "sunglasses",
                      "headPose": {
                        "roll": 2.1,
                        "yaw": 3,
                        "pitch": 0
                      },
                      "emotion": {
                        "anger": 0.575,
                        "contempt": 0,
                        "disgust": 0.006,
                        "fear": 0.008,
                        "happiness": 0.394,
                        "neutral": 0.013,
                        "sadness": 0,
                        "surprise": 0.004
                      },
                      "hair": {
                        "bald": 0,
                        "invisible": false,
                        "hairColor": [
                          {
                            "color": "brown",
                            "confidence": 1
                          },
                          {
                            "color": "blond",
                            "confidence": 0.88
                          },
                          {
                            "color": "black",
                            "confidence": 0.48
                          },
                          {
                            "color": "other",
                            "confidence": 0.11
                          },
                          {
                            "color": "gray",
                            "confidence": 0.07
                          },
                          {
                            "color": "red",
                            "confidence": 0.03
                          }
                        ]
                      },
                      "makeup": {
                        "eyeMakeup": true,
                        "lipMakeup": false
                      },
                      "occlusion": {
                        "foreheadOccluded": false,
                        "eyeOccluded": false,
                        "mouthOccluded": false
                      },
                      "accessories": [
                        {
                          "type": "headWear",
                          "confidence": 0.99
                        },
                        {
                          "type": "glasses",
                          "confidence": 1
                        },
                        {
                          "type": "mask",
                          "confidence": 0.87
                        }
                      ],
                      "blur": {
                        "blurLevel": "Medium",
                        "value": 0.51
                      },
                      "exposure": {
                        "exposureLevel": "GoodExposure",
                        "value": 0.55
                      },
                      "noise": {
                        "noiseLevel": "Low",
                        "value": 0.12
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedFaces?overload=stream": {
      "post": {
        "description": "Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.",
        "operationId": "PersonGroupPerson_AddPersonFaceFromStream",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "#/parameters/ImageStream"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add face to person with stream example": {
            "parameters": {
              "AzureRegion": "westus",
              "Content-Type": "application/octet-stream",
              "Ocp-Apim-Subscription-Key": "{API key}",
              "personGroupId": "abc",
              "personId": "4caa25ee-3bc6-4e88-adf8-12455ce7aab0",
              "userData": "{customized User data}",
              "targetFace": [
                10,
                10,
                100,
                100
              ],
              "Image": "{Image stream in base 64 encoded format}"
            },
            "responses": {
              "200": {
                "body": {
                  "persistedFaceId": "6e04c175-219e-42a2-9d26-0e7b790e1ef4"
                }
              }
            }
          }
        }
      }
    },
    "/facelists/{faceListId}/persistedFaces?overload=stream": {
      "post": {
        "description": "Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.",
        "operationId": "FaceList_AddFaceFromStream",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "#/parameters/ImageStream"
          }
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Add face to face list from stream example": {
            "parameters": {
              "AzureRegion": "westus",
              "Content-Type": "application/octet-stream",
              "Ocp-Apim-Subscription-Key": "{API key}",
              "faceListId": "sample_face_list",
              "userData": "{Customized user data}",
              "targetFace": [
                10,
                10,
                100,
                100
              ],
              "Image": "{Image stream in base 64 encoded format}"
            },
            "responses": {
              "200": {
                "body": {
                  "persistedFaceId": "B8D802CF-DD8F-4E61-B15C-9E6C5844CCBA"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "APIError": {
      "type": "object",
      "description": "Error information returned by the API",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "Error body.",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "DetectedFaces": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DetectedFace"
      }
    },
    "DetectedFace": {
      "type": "object",
      "required": [
        "faceRectangle"
      ],
      "description": "Detected Face object.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid"
        },
        "faceRectangle": {
          "$ref": "#/definitions/FaceRectangle"
        },
        "faceLandmarks": {
          "$ref": "#/definitions/FaceLandmarks"
        },
        "faceAttributes": {
          "$ref": "#/definitions/FaceAttributes"
        }
      }
    },
    "FaceRectangle": {
      "type": "object",
      "required": [
        "width",
        "height",
        "left",
        "top"
      ],
      "description": "A rectangle within which a face can be found",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "The width of the rectangle, in pixels."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the rectangle, in pixels."
        },
        "left": {
          "type": "integer",
          "format": "int32",
          "description": "The distance from the left edge if the image to the left edge of the rectangle, in pixels."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The distance from the top edge if the image to the top edge of the rectangle, in pixels."
        }
      }
    },
    "Coordinate": {
      "type": "object",
      "required": [
        "x",
        "y"
      ],
      "description": "Coordinates within an image",
      "properties": {
        "x": {
          "type": "number",
          "description": "The horizontal component, in pixels."
        },
        "y": {
          "type": "number",
          "description": "The vertical component, in pixels."
        }
      }
    },
    "FaceLandmarks": {
      "type": "object",
      "description": "A collection of 27-point face landmarks pointing to the important positions of face components.",
      "properties": {
        "pupilLeft": {
          "$ref": "#/definitions/Coordinate"
        },
        "pupilRight": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseTip": {
          "$ref": "#/definitions/Coordinate"
        },
        "mouthLeft": {
          "$ref": "#/definitions/Coordinate"
        },
        "mouthRight": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyebrowLeftOuter": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyebrowLeftInner": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeLeftOuter": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeLeftTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeLeftBottom": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeLeftInner": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyebrowRightInner": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyebrowRightOuter": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeRightInner": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeRightTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeRightBottom": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeRightOuter": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseRootLeft": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseRootRight": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseLeftAlarTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseRightAlarTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseLeftAlarOutTip": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseRightAlarOutTip": {
          "$ref": "#/definitions/Coordinate"
        },
        "upperLipTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "upperLipBottom": {
          "$ref": "#/definitions/Coordinate"
        },
        "underLipTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "underLipBottom": {
          "$ref": "#/definitions/Coordinate"
        }
      }
    },
    "FaceAttributes": {
      "type": "object",
      "description": "Face Attributes",
      "properties": {
        "age": {
          "type": "number",
          "description": "Age in years"
        },
        "gender": {
          "type": "string",
          "description": "Possible gender of the face.",
          "x-ms-enum": {
            "name": "Gender",
            "modelAsString": false
          },
          "enum": [
            "male",
            "female",
            "genderless"
          ]
        },
        "smile": {
          "description": "Smile intensity, a number between [0,1] ",
          "$ref": "#/definitions/Level"
        },
        "facialHair": {
          "description": "Properties describing facial hair attributes.",
          "$ref": "#/definitions/FacialHair"
        },
        "glasses": {
          "type": "string",
          "description": "Glasses type if any of the face.",
          "x-ms-enum": {
            "name": "GlassesType",
            "modelAsString": false
          },
          "enum": [
            "noGlasses",
            "readingGlasses",
            "sunglasses",
            "swimmingGoggles"
          ]
        },
        "headPose": {
          "description": "Properties indicating head pose of the face.",
          "$ref": "#/definitions/HeadPose"
        },
        "emotion": {
          "description": "Properties describing facial emotion in form of confidence ranging from 0 to 1.",
          "$ref": "#/definitions/Emotion"
        },
        "hair": {
          "description": "Properties describing hair attributes.",
          "$ref": "#/definitions/Hair"
        },
        "makeup": {
          "description": "Properties describing present makeups on a given face.",
          "$ref": "#/definitions/Makeup"
        },
        "occlusion": {
          "description": "Properties describing occlusions on a given face.",
          "$ref": "#/definitions/Occlusion"
        },
        "accessories": {
          "description": "Properties describing any accessories on a given face.",
          "$ref": "#/definitions/Accessories"
        },
        "blur": {
          "description": "Properties describing any presence of blur within the image.",
          "$ref": "#/definitions/Blur"
        },
        "exposure": {
          "description": "Properties describing exposure level of the image.",
          "$ref": "#/definitions/Exposure"
        },
        "noise": {
          "description": "Properties describing noise level of the image.",
          "$ref": "#/definitions/Noise"
        }
      }
    },
    "FacialHair": {
      "type": "object",
      "description": "Properties describing facial hair attributes.",
      "properties": {
        "moustache": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "beard": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "sideburns": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "HeadPose": {
      "type": "object",
      "description": "Properties indicating head pose of the face.",
      "properties": {
        "roll": {
          "type": "number",
          "x-nullable": false
        },
        "yaw": {
          "type": "number",
          "x-nullable": false
        },
        "pitch": {
          "type": "number",
          "x-nullable": false
        }
      }
    },
    "Emotion": {
      "type": "object",
      "description": "Properties describing facial emotion in form of confidence ranging from 0 to 1.",
      "properties": {
        "anger": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "contempt": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "disgust": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "fear": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "happiness": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "neutral": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "sadness": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "surprise": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "Hair": {
      "type": "object",
      "description": "Properties describing hair attributes.",
      "properties": {
        "bald": {
          "description": "A number describing confidence level of whether the person is bald.",
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "invisible": {
          "type": "boolean",
          "description": "A boolean value describing whether the hair is visible in the image.",
          "x-nullable": false
        },
        "hairColor": {
          "description": "An array of candidate colors and confidence level in the presence of each.",
          "$ref": "#/definitions/HairColors"
        }
      }
    },
    "HairColors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/HairColor"
      }
    },
    "HairColor": {
      "type": "object",
      "description": "Hair color and associated confidence",
      "properties": {
        "color": {
          "type": "string",
          "description": "Name of the hair color.",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "HairColorType",
            "modelAsString": false
          },
          "enum": [
            "unknown",
            "white",
            "gray",
            "blond",
            "brown",
            "red",
            "black",
            "other"
          ]
        },
        "confidence": {
          "x-nullable": false,
          "description": "Confidence level of the color",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "Makeup": {
      "type": "object",
      "description": "Properties describing present makeups on a given face.",
      "properties": {
        "eyeMakeup": {
          "type": "boolean",
          "description": "A boolean value describing whether eye makeup is present on a face.",
          "x-nullable": false
        },
        "lipMakeup": {
          "type": "boolean",
          "description": "A boolean value describing whether lip makeup is present on a face.",
          "x-nullable": false
        }
      }
    },
    "Occlusion": {
      "type": "object",
      "description": "Properties describing occlusions on a given face.",
      "properties": {
        "foreheadOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether forehead is occluded.",
          "x-nullable": false
        },
        "eyeOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether eyes are occluded.",
          "x-nullable": false
        },
        "mouthOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether the mouth is occluded.",
          "x-nullable": false
        }
      }
    },
    "Accessories": {
      "type": "array",
      "description": "Properties describing any accessories on a given face.",
      "items": {
        "$ref": "#/definitions/Accessory"
      }
    },
    "Accessory": {
      "type": "object",
      "description": "Accessory item and corresponding confidence level.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of an accessory",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "AccessoryType",
            "modelAsString": false
          },
          "enum": [
            "headWear",
            "glasses",
            "mask"
          ]
        },
        "confidence": {
          "x-nullable": false,
          "description": "Confidence level of an accessory",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "Blur": {
      "type": "object",
      "description": "Properties describing any presence of blur within the image.",
      "properties": {
        "blurLevel": {
          "type": "string",
          "description": "An enum value indicating level of blurriness.",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "BlurLevel",
            "modelAsString": false
          },
          "enum": [
            "Low",
            "Medium",
            "High"
          ]
        },
        "value": {
          "description": "A number indicating level of blurriness ranging from 0 to 1.",
          "x-nullable": false,
          "$ref": "#/definitions/Level"
        }
      }
    },
    "Exposure": {
      "type": "object",
      "description": "Properties describing exposure level of the image.",
      "properties": {
        "exposureLevel": {
          "type": "string",
          "description": "An enum value indicating level of exposure.",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "ExposureLevel",
            "modelAsString": false
          },
          "enum": [
            "UnderExposure",
            "GoodExposure",
            "OverExposure"
          ]
        },
        "value": {
          "description": "A number indicating level of exposure level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure.",
          "x-nullable": false,
          "$ref": "#/definitions/Level"
        }
      }
    },
    "Noise": {
      "type": "object",
      "description": "Properties describing noise level of the image.",
      "properties": {
        "noiseLevel": {
          "type": "string",
          "description": "An enum value indicating level of noise.",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "NoiseLevel",
            "modelAsString": false
          },
          "enum": [
            "Low",
            "Medium",
            "High"
          ]
        },
        "value": {
          "description": "A number indicating level of noise level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3, 0.7) is medium noise level. [0.7, 1] is high noise level.",
          "x-nullable": false,
          "$ref": "#/definitions/Level"
        }
      }
    },
    "FindSimilarRequest": {
      "type": "object",
      "required": [
        "faceId"
      ],
      "description": "Request body for find similar operation.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call"
        },
        "faceListId": {
          "type": "string",
          "description": "An existing user-specified unique candidate face list, created in Face List - Create a Face List. Face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter faceListId and faceIds should not be provided at the same time",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "faceIds": {
          "type": "array",
          "description": "An array of candidate faceIds. All of them are created by Face - Detect and the faceIds will expire 24 hours after the detection call.",
          "maxItems": 1000,
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "maxNumOfCandidatesReturned": {
          "type": "integer",
          "description": "The number of top similar faces returned. The valid range is [1, 1000].",
          "default": 20,
          "minimum": 1,
          "maximum": 1000
        },
        "mode": {
          "type": "string",
          "description": "Similar face searching mode. It can be \"matchPerson\" or \"matchFace\".",
          "default": "matchPerson",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "FindSimilarMatchMode",
            "modelAsString": false
          },
          "enum": [
            "matchPerson",
            "matchFace"
          ]
        }
      }
    },
    "SimilarFaces": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SimilarFace"
      }
    },
    "SimilarFace": {
      "type": "object",
      "required": [
        "confidence"
      ],
      "description": "Response body for find similar face operation.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of candidate face when find by faceIds. faceId is created by Face - Detect and will expire 24 hours after the detection call"
        },
        "persistedFaceId": {
          "type": "string",
          "format": "uuid",
          "description": "PersistedFaceId of candidate face when find by faceListId. persistedFaceId in face list is persisted and will not expire. As showed in below response"
        },
        "confidence": {
          "description": "Similarity confidence of the candidate face. The higher confidence, the more similar. Range between [0,1].",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "GroupRequest": {
      "type": "object",
      "required": [
        "faceIds"
      ],
      "description": "Request body for group request.",
      "properties": {
        "faceIds": {
          "type": "array",
          "description": "Array of candidate faceId created by Face - Detect. The maximum is 1000 faces",
          "maxItems": 1000,
          "items": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        }
      }
    },
    "GroupResult": {
      "type": "object",
      "required": [
        "groups"
      ],
      "description": "An array of face groups based on face similarity.",
      "properties": {
        "groups": {
          "type": "array",
          "description": "A partition of the original faces based on face similarity. Groups are ranked by number of faces",
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            }
          }
        },
        "messyGroup": {
          "type": "array",
          "description": "Face ids array of faces that cannot find any similar faces from original faces.",
          "items": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        }
      }
    },
    "IdentifyRequest": {
      "type": "object",
      "required": [
        "personGroupId",
        "faceIds"
      ],
      "description": "Request body for identify face operation.",
      "properties": {
        "personGroupId": {
          "description": "PersonGroupId of the target person group, created by PersonGroups.Create",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "faceIds": {
          "type": "array",
          "description": "Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10].",
          "maxItems": 10,
          "items": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        },
        "maxNumOfCandidatesReturned": {
          "type": "integer",
          "description": "The range of maxNumOfCandidatesReturned is between 1 and 5 (default is 1).",
          "default": 1,
          "minimum": 1,
          "maximum": 5
        },
        "confidenceThreshold": {
          "description": "Confidence threshold of identification, used to judge whether one face belong to one person. The range of confidenceThreshold is [0, 1] (default specified by algorithm).",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "IdentifyResults": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/IdentifyResult"
      }
    },
    "IdentifyResult": {
      "type": "object",
      "required": [
        "faceId",
        "candidates"
      ],
      "description": "Response body for identify face operation.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of the query face"
        },
        "candidates": {
          "type": "array",
          "description": "Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array.",
          "items": {
            "$ref": "#/definitions/IdentifyCandidate"
          }
        }
      }
    },
    "IdentifyCandidate": {
      "type": "object",
      "required": [
        "personId",
        "confidence"
      ],
      "description": "All possible faces that may qualify.",
      "properties": {
        "personId": {
          "type": "string",
          "format": "uuid",
          "description": "Id of candidate"
        },
        "confidence": {
          "description": "Confidence threshold of identification, used to judge whether one face belong to one person. The range of confidenceThreshold is [0, 1] (default specified by algorithm).",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "VerifyFaceToPersonRequest": {
      "type": "object",
      "required": [
        "faceId",
        "personId",
        "personGroupId"
      ],
      "description": "Request body for verify operation.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId the face, comes from Face - Detect"
        },
        "personGroupId": {
          "description": "Using existing personGroupId and personId for fast loading a specified person. personGroupId is created in Person Groups.Create.",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "personId": {
          "type": "string",
          "format": "uuid",
          "description": "Specify a certain person in a person group. personId is created in Persons.Create."
        }
      }
    },
    "VerifyFaceToFaceRequest": {
      "type": "object",
      "required": [
        "faceId1",
        "faceId2"
      ],
      "description": "Request body for verify operation.",
      "properties": {
        "faceId1": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of the first face, comes from Face - Detect"
        },
        "faceId2": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of the second face, comes from Face - Detect"
        }
      }
    },
    "VerifyResult": {
      "type": "object",
      "required": [
        "isIdentical",
        "confidence"
      ],
      "description": "Result of the verify operation.",
      "properties": {
        "isIdentical": {
          "type": "boolean",
          "description": "True if the two faces belong to the same person or the face belongs to the person, otherwise false."
        },
        "confidence": {
          "description": "A number indicates the similarity confidence of whether two faces belong to the same person, or whether the face belongs to the person. By default, isIdentical is set to True if similarity confidence is greater than or equal to 0.5. This is useful for advanced users to override \"isIdentical\" and fine-tune the result on their own data.",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "FaceList": {
      "description": "Face list object.",
      "type": "object",
      "required": [
        "faceListId"
      ],
      "properties": {
        "faceListId": {
          "type": "string",
          "description": "FaceListId of the target face list.",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "persistedFaces": {
          "type": "array",
          "description": "Persisted faces within the face list.",
          "items": {
            "$ref": "#/definitions/PersistedFace"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NameAndUserDataContract"
        }
      ]
    },
    "FaceLists": {
      "type": "array",
      "description": "An array of face list results, with fields of faceListId, name and userData",
      "items": {
        "$ref": "#/definitions/FaceList"
      }
    },
    "PersonGroup": {
      "type": "object",
      "required": [
        "personGroupId"
      ],
      "description": "Person group object.",
      "properties": {
        "personGroupId": {
          "description": "PersonGroupId of the existing person groups.",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NameAndUserDataContract"
        }
      ]
    },
    "PersonGroups": {
      "type": "array",
      "description": "An array of person groups.",
      "items": {
        "$ref": "#/definitions/PersonGroup"
      }
    },
    "Person": {
      "type": "object",
      "required": [
        "personId"
      ],
      "description": "Person object.",
      "properties": {
        "personId": {
          "type": "string",
          "format": "uuid",
          "description": "PersonId of the target face list."
        },
        "persistedFaceIds": {
          "type": "array",
          "description": "PersistedFaceIds of registered faces in the person. These persistedFaceIds are returned from Person - Add a Person Face, and will not expire.",
          "items": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NameAndUserDataContract"
        }
      ]
    },
    "Persons": {
      "type": "array",
      "description": "An array of Persons.",
      "items": {
        "$ref": "#/definitions/Person"
      }
    },
    "PersistedFace": {
      "type": "object",
      "required": [
        "persistedFaceId"
      ],
      "description": "PersonFace object.",
      "properties": {
        "persistedFaceId": {
          "type": "string",
          "format": "uuid",
          "description": "The persistedFaceId of the target face, which is persisted and will not expire. Different from faceId created by Face - Detect and will expire in 24 hours after the detection call."
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB.",
          "maxLength": 1024
        }
      }
    },
    "UpdatePersonFaceRequest": {
      "type": "object",
      "description": "Request to update person face data.",
      "properties": {
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB.",
          "maxLength": 1024
        }
      }
    },
    "TrainingStatus": {
      "type": "object",
      "required": [
        "status",
        "createdDateTime"
      ],
      "description": "Training status object.",
      "properties": {
        "status": {
          "type": "string",
          "description": "Training status: notstarted, running, succeeded, failed. If the training process is waiting to perform, the status is notstarted. If the training is ongoing, the status is running. Status succeed means this person group is ready for Face - Identify. Status failed is often caused by no person or no persisted face exist in the person group",
          "x-ms-enum": {
            "name": "TrainingStatusType",
            "modelAsString": false
          },
          "enum": [
            "nonstarted",
            "running",
            "succeeded",
            "failed"
          ]
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "A combined UTC date and time string that describes person group created time.",
          "x-ms-client-name": "created"
        },
        "lastActionDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Person group last modify time in the UTC, could be null value when the person group is not successfully trained.",
          "x-ms-client-name": "lastAction"
        },
        "message": {
          "type": "string",
          "description": "Show failure message when training failed (omitted when training succeed)."
        }
      }
    },
    "Confidence": {
      "description": "A number ranging from 0 to 1 indicating a level of confidence associated with a property.",
      "type": "number",
      "minimum": 0,
      "maximum": 1
    },
    "Level": {
      "description": "A number ranging from 0 to 1 indicating the intensity level associated with a property.",
      "type": "number",
      "minimum": 0,
      "maximum": 1
    },
    "NameAndUserDataContract": {
      "type": "object",
      "description": "A combination of user defined name and user specified data for the person, personGroup, and faceList",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128.",
          "maxLength": 128
        },
        "userData": {
          "type": "string",
          "description": "User specified data. Length should not exceed 16KB.",
          "maxLength": 16384
        }
      }
    },
    "ImageUrl": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "url": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "returnFaceAttributes": {
      "name": "returnFaceAttributes",
      "in": "query",
      "description": "Analyze and return the one or more specified face attributes in the comma-separated string like \"returnFaceAttributes=age,gender\". Supported face attributes include age, gender, headPose, smile, facialHair, glasses and emotion. Note that each face attribute analysis has additional computational and time cost.",
      "type": "array",
      "x-ms-parameter-location": "method",
      "required": false,
      "collectionFormat": "csv",
      "items": {
        "type": "string",
        "x-nullable": false,
        "x-ms-enum": {
          "name": "FaceAttributeType",
          "modelAsString": false
        },
        "enum": [
          "age",
          "gender",
          "headPose",
          "smile",
          "facialHair",
          "glasses",
          "emotion",
          "hair",
          "makeup",
          "occlusion",
          "accessories",
          "blur",
          "exposure",
          "noise"
        ]
      }
    },
    "targetFace": {
      "name": "targetFace",
      "in": "query",
      "description": "A face rectangle to specify the target face to be added to a person in the format of \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.",
      "type": "array",
      "x-ms-parameter-location": "method",
      "required": false,
      "collectionFormat": "csv",
      "items": {
        "type": "integer",
        "format": "int32",
        "x-nullable": false,
        "maxItems": 4,
        "minItems": 4
      }
    },
    "faceUserData": {
      "name": "userData",
      "in": "query",
      "description": "User-specified data about the face for any purpose. The maximum length is 1KB.",
      "type": "string",
      "maxLength": 1024,
      "x-ms-parameter-location": "method",
      "required": false,
      "collectionFormat": "csv"
    },
    "faceListId": {
      "name": "faceListId",
      "in": "path",
      "description": "Id referencing a particular face list.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv",
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    },
    "personGroupId": {
      "name": "personGroupId",
      "in": "path",
      "description": "Id referencing a particular person group.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv",
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    },
    "personId": {
      "name": "personId",
      "in": "path",
      "description": "Id referencing a particular person.",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv"
    },
    "persistedFaceId": {
      "name": "persistedFaceId",
      "in": "path",
      "description": "Id referencing a particular persistedFaceId of an existing face.",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv"
    },
    "ImageStream": {
      "name": "Image",
      "in": "body",
      "required": true,
      "x-ms-parameter-location": "method",
      "description": "An image stream.",
      "schema": {
        "type": "object",
        "format": "file"
      }
    },
    "ImageUrl": {
      "name": "ImageUrl",
      "in": "body",
      "required": true,
      "x-ms-parameter-location": "method",
      "x-ms-client-flatten": true,
      "description": "A JSON document with a URL pointing to the image that is to be analyzed.",
      "schema": {
        "$ref": "#/definitions/ImageUrl"
      }
    },
    "AzureRegion": {
      "name": "AzureRegion",
      "description": "Supported Azure regions for Cognitive Services endpoints",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true,
      "x-ms-enum": {
        "name": "AzureRegions",
        "modelAsString": false
      },
      "enum": [
        "westus",
        "westeurope",
        "southeastasia",
        "eastus2",
        "westcentralus",
        "westus2",
        "eastus",
        "southcentralus",
        "northeurope",
        "eastasia",
        "australiaeast",
        "brazilsouth"
      ]
    }
  },
  "x-internal-service-name": "Cognitive Services",
  "x-internal-toc-name": "Person Group Person",
  "x-internal-split-type": "Operation",
  "x-internal-operation-name": "List"
}