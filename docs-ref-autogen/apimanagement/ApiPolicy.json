{
  "swagger": "2.0",
  "info": {
    "title": "ApiManagementClient",
    "description": "Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.",
    "version": "2016-10-10"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow.",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policy": {
      "get": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_Get",
        "description": "Get the policy configuration at the API level.",
        "produces": [
          "application/vnd.ms-azure-apim.policy+xml"
        ],
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Api Policy information.",
            "schema": {
              "type": "file"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_CreateOrUpdate",
        "description": "Creates or updates policy configuration for the API.",
        "consumes": [
          "application/vnd.ms-azure-apim.policy+xml"
        ],
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "schema": {
              "type": "object",
              "format": "file"
            },
            "required": true,
            "description": "The policy contents to apply."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state (Etag) version of the Api Policy to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Api policy configuration was successfully created."
          },
          "204": {
            "description": "Api policy configuration of the tenant was successfully updated."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_Delete",
        "description": "Deletes the policy configuration at the Api.",
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state (Etag) version of the Api policy to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the policy configuration at the API level."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        }
      }
    }
  },
  "x-ms-paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}?export=true": {
      "get": {
        "tags": [
          "Apis"
        ],
        "operationId": "ApiExport_Get",
        "description": "Gets the details of the API specified by its identifier.",
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response contains a stream with a full set of API metadata and includes API entity with an embedded array of operation entities.",
            "schema": {
              "$ref": "#/definitions/ApiExportResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total record count number across all pages."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Api list representation."
    },
    "ApiContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "API identifier path: /apis/{apiId}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 1,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Http",
              "Https"
            ],
            "x-ms-enum": {
              "name": "ApiProtocolContract",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiEntityBaseContract"
        }
      ],
      "required": [
        "name",
        "serviceUrl",
        "path",
        "protocols"
      ],
      "description": "API details."
    },
    "ApiEntityBaseContract": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the API. May include HTML formatting tags."
        },
        "authenticationSettings": {
          "$ref": "#/definitions/AuthenticationSettingsContract",
          "description": "Collection of authentication settings included into this API."
        },
        "subscriptionKeyParameterNames": {
          "$ref": "#/definitions/SubscriptionKeyParameterNamesContract",
          "description": "Protocols over which API is made available."
        },
        "type": {
          "type": "string",
          "description": "Type of API.",
          "enum": [
            "Http",
            "Soap"
          ],
          "x-ms-enum": {
            "name": "ApiTypeContract",
            "modelAsString": false
          }
        }
      },
      "description": "API base contract details."
    },
    "ApiExportResult": {
      "properties": {
        "content": {
          "type": "string",
          "format": "byte",
          "description": "Response content bytes."
        },
        "statusCode": {
          "type": "string",
          "enum": [
            "Continue",
            "OK",
            "Created",
            "Accepted",
            "NotFound",
            "Conflict"
          ],
          "x-ms-enum": {
            "name": "HttpStatusCode",
            "modelAsString": false
          }
        },
        "requestId": {
          "type": "string"
        }
      },
      "description": "The response model for the export API output operation."
    },
    "ApiUpdateContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "API identifier path: /apis/{apiId}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 1,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Http",
              "Https"
            ],
            "x-ms-enum": {
              "name": "ApiProtocolContract",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiEntityBaseContract"
        }
      ],
      "description": "API Update Contract details."
    },
    "AuthenticationSettingsContract": {
      "properties": {
        "oAuth2": {
          "$ref": "#/definitions/OAuth2AuthenticationSettingsContract"
        }
      },
      "description": "API Authentication Settings."
    },
    "OAuth2AuthenticationSettingsContract": {
      "properties": {
        "authorizationServerId": {
          "type": "string",
          "description": "OAuth authorization server identifier."
        },
        "scope": {
          "type": "string",
          "description": "operations scope."
        }
      },
      "description": "API OAuth2 Authentication settings details."
    },
    "OperationCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total record count number across all pages."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Operation list representation."
    },
    "OperationContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Uniquely identifies the operation within the current API Management service instance. The value is a valid relative URL in the format of /apis/{aid}/operations/{id} where {aid} is an API identifier and {id} is an operation identifier.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Operation Name.",
          "minLength": 1,
          "maxLength": 300
        },
        "method": {
          "type": "string",
          "description": "A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.",
          "externalDocs": {
            "description": "As defined by RFC.",
            "url": "http://www.rfc-editor.org/rfc/rfc7230.txt"
          }
        },
        "urlTemplate": {
          "type": "string",
          "description": "Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}",
          "minLength": 1,
          "maxLength": 1000
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OperationEntityBaseContract"
        }
      ],
      "required": [
        "name",
        "method",
        "urlTemplate"
      ],
      "description": "Api Operation details."
    },
    "OperationEntityBaseContract": {
      "properties": {
        "templateParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of URL template parameters."
        },
        "description": {
          "type": "string",
          "description": "Description of the operation. May include HTML formatting tags.",
          "maxLength": 1000
        },
        "request": {
          "$ref": "#/definitions/RequestContract",
          "description": "An entity containing request details."
        },
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultContract"
          },
          "description": "Array of Operation responses."
        }
      },
      "description": "Api Operation Entity Base Contract details."
    },
    "OperationUpdateContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Uniquely identifies the operation within the current API Management service instance. The value is a valid relative URL in the format of /apis/{aid}/operations/{id} where {aid} is an API identifier and {id} is an operation identifier.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Operation Name.",
          "minLength": 1,
          "maxLength": 300
        },
        "method": {
          "type": "string",
          "description": "A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.",
          "externalDocs": {
            "description": "As defined by RFC.",
            "url": "http://www.rfc-editor.org/rfc/rfc7230.txt"
          }
        },
        "urlTemplate": {
          "type": "string",
          "description": "Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}",
          "minLength": 1,
          "maxLength": 1000
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OperationEntityBaseContract"
        }
      ],
      "description": "Api Operation Update Contract details."
    },
    "ParameterContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Parameter name."
        },
        "description": {
          "type": "string",
          "description": "Parameter description."
        },
        "type": {
          "type": "string",
          "description": "Parameter type."
        },
        "defaultValue": {
          "type": "string",
          "description": "Default parameter value."
        },
        "required": {
          "type": "boolean",
          "description": "whether parameter is required or not."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Parameter values."
        }
      },
      "required": [
        "name",
        "type"
      ],
      "description": "Operation parameters details."
    },
    "RepresentationContract": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Specifies a registered or custom content type for this representation, e.g. application/xml."
        },
        "sample": {
          "type": "string",
          "description": "An example of the representation."
        }
      },
      "required": [
        "contentType"
      ],
      "description": "Operation request/response representation details."
    },
    "RequestContract": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Operation request description."
        },
        "queryParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of operation request query parameters."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of operation request headers."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepresentationContract"
          },
          "description": "Collection of operation request representations."
        }
      },
      "description": "Operation request details."
    },
    "ResultContract": {
      "properties": {
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "Operation response HTTP status code.",
          "minimum": 100,
          "maximum": 599
        },
        "description": {
          "type": "string",
          "description": "Operation response description."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepresentationContract"
          },
          "description": "Collection of operation response representations."
        }
      },
      "required": [
        "statusCode"
      ],
      "description": "Operation response details."
    },
    "SubscriptionKeyParameterNamesContract": {
      "properties": {
        "header": {
          "type": "string",
          "description": "Subscription key header name."
        },
        "query": {
          "type": "string",
          "description": "Subscription key query string parameter name."
        }
      },
      "description": "Subscription key parameter names details.",
      "example": {
        "subscriptionKeyParameterNames": {
          "query": "customQueryParameterName",
          "header": "customHeaderParameterName"
        }
      }
    }
  },
  "parameters": {
    "ApiIdParameter": {
      "name": "apiId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "API identifier. Must be unique in the current API Management service instance.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    },
    "OperationIdParameter": {
      "name": "operationId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Operation identifier within an API. Must be unique in the current API Management service instance.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    }
  }
}